{
    "model.py": {
        "tensorflow": {
            "Saver_46": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_61": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.tensorboard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.compat.v1.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "variable": {
                    "value": "A_intersect_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y * self.train_labels_node",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.train_labels_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_179": {
                "variable": {
                    "value": "x2r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.train_labels_node, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "variable": {
                    "value": "qr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.reshape(y.shape[0], y.shape[1] * y.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_182": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.train_labels_node, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.reshape(y.shape[0], y.shape[1] * y.shape[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_184": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(x2, y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_no_nan_185": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(q, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sumr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x2r + qr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_transpose_249": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.train_batch_size, h, w, n_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.train_data_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.dim1, self.dim2, self.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.train_labels_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.targetDim1, self.targetDim2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.conv1_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.conf['conv1'][0], self.conf['conv1'][1], self.num_channels, self.conf['conv1'][2]], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "self.conv1_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.conf['conv1'][2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "self.conv2_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.conf['conv2'][0], self.conf['conv2'][1], self.conf['conv1'][2], self.conf['conv2'][2]], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "self.conv2_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.conf['conv2'][2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "self.conv3_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.conf['conv3'][0], self.conf['conv3'][1], self.conf['conv2'][2], self.conf['conv3'][2]], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "self.conv3_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.conf['conv3'][2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self.conv4_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.conf['conv4'][0], self.conf['conv4'][1], self.conf['conv3'][2], self.conf['conv4'][2]], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_116": {
                "variable": {
                    "value": "self.conv4_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.conf['conv4'][2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.conv4r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([1, 2, 2, 1], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([4, 4, 16, 16], stddev=0.1, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "self.conv4r_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_206": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2 * k[1], 2 * k[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_286": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.train_data_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.conv1_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], self.conf['padding1'], self.conf['padding1'], [0, 0]]",
                            "List"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding2'], self.conf['padding2'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding3'], self.conf['padding3'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding4'], self.conf['padding4'], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_292": {
                "variable": {
                    "value": "relu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv1, self.conv1_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_297": {
                "variable": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], self.conf['padding2'], self.conf['padding2'], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_299": {
                "variable": {
                    "value": "conv2Inputpad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relu1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv1, self.conv1_biases))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], self.conf['padding1'], self.conf['padding1'], [0, 0]]",
                            "List"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding2'], self.conf['padding2'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding3'], self.conf['padding3'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding4'], self.conf['padding4'], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2Inputpad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(relu1, paddings, 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv2_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_305": {
                "variable": {
                    "value": "relu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv2, self.conv2_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_313": {
                "variable": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv2, self.conv2_biases))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_318": {
                "variable": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], self.conf['padding3'], self.conf['padding3'], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_320": {
                "variable": {
                    "value": "conv3Inputpad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool2d(relu2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], self.conf['padding1'], self.conf['padding1'], [0, 0]]",
                            "List"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding2'], self.conf['padding2'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding3'], self.conf['padding3'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding4'], self.conf['padding4'], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_325": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3Inputpad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(pool2, paddings, 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv3_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_330": {
                "variable": {
                    "value": "relu3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv3, self.conv3_biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], self.conf['padding4'], self.conf['padding4'], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_445": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "errors_Summary",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(tf.reduce_sum(-(2 * A_intersect_B / (eps + denominator))))",
                            "Call"
                        ],
                        [
                            "self.sess.run(self.__loss(self.y_), feed_dict={self.train_labels_node: labels})",
                            "Call"
                        ],
                        [
                            "self.sess.run(self.__loss(self.y_), feed_dict={self.train_labels_node: labels})",
                            "Call"
                        ],
                        [
                            "loss + 0.0005 * regularizers",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_447": {
                "variable": {
                    "value": "weight_stats1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights4_Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv4_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_448": {
                "variable": {
                    "value": "weight_stats2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights3_Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv3_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_449": {
                "variable": {
                    "value": "weight_stats3",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights4r_Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv4r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_450": {
                "variable": {
                    "value": "weight_stats4",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights2_Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv2_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_451": {
                "variable": {
                    "value": "weight_stats5",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights4_Histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.conv1_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_457": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_458": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.targetDim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "merge_470": {
                "variable": {
                    "value": "merged_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[weight_stats1, weight_stats2, weight_stats3, weight_stats4, weight_stats5, losses]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.train.exponential_decay(self.lr, global_step, self.targetDim1, 0.99, staircase=False)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "input_target_placeholders",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "weight_Bias_learning_parameters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.reshape(y.shape[0], y.shape[1] * y.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "-(2 * A_intersect_B / (eps + denominator))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "input_tensor": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.divide_no_nan(r1, sumr)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "weight_Bias_Convolution_rate",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_344": {
                "variable": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__upsampling(relu3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv4_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_349": {
                "variable": {
                    "value": "lasts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(up, self.conv4_weights, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, self.conv4r, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output1, [3])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv4r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_354": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lasts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(last, self.conv4r, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_364": {
                "variable": {
                    "value": "conv4Inputpad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.__upsampling(relu3)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0, 0], self.conf['padding1'], self.conf['padding1'], [0, 0]]",
                            "List"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding2'], self.conf['padding2'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding3'], self.conf['padding3'], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0], self.conf['padding4'], self.conf['padding4'], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_365": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4Inputpad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(upsample, paddings, 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv4_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_370": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv4Inputpad, self.conv4_weights, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.conv4_biases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_373": {
                "variable": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(lasts, [3])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv4, self.conv4_biases)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.conv4r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_378": {
                "variable": {
                    "value": "output1",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(up, self.conv4_weights, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, self.conv4r, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output1, [3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.targetDim1, self.targetDim2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_379": {
                "variable": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.image.resize_nearest_neighbor(last, (self.targetDim1, self.targetDim2), align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_412": {
                "name": {
                    "value": "segmentation_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_423": {
                "name": {
                    "value": "regularised_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_464": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.train.exponential_decay(self.lr, global_step, self.targetDim1, 0.99, staircase=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_490": {
                "value": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_94": {
                "shape": {
                    "value": "[self.conf['conv1'][0], self.conf['conv1'][1], self.num_channels, self.conf['conv1'][2]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "shape": {
                    "value": "[self.conf['conv1'][2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_100": {
                "shape": {
                    "value": "[self.conf['conv2'][0], self.conf['conv2'][1], self.conf['conv1'][2], self.conf['conv2'][2]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.conf['conv2'][2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_106": {
                "shape": {
                    "value": "[self.conf['conv3'][0], self.conf['conv3'][1], self.conf['conv2'][2], self.conf['conv3'][2]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.conf['conv3'][2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_113": {
                "shape": {
                    "value": "[self.conf['conv4'][0], self.conf['conv4'][1], self.conf['conv3'][2], self.conf['conv4'][2]]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_116": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.conf['conv4'][2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_123": {
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_128": {
                "shape": {
                    "value": "[4, 4, 16, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_132": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_292": {
                "value": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.train_data_node, self.conv1_weights, strides=[1, 1, 1, 1], padding=paddings)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.conv1_biases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_305": {
                "value": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv2Inputpad, self.conv2_weights, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.conv2_biases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_330": {
                "value": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv3Inputpad, self.conv3_weights, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.conv3_biases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_426": {
                "t": {
                    "value": "self.conv3_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_425": {
                "t": {
                    "value": "self.conv2_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train3.py": {
        "tensorflow": {
            "Session_72": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}