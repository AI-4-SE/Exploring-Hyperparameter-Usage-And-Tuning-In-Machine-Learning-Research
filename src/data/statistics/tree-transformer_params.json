{
    "beam_search.py": {
        "torch": {
            "full_24": {
                "size": {
                    "value": "(beam_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "trg_pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_pad_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_27": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_seq_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bert_optimizer.py": {
        "torch": {
            "zeros_like_242": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__251": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data_pre_process.py": {
        "torch": {
            "stack_137": {
                "variable": {
                    "value": "comments_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "comments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_txt(save_path + 'comments.txt', skip)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_296": {
                "variable": {
                    "value": "nl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_343": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_344": {
                "variable": {
                    "value": "parent_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, max_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_345": {
                "variable": {
                    "value": "brother_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, max_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "parent_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "brother_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[2])",
                            "Call"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ],
                        [
                            "max_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "relative_parent_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, max_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "relative_brother_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, max_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeDataSet('./data/tree/train/', max_size=100)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "ones_172": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeDataSet(self.args.train_data_set, self.args.code_max_len, skip=self.args.skip_num)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeDataSet(self.args.test_data_set, self.args.code_max_len, skip=7860)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "data_set_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeDataSet(self.args.valid_data_set, self.args.code_max_len, skip=7860)",
                            "Call"
                        ],
                        [
                            "TreeDataSet(self.args.test_data_set, self.args.code_max_len, skip=7860)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree_transformer_model.generator(out[:, -1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, torch.ones(1, 1).type_as(batch.code.data).fill_(next_word)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_231": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_244": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.data == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(1, V, size=(batch, 10))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "variable": {
                    "value": "parent_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test",
                            "variable"
                        ],
                        [
                            "data_batch",
                            "variable"
                        ],
                        [
                            "Batch(code, par_matrix, bro_matrix, rel_par_ids, rel_bro_ids, None)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_310": {
                "variable": {
                    "value": "brother_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test",
                            "variable"
                        ],
                        [
                            "data_batch",
                            "variable"
                        ],
                        [
                            "Batch(code, par_matrix, bro_matrix, rel_par_ids, rel_bro_ids, None)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "rel_par_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test",
                            "variable"
                        ],
                        [
                            "data_batch",
                            "variable"
                        ],
                        [
                            "Batch(code, par_matrix, bro_matrix, rel_par_ids, rel_bro_ids, None)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "rel_bro_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test",
                            "variable"
                        ],
                        [
                            "data_batch",
                            "variable"
                        ],
                        [
                            "Batch(code, par_matrix, bro_matrix, rel_par_ids, rel_bro_ids, None)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "data_set_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TreeDataSet(self.args.valid_data_set, self.args.code_max_len, skip=7860)",
                            "Call"
                        ],
                        [
                            "TreeDataSet(self.args.test_data_set, self.args.code_max_len, skip=7860)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_282": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_332": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': step, 'state_dict': self.model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.model_dir, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_106": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tree_transformer.py": {
        "torch": {
            "triu_338": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, dim_per_head).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "relative_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative.transpose(2, 3).view(-1, dim_per_head, node_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_25": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attention_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, dim_per_head).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attention + relative_mul(q, relative_q)",
                            "BinOp"
                        ],
                        [
                            "attention * scale",
                            "BinOp"
                        ],
                        [
                            "attention.masked_fill_(mask=attn_mask.byte(), value=-1000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attention)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(query, key, value, scale, attn_mask, relative_q, relative_v)",
                            "Call"
                        ],
                        [
                            "self.attention(inputs, inputs, inputs, attn_mask, relative_q, relative_v)",
                            "Call"
                        ],
                        [
                            "encoder(output, brother_matrix, brother_k_emb, brother_v_emb)",
                            "Call"
                        ],
                        [
                            "encoder(output, parent_matrix, parent_k_emb, parent_v_emb)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_per_head * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_per_head * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_per_head * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.linear_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_177": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_model, 2) * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_179": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_180": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_203": {
                "variable": {
                    "value": "self.parent_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * k + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_204": {
                "variable": {
                    "value": "self.brother_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * k + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_205": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_239": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ffn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_240": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ffn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_241": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_242": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(model_dim, num_heads, ffn_dim, dropout) for _ in range(num_layers * 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_293": {
                "variable": {
                    "value": "self.seq_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "voc_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "voc_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_429": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(model_dim, num_heads, ffn_dim, dropout) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_66": {
                "variable": {
                    "value": "context_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.view(-1, node_len).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "relative_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_v.view(-1, node_len, dim_per_head)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "context_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_338": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_433": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(pre_trained_path, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_437": {
                "variable": {
                    "value": "self.seq_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "model_dim",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_523": {
                "input": {
                    "value": "self.proj(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_178": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(file_path, dtype=np.long, skiprows=skip)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subsequent_mask",
                            "Call"
                        ],
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_23": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}