{
    "lib/core/function.py": {
        "torch": {
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/campus.py": {
        "torch": {
            "as_tensor_226": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco, 2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kpts, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_227": {
                "variable": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_228": {
                "variable": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_229": {
                "variable": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_230": {
                "variable": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/campus_synthetic.py": {
        "torch": {
            "as_tensor_216": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints, 2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kpts, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_217": {
                "variable": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_vis, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "pose_vis",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_218": {
                "variable": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_219": {
                "variable": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_220": {
                "variable": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/panoptic.py": {
        "torch": {
            "as_tensor_363": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_unified, 2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kpts, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_364": {
                "variable": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_365": {
                "variable": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_unified])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_366": {
                "variable": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_367": {
                "variable": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_unified])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/shelf.py": {
        "torch": {
            "as_tensor_226": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco, 2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kpts, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_227": {
                "variable": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_228": {
                "variable": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_229": {
                "variable": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_230": {
                "variable": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints_coco])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataset/shelf_synthetic.py": {
        "torch": {
            "as_tensor_216": {
                "variable": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kpts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints, 2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(kpts, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_217": {
                "variable": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_vis, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "pose_vis",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_218": {
                "variable": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_vis, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_219": {
                "variable": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pose_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_220": {
                "variable": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "joint_depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros([self.max_num_persons, self.num_joints])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(joint_depths, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/cnns.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(num_joints, hidden_size, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_13": {
                "variable": {
                    "value": "self.res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(num_joints, hidden_size, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, dilation=1, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=2, dilation=2, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=4, dilation=4, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=8, dilation=8, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=16, dilation=16, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=32, dilation=32, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True), nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, dilation=1, bias=False), nn.BatchNorm1d(hidden_size), nn.ReLU(inplace=True)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_9": {
                "in_channels": {
                    "value": "num_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_joints",
                            "Method Argument"
                        ],
                        [
                            "num_joints",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_10": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "in_channels": {
                    "value": "num_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_joints",
                            "Method Argument"
                        ],
                        [
                            "num_joints",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "nn.Conv1d(hidden_size, hidden_size, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_16": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_49": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_55": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_58": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/mvmppe.py": {
        "torch": {
            "sum_65": {
                "variable": {
                    "value": "poses_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pt - pr) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_75": {
                "variable": {
                    "value": "matched_poses_2d_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poses_2d_ref.unsqueeze(3).repeat(1, 1, 1, num_depth_levels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "min_matching.reshape(batch_size, num_persons, 1, num_depth_levels, 1).repeat(1, 1, num_joints, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_76": {
                "variable": {
                    "value": "matched_vis_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis_ref.reshape(batch_size, num_persons, num_joints, 1, 1).repeat(1, 1, 1, num_depth_levels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "min_matching.reshape(batch_size, num_persons, 1, num_depth_levels, 1).repeat(1, 1, num_joints, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "matching_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(poses_2d_target - matched_poses_2d_ref) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "bounding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.size()",
                            "Call"
                        ],
                        [
                            "kpts[0].size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_persons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.size()",
                            "Call"
                        ],
                        [
                            "kpts[0].size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.size()",
                            "Call"
                        ],
                        [
                            "kpts[0].size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_depth_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_135": {
                "variable": {
                    "value": "kpts_3d_all_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kpts_3d_all_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kpts_3d_all_depth, dim=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kpts_3d_all_depth, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "pose_depth_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_depth_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pose_cnn(pose_score_volume)",
                            "Call"
                        ],
                        [
                            "F.softmax(pose_depth_volume, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "kpts_3d_all_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "kpts_3d_all_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kpts_3d_all_depth, dim=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(kpts_3d_all_depth, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "joint_depth_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_depth_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.joint_cnn(joint_score_volume)",
                            "Call"
                        ],
                        [
                            "F.softmax(joint_depth_volume, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sqrt(matching_dist) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_86": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-matching_dist / sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_28": {
                "data": {
                    "value": "self.plabels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_29": {
                "data": {
                    "value": "self.jlabels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "vis_ref.reshape(batch_size, 1, num_persons, num_joints, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_161": {
                "data": {
                    "value": "np.arange(len(self.pose_depth_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.device",
                            "Attribute"
                        ],
                        [
                            "kpts_2d_target.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_206": {
                "data": {
                    "value": "np.arange(len(self.joint_relative_depth_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_3d.device",
                            "Attribute"
                        ],
                        [
                            "kpts_2d_target.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_215": {
                "input": {
                    "value": "pred_pose_depths * pose_vis[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_pose_depths * pose_vis[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_216": {
                "input": {
                    "value": "pred_joint_depths * joint_vis[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_joint_depths * joint_vis[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_215": {
                "input": {
                    "value": "pose_vis[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "joint_vis[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "input": {
                    "value": "matching_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((poses_2d_target - matched_poses_2d_ref) ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/softargmax.py": {
        "torch": {
            "gather_27": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * labels",
                            "BinOp"
                        ],
                        [
                            "F.avg_pool1d(y, kernel_size=kernel_size) * kernel_size",
                            "BinOp"
                        ],
                        [
                            "y / (x + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.argmax(dim=-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool1d_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool1d(x, kernel_size=kernel_size) * kernel_size",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size if kernel_size > 0 else x.size(-1)",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool1d_23": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * labels",
                            "BinOp"
                        ],
                        [
                            "F.avg_pool1d(y, kernel_size=kernel_size) * kernel_size",
                            "BinOp"
                        ],
                        [
                            "y / (x + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size if kernel_size > 0 else x.size(-1)",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/transforms.py": {
        "torch": {
            "as_tensor_6": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['R']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_7": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['T']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_8": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['fx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_9": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['fy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_10": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fx, fy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_10": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_11": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['cx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_12": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['cy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_13": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cx, cy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_14": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['k']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_15": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "camera['p']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "xcam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(camera['R'], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch_unfold_camera_param(camera, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch_unfold_camera_param(camera, device=y.device)",
                            "Call"
                        ],
                        [
                            "camera['R']",
                            "Subscript"
                        ],
                        [
                            "unfold_camera_param(camera)",
                            "Call"
                        ],
                        [
                            "unfold_camera_param(camera)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x - T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xcam ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "xcam",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "xcam",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xcam, torch.ones(batch_size, 1, xcam.size(-1)).to(xcam.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_99": {
                "input": {
                    "value": "torch.inverse(R)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "xcam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(R, x - T)",
                            "Call"
                        ],
                        [
                            "(y - c) / f",
                            "BinOp"
                        ],
                        [
                            "torch.stack([u, v], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([xcam, torch.ones(batch_size, 1, xcam.size(-1)).to(xcam.device)], dim=1)",
                            "Call"
                        ],
                        [
                            "xcam.reshape(batch_size, 3, num_persons, num_joints)",
                            "Call"
                        ],
                        [
                            "xcam * d",
                            "BinOp"
                        ],
                        [
                            "xcam.reshape(batch_size, 3, -1)",
                            "Call"
                        ],
                        [
                            "R.dot(x.T - T)",
                            "Call"
                        ],
                        [
                            "(y.T - c) / f",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([xcam, np.ones([1, n])], axis=0)",
                            "Call"
                        ],
                        [
                            "xcam * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xcam.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_99": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(camera['R'], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch_unfold_camera_param(camera, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch_unfold_camera_param(camera, device=y.device)",
                            "Call"
                        ],
                        [
                            "camera['R']",
                            "Subscript"
                        ],
                        [
                            "unfold_camera_param(camera)",
                            "Call"
                        ],
                        [
                            "unfold_camera_param(camera)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/utils.py": {
        "torch": {
            "load_47": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoint_{}.pth.tar'.format(time_str))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "states['state_dict']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'model_best_{}.pth.tar'.format(time_str))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run/train.py": {
        "torch": {
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.TRAIN.LR",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('dataset.' + config.DATASET.TRAIN_DATASET)(config, config.DATASET.TRAIN_SUBSET, True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TRAIN.BATCH_SIZE * len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.TRAIN.SHUFFLE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('dataset.' + config.DATASET.TEST_DATASET)(config, config.DATASET.TEST_SUBSET, False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TEST.BATCH_SIZE * len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.' + config.MODEL + '.get_model')(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus).to(gpus[0])",
                            "Call"
                        ],
                        [
                            "get_optimizer(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run/validate.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('dataset.' + config.DATASET.TEST_DATASET)(config, config.DATASET.TEST_SUBSET, False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.TEST.BATCH_SIZE * len(gpus)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.' + config.MODEL + '.get_model')(config)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus).to(gpus[0])",
                            "Call"
                        ],
                        [
                            "load_checkpoint(model, None, output_dir, filename='model_best_{}.pth.tar'.format(args.tag))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(i) for i in config.GPUS.split(',')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}