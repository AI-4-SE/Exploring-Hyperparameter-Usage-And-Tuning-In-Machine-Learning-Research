{
    "sourcecode/MSG_GAN/CustomLayers.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_out, c_in, *_pair(k_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_in, c_out, *_pair(k_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_out, c_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_207": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_261": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_271": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_334": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.pow(2.0).mean(dim=0, keepdim=False) + alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_384": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AvgPool2d_433": {
                "variable": {
                    "value": "self.downSampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_436": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_146": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_198": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_377": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_378": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_381": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_29": {
                "*size": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*_pair(k_size)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_80": {
                "*size": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*_pair(k_size)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_128": {
                "*size": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/MSG_GAN/GAN.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GenInitialBlock(self.latent_size, use_eql=self.use_eql)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.rgb_converters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[to_rgb(self.latent_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.rgb_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_part, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_273": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "36",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_399": {
                "variable": {
                    "value": "fixed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "36",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_part, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_226": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_234": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_349": {
                "variable": {
                    "value": "samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "samples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "power(2, self.depth - 1 - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_174": {
                "variable": {
                    "value": "self.layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "self.layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "self.rgb_to_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "self.rgb_to_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_233": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_429": {
                "variable": {
                    "value": "gan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "extracted_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_503": {
                "obj": {
                    "value": "self.gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_504": {
                "obj": {
                    "value": "self.dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_505": {
                "obj": {
                    "value": "gen_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_506": {
                "obj": {
                    "value": "dis_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_511": {
                "obj": {
                    "value": "self.gen_shadow.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_shadow_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_SHADOW_' + str(epoch) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_424": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.to(self.device)",
                            "Call"
                        ],
                        [
                            "[images] + [avg_pool2d(images, int(np.power(2, i))) for i in range(1, self.depth)]",
                            "BinOp"
                        ],
                        [
                            "list(reversed(images))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(np.power(2, i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/MSG_GAN/Losses.py": {
        "torch": {
            "BCEWithLogitsLoss_51": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_103": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "real_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid(self.dis(real_samps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "fake_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid(self.dis(fake_samps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid(self.dis(fake_samps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_68": {
                "*size": {
                    "value": "real_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_113": {
                "outputs": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "th.ones_like(op)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_141": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "input": {
                    "value": "self.dis(real_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_186": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_191": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_205": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_208": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_211": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_212": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_222": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_225": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_228": {
                "input": {
                    "value": "th.nn.ReLU()(1 + r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_229": {
                "input": {
                    "value": "th.nn.ReLU()(1 - f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_130": {
                "input": {
                    "value": "real_out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_114": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_153": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_156": {
                "input": {
                    "value": "self.dis(fake_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "self.dis(real_samps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/data_processing/DataLoader.py": {
        "torch": {
            "DataLoader_195": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/demo.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_points * args.transition_points",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_filter(all_latents.cpu(), [args.smoothing * args.transition_points, 0], mode='wrap')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "start_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_latents[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_96": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "input": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/downsampler.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(img_file)",
                            "Call"
                        ],
                        [
                            "np.array(Image.open(img_file))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0).transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(img).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_60": {
                "variable": {
                    "value": "ds_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "variable"
                        ],
                        [
                            "avg_pool2d(ds_img, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/generate_multi_scale_samples.py": {
        "torch": {
            "DataParallel_101": {
                "variable": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_73": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "images[len(images) - 1 - factor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "images[len(images) - 1 - factor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "pow(2, factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_119": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/generate_samples.py": {
        "torch": {
            "DataParallel_97": {
                "variable": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "images[len(images) - 1 - factor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "images[len(images) - 1 - factor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "pow(2, factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_105": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/latent_space_interpolation.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_104": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.time * args.fps)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.randn(total_frames, args.latent_size).to(device)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(all_latents.cpu(), [args.smoothing * args.fps, 0])",
                            "Call"
                        ],
                        [
                            "th.from_numpy(all_latents)",
                            "Call"
                        ],
                        [
                            "all_latents / all_latents.norm(dim=-1, keepdim=True) * sqrt(args.latent_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_63": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(all_latents)",
                            "Call"
                        ],
                        [
                            "th.unsqueeze(latent, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sourcecode/train.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "gen_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "msg_gan.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[args.adam_beta1, args.adam_beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "dis_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "msg_gan.dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[args.adam_beta1, args.adam_beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_195": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "f": {
                    "value": "args.shadow_generator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_210": {
                "f": {
                    "value": "args.discriminator_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_224": {
                "f": {
                    "value": "args.generator_optim_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_228": {
                "f": {
                    "value": "args.discriminator_optim_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}