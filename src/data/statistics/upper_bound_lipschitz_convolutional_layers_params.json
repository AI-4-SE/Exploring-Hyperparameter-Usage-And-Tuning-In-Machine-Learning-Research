{
    "lipschitz_bound/lipschitz_bound.py": {
        "torch": {
            "mul_120": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_120": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_121": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_121": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "sv_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poly.max(axis=-1)[0].sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_136": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_136": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_137": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_137": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_141": {
                "variable": {
                    "value": "sv_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poly.max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "poly1",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ijk->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_164": {
                "variable": {
                    "value": "poly2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ijk->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_166": {
                "variable": {
                    "value": "sv_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poly.max(axis=-1)[0].sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ],
                        [
                            "real.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(self.w0 * H0 + self.w1 * H1).T",
                            "Attribute"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ],
                        [
                            "imag.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_185": {
                "variable": {
                    "value": "poly1",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ijk->k",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_186": {
                "variable": {
                    "value": "poly2",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ijk->k",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_188": {
                "variable": {
                    "value": "sv_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poly.max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(kernel, axes=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "np.transpose(kernel, axes=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(kernel, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(kernel, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_151": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(kernel, axes=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "np.transpose(kernel, axes=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "torch.transpose(kernel, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(kernel, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_122": {
                "input": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_123": {
                "input": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_138": {
                "input": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "poly_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, real).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, real).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_139": {
                "input": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "poly_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.mul(ker, imag).sum(axis=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ker, imag).view(cout, cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "input": {
                    "value": "torch.einsum('i,i->', ker, ker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "input": {
                    "value": "torch.einsum('i,i->', ker, ker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_156": {
                "equation": {
                    "value": "i,i->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_178": {
                "equation": {
                    "value": "i,i->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.reshape(cout, cin, -1)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.view(cout, cin, -1, 1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(-1)",
                            "Call"
                        ],
                        [
                            "kernel.reshape(cout * cin, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_58": {
                "start": {
                    "value": "-ksize + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cos_64": {
                "input": {
                    "value": "self.w0 * H0 + self.w1 * H1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_65": {
                "input": {
                    "value": "self.w0 * H0 + self.w1 * H1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_block_matrices_op.py": {
        "torch": {
            "Conv2d_58": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.kernel_size, self.kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_lipschitz_bound.py": {
        "torch": {}
    }
}