{
    "datasets.py": {
        "torch": {}
    },
    "engine.py": {
        "torch": {
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gfnet.py": {
        "torch": {
            "interpolate_407": {
                "variable": {
                    "value": "posemb_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posemb_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "posemb[0, 1:]",
                            "Subscript"
                        ],
                        [
                            "posemb[0]",
                            "Subscript"
                        ],
                        [
                            "posemb_grid.reshape(1, gs_old, gs_old, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(posemb_grid, size=(gs_new, gs_new), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "posemb_grid.permute(0, 2, 3, 1).reshape(1, gs_new * gs_new, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(gs_new, gs_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "posemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[posemb_tok, posemb_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.complex_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(h, w, dim, 2, dtype=torch.float32) * 0.02",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rfft2_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, a, b, C)",
                            "Call"
                        ],
                        [
                            "x.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.fft.rfft2(x, dim=(1, 2), norm='ortho')",
                            "Call"
                        ],
                        [
                            "x * weight",
                            "BinOp"
                        ],
                        [
                            "torch.fft.irfft2(x, s=(a, b), dim=(1, 2), norm='ortho')",
                            "Call"
                        ],
                        [
                            "x.reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(self.filter(self.norm1(x)))))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma * self.mlp(self.norm2(self.filter(self.norm1(x)))))",
                            "BinOp"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(B, self.img_size, self.img_size, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.proj(x).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, -1, self.dim_out)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x).mean(1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed[i](x)",
                            "Call"
                        ],
                        [
                            "self.norm(x).mean(1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                }
            },
            "view_as_complex_68": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.complex_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "irfft2_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, a, b, C)",
                            "Call"
                        ],
                        [
                            "x.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.fft.rfft2(x, dim=(1, 2), norm='ortho')",
                            "Call"
                        ],
                        [
                            "x * weight",
                            "BinOp"
                        ],
                        [
                            "torch.fft.irfft2(x, s=(a, b), dim=(1, 2), norm='ortho')",
                            "Call"
                        ],
                        [
                            "x.reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(self.filter(self.norm1(x)))))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma * self.mlp(self.norm2(self.filter(self.norm1(x)))))",
                            "BinOp"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(B, self.img_size, self.img_size, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.proj(x).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, -1, self.dim_out)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x).mean(1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed[i](x)",
                            "Call"
                        ],
                        [
                            "self.norm(x).mean(1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.blocks[i](x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "s": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_184": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dim, mlp_ratio=mlp_ratio, drop=drop_rate, drop_path=dpr[i], norm_layer=norm_layer, h=h, w=w) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_300": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_315": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_345": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc', nn.Linear(embed_dim, representation_size)), ('act', nn.Tanh())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_213": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropcls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_222": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_349": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropcls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_351": {
                "variable": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size[1] // patch_size[1] * (img_size[0] // patch_size[0])",
                            "BinOp"
                        ],
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ],
                        [
                            "patch_embed.num_patches",
                            "Attribute"
                        ],
                        [
                            "patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_300": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size[1] // patch_size[1] * (img_size[0] // patch_size[0])",
                            "BinOp"
                        ],
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ],
                        [
                            "patch_embed.num_patches",
                            "Attribute"
                        ],
                        [
                            "patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "blk",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block(dim=embed_dim[i], mlp_ratio=mlp_ratio[i], drop=drop_rate, drop_path=dpr[cur + j], norm_layer=norm_layer, h=h, w=w) for j in range(depth[i])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "blk",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[BlockLayerScale(dim=embed_dim[i], mlp_ratio=mlp_ratio[i], drop=drop_rate, drop_path=dpr[cur + j], norm_layer=norm_layer, h=h, w=w, init_values=init_values) for j in range(depth[i])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_52": {
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size // patch_size",
                            "BinOp"
                        ],
                        [
                            "sizes[i]",
                            "Subscript"
                        ],
                        [
                            "14",
                            "Method Argument"
                        ],
                        [
                            "14",
                            "Method Argument"
                        ],
                        [
                            "14",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h // 2 + 1",
                            "BinOp"
                        ],
                        [
                            "h // 2 + 1",
                            "BinOp"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_102": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_317": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_194": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "infer.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_65": {
                "variable": {
                    "value": "distillation_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_kd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "target": {
                    "value": "teacher_outputs.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_58": {
                "input": {
                    "value": "F.log_softmax(outputs_kd / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(teacher_outputs / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "input": {
                    "value": "outputs_kd / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main_gfnet.py": {
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_224": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_213": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_214": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_329": {
                "variable": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed_checkpoint[:, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "pos_tokens.reshape(-1, orig_size, orig_size, embedding_size).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(pos_tokens, size=(new_size, new_size), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "pos_tokens.permute(0, 2, 3, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_size, new_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_359": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=384, depth=12, mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=256, depth=12, mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=384, depth=19, mlp_ratio=4, drop_path_rate=0.15, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=512, depth=19, mlp_ratio=4, drop_path_rate=0.25, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[64, 128, 256, 512], depth=[3, 3, 10, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.1)",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[96, 192, 384, 768], depth=[3, 3, 10, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.2, init_values=1e-05)",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[96, 192, 384, 768], depth=[3, 3, 27, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.4, init_values=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_200": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_208": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_211": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_298": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_379": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_395": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_413": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_341": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "origin_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_model[name]",
                            "Subscript"
                        ],
                        [
                            "origin_weight.reshape(1, h, w, num_heads * 2).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(upsample_h, upsample_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_341": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsample_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h * new_size // orig_size",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "upsample_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_h // 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main_gfnet_transfer.py": {
        "torch": {
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ],
                        [
                            "RASampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_train, num_replicas=num_tasks, rank=global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DistributedSampler(dataset_val, num_replicas=num_tasks, rank=global_rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(1.5 * args.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "args.pin_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RandomSampler_214": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_215": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_323": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=384, depth=12, mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=256, depth=12, mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=384, depth=19, mlp_ratio=4, drop_path_rate=0.15, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "GFNet(img_size=args.input_size, patch_size=16, embed_dim=512, depth=19, mlp_ratio=4, drop_path_rate=0.25, norm_layer=partial(nn.LayerNorm, eps=1e-06))",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[64, 128, 256, 512], depth=[3, 3, 10, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.1)",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[96, 192, 384, 768], depth=[3, 3, 10, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.2, init_values=1e-05)",
                            "Call"
                        ],
                        [
                            "GFNetPyramid(img_size=args.input_size, patch_size=4, embed_dim=[96, 192, 384, 768], depth=[3, 3, 27, 3], mlp_ratio=[4, 4, 4, 4], norm_layer=partial(nn.LayerNorm, eps=1e-06), drop_path_rate=0.4, init_values=1e-06)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_201": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=True, args=args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_209": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_world_size()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "global_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_rank()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_212": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(is_train=False, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_299": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.finetune",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_343": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_359": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_378": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "samplers.py": {
        "torch": {
            "Generator_37": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "mem_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_231": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_245": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_252": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}