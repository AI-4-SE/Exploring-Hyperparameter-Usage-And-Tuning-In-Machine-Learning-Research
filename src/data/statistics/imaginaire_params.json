{
    "imaginaire/model_utils/pix2pixHD.py": {
        "sklearn": {
            "KMeans_65": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(cfg.gen.enc, 'num_clusters', 10)",
                            "Call"
                        ],
                        [
                            "min(feat.shape[0], n_clusters)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_105": {
                "variable": {
                    "value": "all_feat_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_map_gather",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_all_gather_tensor(feat_map)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "all_inst_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inst_gathered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_all_gather_tensor(inst)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "this_cluster[0:n, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/datasets/base.py": {
        "torch": {
            "from_numpy_468": {
                "ndarray": {
                    "value": "np.array(data, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_489": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "op(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/datasets/dummy.py": {
        "torch": {}
    },
    "imaginaire/datasets/folder.py": {
        "torch": {}
    },
    "imaginaire/datasets/lmdb.py": {
        "torch": {}
    },
    "imaginaire/datasets/object_store.py": {
        "torch": {}
    },
    "imaginaire/datasets/paired_few_shot_videos.py": {
        "torch": {
            "cat_262": {
                "variable": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/datasets/paired_few_shot_videos_native.py": {
        "torch": {
            "cat_210": {
                "variable": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/datasets/paired_videos.py": {
        "torch": {
            "cat_269": {
                "variable": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[data_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/dummy.py": {
        "torch": {}
    },
    "imaginaire/discriminators/fpse.py": {
        "torch": {
            "Upsample_74": {
                "variable": {
                    "value": "self.upsample2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_119": {
                "variable": {
                    "value": "segembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segembs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(segmaps)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segembs, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_120": {
                "variable": {
                    "value": "segembs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segembs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embedding(segmaps)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(segembs, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "segembs3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segembs2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segembs, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_122": {
                "variable": {
                    "value": "segembs4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segembs3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segembs2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_125": {
                "input": {
                    "value": "segembs2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segembs, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.seg(feat32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_125": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_126": {
                "input": {
                    "value": "segembs3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segembs2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.seg(feat33)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_126": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_127": {
                "input": {
                    "value": "segembs4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(segembs3, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "seg4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.seg(feat34)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_127": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/fs_vid2vid.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label, ref_label, ref_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "real_AB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_A, real_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "fake_AB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_A, fake_B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "[all_frames.detach(), frame]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_312": {
                "variable": {
                    "value": "input_downsampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_downsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "F.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True, recompute_scale_factor=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "real_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_crop, ref_crop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "fake_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_crop, ref_crop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/funit.py": {
        "torch": {
            "Sequential_93": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "119",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_filters * 2, max_num_filters)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_115": {
                "input": {
                    "value": "embeddings * features_1x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_91": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/gancraft.py": {
        "torch": {
            "Upsample_195": {
                "variable": {
                    "value": "self.upsample2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_225": {
                "variable": {
                    "value": "onehot_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=size, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "fake_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[fake_images.size(0), 2, fake_images.size(2), fake_images.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "fake_images.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake_images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "real_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[real_images.size(0), 2, real_images.size(2), real_images.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "real_images.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real_images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "preal_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[preal_images.size(0), 2, preal_images.size(2), preal_images.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "preal_images.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "preal_images.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_265": {
                "variable": {
                    "value": "label_map3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[pred3.size(0), 1, pred3.size(2), pred3.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pred3.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_266": {
                "variable": {
                    "value": "label_map4",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[pred4.size(0), 1, pred4.size(2), pred4.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pred4.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/mlp_multiclass.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "dropout_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "dropout_ratio * 1.5",
                            "BinOp"
                        ],
                        [
                            "np.min([dropout_ratio, 0.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "dropout_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "dropout_ratio * 1.5",
                            "BinOp"
                        ],
                        [
                            "np.min([dropout_ratio, 0.5])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/discriminators/multires_patch.py": {
        "torch": {
            "ModuleList_133": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "fake_input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['label'], net_G_output['fake_images'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_169": {
                "variable": {
                    "value": "input_downsampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_downsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True, recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_238": {
                "variable": {
                    "value": "input_downsampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_downsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True, recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "real_input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data['label'], data['images'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "*args": {
                    "value": "*layers[n]",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/munit.py": {
        "torch": {}
    },
    "imaginaire/discriminators/residual.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(num_filters * 2, max_num_filters)",
                            "Call"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_72": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/spade.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_label, input_image)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "input_downsampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_downsampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_x",
                            "Name"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/discriminators/unit.py": {
        "torch": {}
    },
    "imaginaire/evaluation/caption/clip.py": {
        "torch": {
            "load_105": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_121": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(spacial_dim ** 2 + 1, embed_dim) / embed_dim ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim or embed_dim",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.mean(dim=0, keepdim=True), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_218": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_222": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiheadAttention_283": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "n_head",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('c_fc', nn.Linear(d_model, d_model * 4)), ('gelu', QuickGELU()), ('c_proj', nn.Linear(d_model * 4, d_model))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.resblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ResidualAttentionBlock(width, heads, attn_mask) for _ in range(layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "self.class_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn(width)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn((input_resolution // patch_size) ** 2 + 1, width)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_339": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale * torch.randn(width, output_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.class_embedding.to(x.dtype) + torch.zeros(x.shape[0], 1, x.shape[-1], dtype=x.dtype, device=x.device), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_411": {
                "variable": {
                    "value": "self.token_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['token_embedding.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "transformer_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['ln_final.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_412": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(self.context_length, transformer_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_416": {
                "variable": {
                    "value": "self.text_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(transformer_width, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_418": {
                "variable": {
                    "value": "self.logit_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([]) * np.log(1 / 0.07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_457": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.context_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.context_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('-1', nn.AvgPool2d(stride)), ('0', nn.Conv2d(inplanes, planes * self.expansion, 1, stride=1, bias=False)), ('1', nn.BatchNorm2d(planes * self.expansion))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_413": {
                "*size": {
                    "value": "self.context_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "transformer_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['ln_final.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_417": {
                "*size": {
                    "value": "transformer_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['ln_final.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_162": {
                "*size": {
                    "value": "spacial_dim ** 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_dict['text_projection'].shape[1]",
                            "Subscript"
                        ],
                        [
                            "width * 32",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "[self.q_proj.bias, self.k_proj.bias, self.v_proj.bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_330": {
                "*size": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_332": {
                "*size": {
                    "value": "(input_resolution // patch_size) ** 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_339": {
                "*size": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_418": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_481": {
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "d_model * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_135": {
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/caption/common.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(torch.hub.get_dir(), 'checkpoints', 'ViT-B-32.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.48145466, 0.4578275, 0.40821073]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.26862954, 0.26130258, 0.27577711]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (1 + fake_images)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(images, (self.image_size, self.image_size), mode='bicubic', align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "(images - self.mean[None, :, None, None]) / self.std[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.image_size, self.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(image_code, data['captions-clip'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/caption/r_precision.py": {
        "torch": {
            "chunk_12": {
                "variable": {
                    "value": "(all_image_code, all_text_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "image_text_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_20": {
                "variable": {
                    "value": "cur_image_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_image_code",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_image_code[i:i + 100]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(cur_image_code, dim=1, eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_21": {
                "variable": {
                    "value": "cur_text_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_text_code",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_text_code[i:i + 100]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(cur_text_code, dim=1, eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_24": {
                "variable": {
                    "value": "P_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top1_indices == torch.arange(100, device=top1_indices.device)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "topk_23": {
                "input": {
                    "value": "cosine_similarities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cur_image_code @ cur_text_code.T",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "top1_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/common.py": {
        "torch": {
            "ModuleDict_78": {
                "variable": {
                    "value": "output_module_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_190": {
                "variable": {
                    "value": "output_module_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_322": {
                "tensors": {
                    "value": "batch_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_all_gather_tensor(torch.cat(batch_y)))",
                            "Call"
                        ],
                        [
                            "batch_y[:sample_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "batch_y + [y]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "resized_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_batch.size(0)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_samples / num_splits)",
                            "Call"
                        ],
                        [
                            "math.ceil(num_samples / num_splits)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "299",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_all_gather_tensor(torch.cat(batch_y)))",
                            "Call"
                        ],
                        [
                            "batch_y[:sample_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "batch_y + [y]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_528": {
                "variable": {
                    "value": "inception.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_535": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data[key_real]",
                            "Subscript"
                        ],
                        [
                            "net_G_output[key_fake]",
                            "Subscript"
                        ],
                        [
                            "data[key_real]",
                            "Subscript"
                        ],
                        [
                            "net_G_output[key_fake]",
                            "Subscript"
                        ],
                        [
                            "data[key_real][:, -1]",
                            "Subscript"
                        ],
                        [
                            "net_G_output[key_fake]",
                            "Subscript"
                        ],
                        [
                            "apply_imagenet_normalization(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(images, size=(299, 299), mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_541": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_all_gather_tensor(torch.cat(batch_y)))",
                            "Call"
                        ],
                        [
                            "batch_y[:sample_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "batch_y + [y]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_631": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dists, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_initialized_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "resized_batch[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img_resize.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleDict_377": {
                "variable": {
                    "value": "output_module_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_all_gather_tensor(torch.cat(batch_y)))",
                            "Call"
                        ],
                        [
                            "batch_y[:sample_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "batch_y + [y]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_544": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_all_gather_tensor(torch.cat(batch_y)))",
                            "Call"
                        ],
                        [
                            "batch_y[:sample_size]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "batch_y + [y]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ],
                        [
                            "dist_all_gather_tensor(batch_y)",
                            "Call"
                        ],
                        [
                            "torch.cat(batch_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_590": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "act_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(act_dir, 'activations_real.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cdist_643": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "input_features[start_idx:end_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_648": {
                "variable": {
                    "value": "(k_smallests, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cdist(input_features[start_idx:end_idx], input_features)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_module_dict.keys()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_initialized_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_337": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255 * (0.5 * img_batch + 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_initialized_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_645": {
                "input": {
                    "value": "float('inf') * torch.ones(dist.size(0), device=dist.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_651": {
                "tensors": {
                    "value": "all_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_607": {
                "obj": {
                    "value": "act",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(act_path, map_location='cpu').cuda()",
                            "Call"
                        ],
                        [
                            "get_video_activations(data_loader, key_real, key_fake, generator, sample_size, preprocess, few_shot_video, **kwargs)",
                            "Call"
                        ],
                        [
                            "get_activations(data_loader, key_real, key_fake, generator, sample_size, preprocess, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "act_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(act_dir, 'activations_real.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "cdist_629": {
                "x1": {
                    "value": "data_x[start_idx:end_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "data_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_113": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_228": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_443": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_646": {
                "*size": {
                    "value": "dist.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/fid.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/kid.py": {
        "torch": {
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "codes_g",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "Y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_248": {
                "variable": {
                    "value": "diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_polynomial_kernel(X, degree=degree, gamma=gamma, coef0=coef0)",
                            "Call"
                        ]
                    ]
                }
            },
            "diagonal_249": {
                "variable": {
                    "value": "diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_polynomial_kernel(Y, degree=degree, gamma=gamma, coef0=coef0)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_276": {
                "input": {
                    "value": "K_XY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_polynomial_kernel(X, Y, degree=degree, gamma=gamma, coef0=coef0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/evaluation/knn.py": {
        "torch": {
            "cat_14": {
                "variable": {
                    "value": "data_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_x, data_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(n0, device=device), torch.zeros(n1, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ge_22": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(n0 + n1, device=device)",
                            "Call"
                        ],
                        [
                            "count + label.index_select(0, idx[:, i])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "float(k) / 2 * torch.ones(n0 + n1, device=device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_31": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(n0, device=device), torch.zeros(n1, device=device)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ge(count, float(k) / 2 * torch.ones(n0 + n1, device=device)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_31": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "n0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "n1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_x.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/evaluation/lpips.py": {
        "torch": {
            "sqrt_31": {
                "variable": {
                    "value": "norm_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[NetLinLayer(dims[i]) for i in range(self.L)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "variable": {
                    "value": "self.lins[i].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "weights['lin%d.model.1.weight' % i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_74": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "(g_feat - features_another[i]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/msid.py": {
        "torch": {
            "cat_361": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_358": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "input_features[start_idx:end_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_364": {
                "n": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "graph.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_360": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-2 * np.dot(data, data.T)",
                            "BinOp"
                        ],
                        [
                            "dist + (dd + dd[:, np.newaxis])",
                            "BinOp"
                        ],
                        [
                            "torch.cdist(input_features[start_idx:end_idx], input_features)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/prdc.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_75": {
                "variable": {
                    "value": "k_smallests",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unsorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.topk(unsorted, k, dim=dim, largest=False)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_74": {
                "input": {
                    "value": "unsorted",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "input": {
                    "value": "real_nearest_neighbour_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_nearest_neighbour_distances.max(dim=-1)[0].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_109": {
                "input": {
                    "value": "fake_nearest_neighbour_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_nearest_neighbour_distances.max(dim=-1)[0].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "input": {
                    "value": "real_nearest_neighbour_distances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_nearest_neighbour_distances.max(dim=-1)[0].cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/pretrained.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "facebookresearch/swav",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnet50",
                    "type": "Constant",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.model.classifier[i] for i in range(4)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_129": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_192": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_228": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_62": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_106": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/evaluation/segmentation/celebamask_hq.py": {
        "torch": {
            "MaxPool2d_36": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_63": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(images, size=(self.image_size, self.image_size), mode='bicubic', align_corners=align_corners)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.image_size, self.image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_82": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.final(up1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "outputs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_size, out_size, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_122": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/segmentation/cocostuff.py": {
        "torch": {
            "interpolate_32": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(images, scale_factor=scale, mode='bilinear', align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "255 * 0.5 * (images + 1)",
                            "BinOp"
                        ],
                        [
                            "images.flip(1)",
                            "Call"
                        ],
                        [
                            "images - self.mean[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image_size / max(images.shape[2:])",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=align_corners)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(images)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=align_corners)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/evaluation/segmentation/common.py": {
        "torch": {
            "interpolate_74": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "all_hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_hist)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_35": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(torch.hub.get_dir(), 'checkpoints'), 'celebamask_hq.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_not_78": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_gt == ignore_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "bincount_80": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "merge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cur_pred[keep] * n_classes + cur_gt[keep]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "n_classes ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_initialized_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_89": {
                "input": {
                    "value": "hist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bincount(merge, minlength=n_classes ** 2)",
                            "Call"
                        ],
                        [
                            "hist.view((n_classes, n_classes))",
                            "Call"
                        ],
                        [
                            "hist.sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_91": {
                "input": {
                    "value": "IOUs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.diag(hist) / (torch.sum(hist, dim=0, keepdim=False) + torch.sum(hist, dim=1, keepdim=False) - torch.diag(hist) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_90": {
                "input": {
                    "value": "hist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bincount(merge, minlength=n_classes ** 2)",
                            "Call"
                        ],
                        [
                            "hist.view((n_classes, n_classes))",
                            "Call"
                        ],
                        [
                            "hist.sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_90": {
                "input": {
                    "value": "hist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bincount(merge, minlength=n_classes ** 2)",
                            "Call"
                        ],
                        [
                            "hist.view((n_classes, n_classes))",
                            "Call"
                        ],
                        [
                            "hist.sum(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/coco_funit.py": {
        "torch": {
            "Parameter_131": {
                "variable": {
                    "value": "self.usb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, usb_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "output_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.generator.decode(content_a, style_b)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(output_images, size=[height, width])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_131": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "usb_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "[style, usb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/dummy.py": {
        "torch": {}
    },
    "imaginaire/generators/fs_vid2vid.py": {
        "torch": {
            "tanh_190": {
                "variable": {
                    "value": "img_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_img(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_951": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_features.view(b, k, c, h * w).permute(0, 2, 1, 3).contiguous().view(b, c, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=1)(energy)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_1041": {
                "variable": {
                    "value": "self.down_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1042": {
                "variable": {
                    "value": "self.res_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1043": {
                "variable": {
                    "value": "self.up_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*up_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1046": {
                "variable": {
                    "value": "self.conv_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1047": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_mask",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1061": {
                "variable": {
                    "value": "label_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label, ref_label, ref_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_187": {
                "variable": {
                    "value": "img_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_img(x_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "cond_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_warp[0], occ_mask[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "cond_inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_warp[1], occ_mask[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_638": {
                "variable": {
                    "value": "concat_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ref_image, ref_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_944": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atn_key",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_encode(ref_label, 'atn_key')",
                            "Call"
                        ],
                        [
                            "atn_key.view(b, k, c, -1).permute(0, 1, 3, 2).contiguous().view(b, -1, c)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atn_query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attention_encode(label, 'atn_query')",
                            "Call"
                        ],
                        [
                            "atn_query.view(b, c, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_1045": {
                "variable": {
                    "value": "self.up_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*copy.deepcopy(up_flow)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_1118": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_663": {
                "variable": {
                    "value": "ref_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atn_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "atn.view(label.shape[0], k, -1).sum(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1163": {
                "variable": {
                    "value": "input_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_i, output[i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_711": {
                "output_size": {
                    "value": "(self.sh_fix, self.sw_fix)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_763": {
                "output_size": {
                    "value": "(self.sh_fix, self.sw_fix)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_945": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_1033": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_686": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_535": {
                "*args": {
                    "value": "*fc_layer",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/funit.py": {
        "torch": {
            "ModuleList_218": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_347": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "output_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.generator.decode(content_a, style_b)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(output_images, size=[height, width])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_289": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_filters * 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "style_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/gancraft.py": {
        "torch": {
            "empty_44": {
                "variable": {
                    "value": "blk_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.voxel.nfilledvox, gen_cfg.blk_feat_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.blk_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "blk_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty([self.voxel.nfilledvox, gen_cfg.blk_feat_dim], requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_256": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_323": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_415": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Generator_416": {
                "variable": {
                    "value": "rng_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "voxel_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "voxel_t.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "voxel_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "voxel_id_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "depth2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depth2_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "raydirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "raydirs_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "cam_ori_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cam_ori_t_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "fake_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[coco_mask.size(0), 185, coco_mask.size(2), coco_mask.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_227": {
                "variable": {
                    "value": "nan_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_real_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pseudo_gen(fake_masks_512, z=z, style_img=style_img)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pseudo_real_img, size=[fake_masks.size(2), fake_masks.size(3)], mode='area')",
                            "Call"
                        ],
                        [
                            "torch.clamp(pseudo_real_img, -1, 1)",
                            "Call"
                        ],
                        [
                            "data['pseudo_real_img']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isinf_228": {
                "variable": {
                    "value": "inf_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_real_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pseudo_gen(fake_masks_512, z=z, style_img=style_img)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pseudo_real_img, size=[fake_masks.size(2), fake_masks.size(3)], mode='area')",
                            "Call"
                        ],
                        [
                            "torch.clamp(pseudo_real_img, -1, 1)",
                            "Call"
                        ],
                        [
                            "data['pseudo_real_img']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_233": {
                "variable": {
                    "value": "pseudo_real_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_real_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pseudo_gen(fake_masks_512, z=z, style_img=style_img)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pseudo_real_img, size=[fake_masks.size(2), fake_masks.size(3)], mode='area')",
                            "Call"
                        ],
                        [
                            "torch.clamp(pseudo_real_img, -1, 1)",
                            "Call"
                        ],
                        [
                            "data['pseudo_real_img']",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "reduce_fake_mask_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[reduce_fake_mask.size(0), self.num_reduced_labels, reduce_fake_mask.size(2), reduce_fake_mask.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_284": {
                "variable": {
                    "value": "real_masks_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label']",
                            "Subscript"
                        ],
                        [
                            "reduced_real_mask_onehot",
                            "Name"
                        ],
                        [
                            "mc_utils.segmask_smooth(real_masks, kernel_size=self.label_smooth_dia)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "reduced_real_mask_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[reduced_real_mask.size(0), self.num_reduced_labels, reduced_real_mask.size(2), reduced_real_mask.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_410": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "((img * 0.5 + 0.5) * 255).detach().cpu().numpy().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img[0].transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "img[..., [2, 1, 0]]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(path).astype(np.float32)[..., [2, 1, 0]].transpose(2, 0, 1) / 255",
                            "BinOp"
                        ],
                        [
                            "img * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_418": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_419": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_445": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_473": {
                "variable": {
                    "value": "fip_local_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_intersection_point",
                    "type": "Name",
                    "possible_values": [
                        [
                            "raydirs * first_intersection_depth + cam_ori_t[:, None, None, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_474": {
                "variable": {
                    "value": "fip_wall_proximity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fip_local_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.remainder(first_intersection_point, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 - fip_local_coords",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_475": {
                "variable": {
                    "value": "fip_wall_orientation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fip_wall_proximity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.minimum(fip_local_coords, 1.0 - fip_local_coords)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "variable": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "fip_wall_orientation.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_480": {
                "variable": {
                    "value": "diffuse_shade",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(fip_normal * raydirs, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "fake_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake_images_chunks_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_199": {
                "variable": {
                    "value": "dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_204": {
                "variable": {
                    "value": "dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_221": {
                "variable": {
                    "value": "fake_masks_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([coco_mask.size(0), 185, coco_mask.size(2), coco_mask.size(3)], dtype=torch.half, device=voxel_id.device)",
                            "Call"
                        ],
                        [
                            "mc_utils.segmask_smooth(fake_masks, kernel_size=self.label_smooth_dia)",
                            "Call"
                        ],
                        [
                            "fake_masks[:, :, self.pad // 2:-self.pad // 2, self.pad // 2:-self.pad // 2]",
                            "Subscript"
                        ],
                        [
                            "reduce_fake_mask_onehot",
                            "Name"
                        ],
                        [
                            "fake_masks[:, :, self.pad // 2:-self.pad // 2, self.pad // 2:-self.pad // 2]",
                            "Subscript"
                        ],
                        [
                            "mc_utils.segmask_smooth(fake_masks, kernel_size=self.label_smooth_dia)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_231": {
                "variable": {
                    "value": "pseudo_real_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_real_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pseudo_gen(fake_masks_512, z=z, style_img=style_img)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pseudo_real_img, size=[fake_masks.size(2), fake_masks.size(3)], mode='area')",
                            "Call"
                        ],
                        [
                            "torch.clamp(pseudo_real_img, -1, 1)",
                            "Call"
                        ],
                        [
                            "data['pseudo_real_img']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "[fake_masks.size(2), fake_masks.size(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_335": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data['images'].size(0)",
                            "Call"
                        ],
                        [
                            "data['images'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_501": {
                "variable": {
                    "value": "sky_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skynet_out_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sky_net(sky_raydirs_in, z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_530": {
                "variable": {
                    "value": "fake_images_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fake_images_chunks_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_340": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data['images'].size(0)",
                            "Call"
                        ],
                        [
                            "data['images'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_480": {
                "input": {
                    "value": "fip_normal * raydirs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_154": {
                "variable": {
                    "value": "avg_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_map[~torch.isnan(depth_map)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_111": {
                "variable": {
                    "value": "dice",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bincount_161": {
                "input": {
                    "value": "torch.flatten(voxel_id[:, :, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "minlength": {
                    "value": "680",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "maskcnt * torch.log(maskcnt + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_154": {
                "input": {
                    "value": "depth_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "depth2[0, :, :, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_164": {
                "input": {
                    "value": "maskcnt + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_162": {
                "input": {
                    "value": "voxel_id[:, :, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/gancraft_base.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc_out_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels_c",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_53": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc_z_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc_out_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels_c",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.fc_z_cond",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 2 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_210": {
                "variable": {
                    "value": "adapt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z[:, None, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(z, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(fc_layer(z))",
                            "Call"
                        ],
                        [
                            "self.fc_out(z)",
                            "Call"
                        ],
                        [
                            "self.act(z)",
                            "Call"
                        ],
                        [
                            "self.fc_z_a(z)",
                            "Call"
                        ],
                        [
                            "z.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.fc_z_cond(z)",
                            "Call"
                        ],
                        [
                            "eps.mul(std) + mu",
                            "BinOp"
                        ],
                        [
                            "mu",
                            "Name"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_533": {
                "variable": {
                    "value": "total_weights_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mc_utils.volum_rendering_relu(net_out_s, new_dists * self.dists_scale, dim=-2)",
                            "Call"
                        ],
                        [
                            "weights * torch.logical_not(sky_only_mask).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_or_538": {
                "variable": {
                    "value": "nosky_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_not(sky_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "is_gnd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "worldcoord2[..., [0]] <= 1.0",
                            "Compare"
                        ],
                        [
                            "is_gnd.any(dim=-2, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_601": {
                "variable": {
                    "value": "fake_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_images_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.denoiser(fake_images, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc_m_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mask_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "680",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_viewdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "viewdir_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_120": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z[:, None, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(z, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.act(fc_layer(z))",
                            "Call"
                        ],
                        [
                            "self.fc_out(z)",
                            "Call"
                        ],
                        [
                            "self.act(z)",
                            "Call"
                        ],
                        [
                            "self.fc_z_a(z)",
                            "Call"
                        ],
                        [
                            "z.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.fc_z_cond(z)",
                            "Call"
                        ],
                        [
                            "eps.mul(std) + mu",
                            "BinOp"
                        ],
                        [
                            "mu",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_146": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_193": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_276": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(input_x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_287": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_288": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_292": {
                "variable": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_514": {
                "variable": {
                    "value": "mc_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_id_reduced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.label_trans.mc2reduced(voxel_id, ign2dirt=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "new_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "variable": {
                    "value": "mc_masks_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mc_masks.size(0), mc_masks.size(1), mc_masks.size(2), mc_masks.size(3), self.num_reduced_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_id.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "style_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "sky_replace_color",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[final_feat_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_383": {
                "variable": {
                    "value": "self.sky_replace_color",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sky_replace_color",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([final_feat_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_460": {
                "variable": {
                    "value": "feature_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature_in, proj_feature[..., -self.pe_no_pe_feat_dim:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_not_532": {
                "input": {
                    "value": "sky_only_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "voxel_id[:, :, :, [0], :] == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_not_538": {
                "input": {
                    "value": "sky_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "voxel_id[:, :, :, [-1], :] == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remainder_447": {
                "input": {
                    "value": "worldcoord2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "raydirs * rand_depth + cam_ori_t[:, None, None, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_449": {
                "input": {
                    "value": "local_coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.remainder(worldcoord2, 1.0) * 2.0",
                            "BinOp"
                        ],
                        [
                            "local_coords.contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_468": {
                "input": {
                    "value": "net_out_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_out_s + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_564": {
                "input": {
                    "value": "net_out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_565": {
                "input": {
                    "value": "skynet_out_c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.sky_net(sky_raydirs_in, z)",
                            "Call"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + self.sky_replace_color * nosky_mask",
                            "BinOp"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + sky_avg * nosky_mask",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_566": {
                "input": {
                    "value": "weights * rgbs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_577": {
                "variable": {
                    "value": "rgbs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_578": {
                "variable": {
                    "value": "rgbs_sky",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skynet_out_c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.sky_net(sky_raydirs_in, z)",
                            "Call"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + self.sky_replace_color * nosky_mask",
                            "BinOp"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + sky_avg * nosky_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_573": {
                "input": {
                    "value": "weights * rgbs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_551": {
                "variable": {
                    "value": "sky_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skynet_out_c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.sky_net(sky_raydirs_in, z)",
                            "Call"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + self.sky_replace_color * nosky_mask",
                            "BinOp"
                        ],
                        [
                            "skynet_out_c * (1.0 - nosky_mask) + sky_avg * nosky_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_554": {
                "variable": {
                    "value": "sky_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skynet_out_c_nchw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "skynet_out_c.permute(0, 4, 1, 2, 3).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "31",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_579": {
                "input": {
                    "value": "weights * rgbs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/munit.py": {
        "torch": {
            "Sequential_330": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_457": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_73": {
                "variable": {
                    "value": "style_a_rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_74": {
                "variable": {
                    "value": "style_b_rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_139": {
                "variable": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "content.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "style_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.autoencoder_a.style_channels",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_328": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_filters // 2",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "style_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.autoencoder_a.style_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_140": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/pix2pixHD.py": {
        "torch": {
            "AvgPool2d_97": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.model_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_downsample",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.model_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model_upsample",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "variable": {
                    "value": "outputs_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.global_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*global_model",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label, features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "dummy_arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((n_clusters, feat_nc), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_345": {
                "variable": {
                    "value": "mean_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ins",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[indices[:, 0] + b, indices[:, 1] + j, indices[:, 2], indices[:, 3]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/generators/spade.py": {
        "torch": {
            "meshgrid_411": {
                "variable": {
                    "value": "(xv, yv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(-1, 1.1, 2.0 / 15), torch.arange(-1, 1.1, 2.0 / 15)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xv.unsqueeze(0), yv.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_413": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_439": {
                "variable": {
                    "value": "in_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "[sy, sx]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_568": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_569": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_213": {
                "variable": {
                    "value": "output_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output['fake_images']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(output_images, size=[height, width])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_441": {
                "variable": {
                    "value": "in_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[sy, sx]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "in_seg_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_seg, in_xy.expand(in_seg.size()[0], 2, sy, sx))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_482": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_multiplier * x256",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_558": {
                "variable": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(input_x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_145": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data['label'].size(0)",
                            "Call"
                        ],
                        [
                            "data['label'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "data[z]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, data['attributes'].squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_491": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_multiplier * (x256 + x512)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_194": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data['label'].size(0)",
                            "Call"
                        ],
                        [
                            "data['label'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_412": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0 / 15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_505": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_multiplier * (x256 + x512 + x1024)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/unit.py": {
        "torch": {
            "Sequential_229": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/vid2vid.py": {
        "torch": {
            "AvgPool2d_151": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_258": {
                "variable": {
                    "value": "img_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_img(x_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.down_lbl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_lbl",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_459": {
                "variable": {
                    "value": "self.down_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_img",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_460": {
                "variable": {
                    "value": "self.res_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*res_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_461": {
                "variable": {
                    "value": "self.up_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*up_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_462": {
                "variable": {
                    "value": "self.conv_flow",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_flow",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_mask",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "label_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label_prev.view(bs, -1, h, w), label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_262": {
                "variable": {
                    "value": "img_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_img(x_raw_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "img_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_warp, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_185": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_450": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/generators/wc_vid2vid.py": {
        "torch": {
            "cat_126": {
                "variable": {
                    "value": "guidance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(guidance_image, guidance_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_275": {
                "variable": {
                    "value": "img_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_img(x_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_170": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.single_image_model.style_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "label_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label_prev.view(bs, -1, h, w), label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "img_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_warp, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_193": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['label'].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/activation_norm.py": {
        "torch": {
            "ModuleList_174": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.gammas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_283": {
                "variable": {
                    "value": "self.gammas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_284": {
                "variable": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_519": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_558": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "addcmul_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_beta(y)",
                            "Call"
                        ],
                        [
                            "beta.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.betas[i](hidden)",
                            "Call"
                        ],
                        [
                            "beta_layer(cond)",
                            "Call"
                        ],
                        [
                            "F.interpolate(beta, size=x.size()[2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "beta[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "beta * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.noise_layer(x, noise=noise)",
                            "Call"
                        ],
                        [
                            "torch.addcmul(beta, x, 1 + gamma)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "1 + gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_251": {
                "variable": {
                    "value": "label_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond_inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.interpolation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_411": {
                "variable": {
                    "value": "label_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cond_inputs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_449": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).fill_(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_450": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_485": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_536": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_322": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_gamma(y)",
                            "Call"
                        ],
                        [
                            "gamma.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.gammas[i](hidden)",
                            "Call"
                        ],
                        [
                            "gamma_layer(cond)",
                            "Call"
                        ],
                        [
                            "F.interpolate(gamma, size=x.size()[2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "gamma[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "gamma * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_323": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc_beta(y)",
                            "Call"
                        ],
                        [
                            "beta.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.betas[i](hidden)",
                            "Call"
                        ],
                        [
                            "beta_layer(cond)",
                            "Call"
                        ],
                        [
                            "F.interpolate(beta, size=x.size()[2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "beta[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "beta * (1 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "mlp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_407": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_495": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=self.dim, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_522": {
                "tensors": {
                    "value": "(mean, std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_546": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=self.dim, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_450": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_536": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_594": {
                "variable": {
                    "value": "norm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "*mlp",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_495": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_547": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_596": {
                "variable": {
                    "value": "norm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "script_608": {
                "variable": {
                    "value": "norm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "norm_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "norm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "norm(num_features, affine=affine, **norm_params)",
                            "Call"
                        ],
                        [
                            "SyncBatchNorm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "nn.LayerNorm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "LayerNorm2d(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "PixelLayerNorm(num_features, elementwise_affine=elementwise_affine, **norm_params)",
                            "Call"
                        ],
                        [
                            "ScaleNorm(**norm_params)",
                            "Call"
                        ],
                        [
                            "PixelNorm(**norm_params)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(norm_layer)",
                            "Call"
                        ],
                        [
                            "nn.GroupNorm(num_channels=num_features, num_groups=num_groups, **norm_params)",
                            "Call"
                        ],
                        [
                            "AdaptiveNorm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "DualAdaptiveNorm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "SpatiallyAdaptiveNorm(num_features, **norm_params)",
                            "Call"
                        ],
                        [
                            "HyperSpatiallyAdaptiveNorm(num_features, **norm_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupNorm_611": {
                "variable": {
                    "value": "norm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_params.pop('num_groups', 4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/layers/conv.py": {
        "torch": {
            "ModuleDict_113": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_298": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels, in_channels, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_84": {
                "variable": {
                    "value": "blur_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.output_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(output_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "self.bias.repeat(batch)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_322": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_338": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_353": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.unsqueeze(0) * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channels, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channels, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "self.bias.repeat(batch)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_461": {
                "num_embeddings": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_865": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[self.padding] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1235": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1240": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_1297": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(raw_out - bias_view, self.mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(output, self.update_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out, self.mask_ratio)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out - bias_view, mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(raw_out, mask_ratio)",
                            "Call"
                        ],
                        [
                            "torch.mul(output, update_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_1299": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(PartialConv2d, self).forward(torch.mul(x, mask) if mask_in is not None else x)",
                            "Call"
                        ],
                        [
                            "super(PartialConv3d, self).forward(torch.mul(x, mask_in))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1321": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1325": {
                "variable": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.kernel_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv3d_1346": {
                "variable": {
                    "value": "update_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(x.data.shape[0], x.data.shape[1], x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "mask_in",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_1351": {
                "variable": {
                    "value": "update_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "update_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv3d(mask, self.weight_maskUpdater, bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(update_mask, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_1352": {
                "variable": {
                    "value": "mask_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.slide_winsize / (update_mask + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ratio, update_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "update_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv3d(mask, self.weight_maskUpdater, bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(update_mask, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_1362": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(PartialConv2d, self).forward(torch.mul(x, mask) if mask_in is not None else x)",
                            "Call"
                        ],
                        [
                            "super(PartialConv3d, self).forward(torch.mul(x, mask_in))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.slide_winsize / (update_mask + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ratio, update_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_1375": {
                "input": {
                    "value": "x.squeeze(1).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_1375": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_358": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.unsqueeze(0) * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channels, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channels, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "self.bias.repeat(batch)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_363": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.unsqueeze(0) * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channels, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channels, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channels, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "self.bias.repeat(batch)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_874": {
                "variable": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "conv_weight[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * x.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "(0, 0)",
                            "Tuple"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_879": {
                "variable": {
                    "value": "yi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "conv_weight[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[None] * x.size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "int(1 / self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1280": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(x.data.shape[0], x.data.shape[1], x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "mask_in",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_maskUpdater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_1288": {
                "variable": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_1289": {
                "variable": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.update_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_1354": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_in",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_1360": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(raw_out - bias_view, self.mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(output, self.update_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out, self.mask_ratio)",
                            "Call"
                        ],
                        [
                            "torch.mul(raw_out - bias_view, mask_ratio) + bias_view",
                            "BinOp"
                        ],
                        [
                            "torch.mul(raw_out, mask_ratio)",
                            "Call"
                        ],
                        [
                            "torch.mul(output, update_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "update_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv3d(mask, self.weight_maskUpdater, bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(update_mask, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "data": {
                    "value": "output_scale",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_885": {
                "tensors": {
                    "value": "[y, yi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_1263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_1292": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x * self.output_scale",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, self.modulation(style), **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "x.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [self.padding] * 4, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x, mask_in=mask_in, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, *cond_inputs, **kw_cond_inputs)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_in",
                            "Name"
                        ],
                        [
                            "torch.ones(x.data.shape[0], x.data.shape[1], x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, x.data.shape[2], x.data.shape[3]).to(x)",
                            "Call"
                        ],
                        [
                            "mask_in",
                            "Name"
                        ]
                    ]
                }
            },
            "mul_1296": {
                "input": {
                    "value": "raw_out - bias_view",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mask_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_1358": {
                "input": {
                    "value": "raw_out - bias_view",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "mask_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.slide_winsize / (update_mask + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ratio, update_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Identity_80": {
                "variable": {
                    "value": "blur_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_1270": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.data.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1275": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.data.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.data.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/misc.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, h, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/non_local.py": {
        "torch": {
            "Softmax_55": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, -1, h * w).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "self.max_pool(phi).view(n, -1, h * w // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_80": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.g(x)",
                            "Call"
                        ],
                        [
                            "self.max_pool(g).view(n, -1, h * w // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/nonlinearity.py": {
        "torch": {
            "ReLU_44": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_21": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "script_51": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "nonlinearity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FusedNonlinearity(nonlinearity=nonlinearity_type[6:], **kwargs)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=inplace)",
                            "Call"
                        ],
                        [
                            "nn.LeakyReLU(0.2, inplace=inplace)",
                            "Call"
                        ],
                        [
                            "ScaledLeakyReLU(0.2, inplace=inplace)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(nonlinearity)",
                            "Call"
                        ],
                        [
                            "nn.PReLU()",
                            "Call"
                        ],
                        [
                            "nn.Tanh()",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=int(dim))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "PReLU_53": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_57": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_60": {
                "variable": {
                    "value": "nonlinearity",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "int(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/residual.py": {
        "torch": {
            "Upsample_919": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "x_shortcut",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_shortcut_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_177": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/residual_deep.py": {
        "torch": {
            "AvgPool2d_187": {
                "variable": {
                    "value": "self.resample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "x_shortcut",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_shortcut_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_182": {
                "variable": {
                    "value": "self.resample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_203": {
                "variable": {
                    "value": "self.resample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_197": {
                "variable": {
                    "value": "self.resample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/vit.py": {
        "torch": {
            "ModuleDict_114": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_85": {
                "variable": {
                    "value": "blur_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.output_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(output_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "data": {
                    "value": "output_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_81": {
                "variable": {
                    "value": "blur_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/layers/weight_norm.py": {
        "torch": {
            "rsqrt_54": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weight ** 2).sum(dim=(2, 3, 4), keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "lr_mul",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_params.pop('lr_mul', 1.0)",
                            "Call"
                        ],
                        [
                            "norm_params.pop('lr_mul', 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "lr_mul * (1 / fan_in) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "lr_mul",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_params.pop('lr_mul', 1.0)",
                            "Call"
                        ],
                        [
                            "norm_params.pop('lr_mul', 1.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_159": {
                "data": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "data": {
                    "value": "bias.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/dict.py": {
        "torch": {
            "L1Loss_12": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_14": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/feature_matching.py": {
        "torch": {
            "L1Loss_13": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_15": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/flow.py": {
        "torch": {
            "L1Loss_22": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_56": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "loss_flow_L1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "loss_flow_warp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "loss_flow_L1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "loss_flow_warp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_260": {
                "variable": {
                    "value": "dummy0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "occ_mask[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_261": {
                "variable": {
                    "value": "dummy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "occ_mask[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_299": {
                "variable": {
                    "value": "dummy0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_G_output['fake_occlusion_masks']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_300": {
                "variable": {
                    "value": "dummy1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_G_output['fake_occlusion_masks']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_304": {
                "variable": {
                    "value": "img_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs(warped_image - tgt_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_306": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - img_diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "body_mask_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs(warped_ref_body_mask - body_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_266": {
                "variable": {
                    "value": "AvgPool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_156": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_157": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_214": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_215": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_244": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_297": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "numel_41": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.expand_as(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_41": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.expand_as(input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/losses/gan.py": {
        "torch": {
            "min_17": {
                "variable": {
                    "value": "minval",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_26": {
                "variable": {
                    "value": "minval",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "minval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.min(x - 1, x * 0)",
                            "Call"
                        ],
                        [
                            "torch.min(-x - 1, x * 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "minval",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.min(x - 1, x * 0)",
                            "Call"
                        ],
                        [
                            "torch.min(-x - 1, x * 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_118": {
                "variable": {
                    "value": "(dis_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(self.k * dis_output.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_122": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.stack(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_81": {
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mse_loss_126": {
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_139": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_142": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(dis_output, t_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_134": {
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_137": {
                "input": {
                    "value": "dis_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_output.view(dis_output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "dis_output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/losses/info_nce.py": {
        "torch": {
            "zeros_like_26": {
                "variable": {
                    "value": "grad_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "all_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.logit_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([math.log(1 / temperature)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "self.logit_scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit_scale.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "4.6052",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_86": {
                "variable": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_a",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "logit_scale * features_a @ gather_features_b.t()",
                            "BinOp"
                        ],
                        [
                            "logit_scale * features_a @ features_b.t()",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "gather_labels_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(bs_a, device='cuda') + get_rank() * bs_a",
                            "BinOp"
                        ],
                        [
                            "torch.arange(bs_a, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "gather_features_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "GatherLayer.apply(features_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_84": {
                "variable": {
                    "value": "gather_labels_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features_a.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[math.log(1 / temperature)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_81": {
                "start": {
                    "value": "bs_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features_a.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/kl.py": {
        "torch": {
            "zeros_like_22": {
                "variable": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/perceptual.py": {
        "torch": {
            "Sequential_194": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.features) + [vgg.avgpool] + [nn.Flatten()] + list(vgg.classifier)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_1a_3x3",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet50.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet50.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_84": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'mean' if not per_sample_weight else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "interpolate_120": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(inp, mode=self.resize_mode, size=(224, 224), align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(inp, mode=self.resize_mode, scale_factor=0.5, align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.resize_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(target, mode=self.resize_mode, size=(224, 224), align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(target, mode=self.resize_mode, scale_factor=0.5, align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.resize_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_255": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_258": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_270": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_initialized_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_86": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'mean' if not per_sample_weight else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "interpolate_148": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(inp, mode=self.resize_mode, size=(224, 224), align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(inp, mode=self.resize_mode, scale_factor=0.5, align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.resize_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_151": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(target, mode=self.resize_mode, size=(224, 224), align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(target, mode=self.resize_mode, scale_factor=0.5, align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.resize_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/losses/weighted_mse.py": {
        "torch": {
            "mean_25": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * (input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight * (input - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/fs_vid2vid.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flow[:, 0:1, :, :] / ((w - 1.0) / 2.0), flow[:, 1:2, :, :] / ((h - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "minval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "maxval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_57": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "minval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "maxval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "t_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_843": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t[:, :, -ny:], t[:, :, :-ny]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t[:, :, :, -nx:], t[:, :, :, :-nx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_28": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "images.gather(1, idx.expand_as(images)[:, 0:1])[:, 0]",
                            "Subscript"
                        ],
                        [
                            "data['images']",
                            "Subscript"
                        ],
                        [
                            "data['images']",
                            "Subscript"
                        ],
                        [
                            "crop_and_resize(image, crop_coords, (output_h, output_w))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "final_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(grid + flow).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "minval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "maxval",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "deps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "t_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_grid, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "[prev, now]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_653": {
                "variable": {
                    "value": "output_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image[i:i + 1, -3:, ys:ye, xs:xe]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(face_size, face_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flip_846": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([t[:, :, -ny:], t[:, :, :-ny]], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([t[:, :, :, -nx:], t[:, :, :, :-nx]], dim=3)",
                            "Call"
                        ],
                        [
                            "torch.flip(t, dims=[3])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grid_sample_31": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "images.gather(1, idx.expand_as(images)[:, 0:1])[:, 0]",
                            "Subscript"
                        ],
                        [
                            "data['images']",
                            "Subscript"
                        ],
                        [
                            "data['images']",
                            "Subscript"
                        ],
                        [
                            "crop_and_resize(image, crop_coords, (output_h, output_w))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "final_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(grid + flow).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img[:, :, min_y:max_y, min_x:max_x]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img, size=size, mode=method)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size, mode=method, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "method",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_342": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img[:, :, min_y:max_y, min_x:max_x]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(img, size=size, mode=method)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=size, mode=method, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "method",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_456": {
                "kernel_size": {
                    "value": "15",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "pose_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[densepose * (1 - face_mask) - face_mask, openpose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_657": {
                "tensors": {
                    "value": "[output, output_i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_738": {
                "tensors": {
                    "value": "[output, output_i]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/camctl.py": {
        "torch": {
            "randn_415": {
                "variable": {
                    "value": "cam_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "cam_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "variable": {
                    "value": "cam_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_461": {
                "variable": {
                    "value": "cam_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "cam_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, cam_ori[1] + np.sin(rand_ang_h) * border * r[4], cam_ori[2] + np.cos(rand_ang_h) * border * r[4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_471": {
                "variable": {
                    "value": "cam_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_481": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_486": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_488": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_494": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_504": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_513": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_519": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_535": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_546": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[rand_height, r[0], r[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_571": {
                "variable": {
                    "value": "rnd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_576": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[far_height, torch.sin(rnd_deg) * size * far_radius + center[0], torch.cos(rnd_deg) * size * far_radius + center[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[near_height, torch.sin(rnd_deg + near_shift_rad) * size * near_radius + center[0], torch.cos(rnd_deg + near_shift_rad) * size * near_radius + center[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_610": {
                "variable": {
                    "value": "rnd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_615": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[far_height, torch.sin(rnd_deg) * size * far_radius + center[0], torch.cos(rnd_deg) * size * far_radius + center[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_623": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[near_height, torch.sin(rnd_deg + near_shift_rad) * size * near_radius + center[0], torch.cos(rnd_deg + near_shift_rad) * size * near_radius + center[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_14": {
                "variable": {
                    "value": "circle",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_300": {
                "variable": {
                    "value": "circle",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_325": {
                "variable": {
                    "value": "zoom",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_345": {
                "variable": {
                    "value": "move",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_365": {
                "variable": {
                    "value": "lift",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "200.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_366": {
                "variable": {
                    "value": "zoom",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[70, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.5 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.5 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] - 0.3 * np.pi) * size * 0.3 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] - 0.3 * np.pi) * size * 0.3 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[80 + lift[i], torch.sin(circle[i]) * size * 0.2 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * 0.2 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.1 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.1 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_416": {
                "input": {
                    "value": "torch.sum(cam_dir * cam_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_417": {
                "input": {
                    "value": "cam_dir[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_498": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_523": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_541": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_556": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_593": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_632": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[70, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[70, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.5 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.5 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_53": {
                "variable": {
                    "value": "zoom",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_416": {
                "input": {
                    "value": "cam_dir * cam_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_484": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_509": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_540": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_573": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_612": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] - 0.3 * np.pi) * size * 0.3 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] - 0.3 * np.pi) * size * 0.3 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_85": {
                "variable": {
                    "value": "move",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_320": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_542": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_117": {
                "variable": {
                    "value": "move",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[70, torch.sin(-circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(-circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[70, torch.sin(-circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(-circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(-circle[i] - 0.4 * np.pi) * size * 0.9 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(-circle[i] - 0.4 * np.pi) * size * 0.9 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_149": {
                "variable": {
                    "value": "move",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_578": {
                "input": {
                    "value": "rnd_deg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_579": {
                "input": {
                    "value": "rnd_deg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_588": {
                "input": {
                    "value": "rnd_deg + near_shift_rad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_589": {
                "input": {
                    "value": "rnd_deg + near_shift_rad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_617": {
                "input": {
                    "value": "rnd_deg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_618": {
                "input": {
                    "value": "rnd_deg",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "torch.rand(1) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_625": {
                "input": {
                    "value": "rnd_deg + near_shift_rad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_626": {
                "input": {
                    "value": "rnd_deg + near_shift_rad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[90, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_182": {
                "variable": {
                    "value": "move",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] + 0.5 * np.pi) * size * 0.3 * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, torch.sin(circle[i]) * size * move[i] + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i]) * size * move[i] + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_216": {
                "variable": {
                    "value": "lift",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "200.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_217": {
                "variable": {
                    "value": "zoom",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "maxstep",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "len(height_history)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sin_309": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_310": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_329": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_330": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_26": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_27": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_36": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_37": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[80 + lift[i], torch.sin(circle[i] / 4) * size * 0.2 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] / 4) * size * 0.2 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[65, torch.sin(circle[i] / 4 + 0.5 * np.pi) * size * 0.1 + voxel.voxel_t.size(1) / 2 + shift, torch.cos(circle[i] / 4 + 0.5 * np.pi) * size * 0.1 + voxel.voxel_t.size(2) / 2 + shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "rad",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.deg2rad(45).astype(np.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_316": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_317": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_336": {
                "input": {
                    "value": "circle[i] - 0.3 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_337": {
                "input": {
                    "value": "circle[i] - 0.3 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_349": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_350": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_370": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_371": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_377": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_378": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_43": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_44": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_58": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_59": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_68": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_69": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "farpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[61 + size, torch.sin(rad) * size + voxel.voxel_t.size(1) / 2, torch.cos(rad) * size + voxel.voxel_t.size(2) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "nearpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[61, voxel.voxel_t.size(1) / 2, voxel.voxel_t.size(2) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_357": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_75": {
                "input": {
                    "value": "circle[i] - 0.3 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_76": {
                "input": {
                    "value": "circle[i] - 0.3 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_90": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_91": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_100": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_101": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_107": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_108": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_122": {
                "input": {
                    "value": "-circle[i]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_123": {
                "input": {
                    "value": "-circle[i]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_132": {
                "input": {
                    "value": "-circle[i]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_133": {
                "input": {
                    "value": "-circle[i]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_139": {
                "input": {
                    "value": "-circle[i] - 0.4 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_140": {
                "input": {
                    "value": "-circle[i] - 0.4 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_154": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_155": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_164": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_165": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_171": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_172": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_204": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_205": {
                "input": {
                    "value": "circle[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_243": {
                "input": {
                    "value": "rad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([np.deg2rad(45).astype(np.float32)])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_244": {
                "input": {
                    "value": "rad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([np.deg2rad(45).astype(np.float32)])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_187": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_188": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_197": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_198": {
                "input": {
                    "value": "circle[i] + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_221": {
                "input": {
                    "value": "circle[i] / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_222": {
                "input": {
                    "value": "circle[i] / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_228": {
                "input": {
                    "value": "circle[i] / 4 + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_229": {
                "input": {
                    "value": "circle[i] / 4 + 0.5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/layers.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.weight_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([in_features, style_features]) / np.sqrt(style_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.bias_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full([in_features], 1, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([out_features, in_features]) * weight_gain",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.weight_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([in_features, style_features]) / np.sqrt(style_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.bias_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full([in_features], 1, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.weight_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([in_features, style_features]) / np.sqrt(style_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.bias_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full([in_features], 0, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "torch.baddbmm(b, x, w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.weight_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([mod_bias_dims, style_features]) / np.sqrt(style_features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full([mod_bias_dims], 0, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "torch.baddbmm(b, x, w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_149": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "b.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "b.to(x.dtype)[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "beta",
                            "Name"
                        ],
                        [
                            "b + beta",
                            "BinOp"
                        ]
                    ]
                },
                "batch1": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x * alpha",
                            "BinOp"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.addmm(b.unsqueeze(0), x, w.t())",
                            "Call"
                        ],
                        [
                            "x.matmul(w.t())",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x + beta",
                            "BinOp"
                        ],
                        [
                            "torch.baddbmm(b, x, w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(w.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.reshape(*x_shape[:-1], x.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_26": {
                "size": {
                    "value": "[in_features]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "torch.full([out_features], np.float32(bias_init))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_95": {
                "size": {
                    "value": "[in_features]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "[in_features, style_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_32": {
                "size": {
                    "value": "[in_features]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_92": {
                "*size": {
                    "value": "[out_features, in_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_93": {
                "size": {
                    "value": "[out_features]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "np.float32(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "[in_features, style_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_106": {
                "size": {
                    "value": "[mod_bias_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_31": {
                "*size": {
                    "value": "[in_features, style_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "[mod_bias_dims, style_features]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/loss.py": {
        "torch": {
            "log_softmax_74": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_x['pred'].clone()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + new_loss",
                            "BinOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "-pred_fake",
                            "UnaryOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss.view(batch_size, -1).mean(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + new_loss",
                            "BinOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "-pred_fake",
                            "UnaryOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss.view(batch_size, -1).mean(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_46": {
                "variable": {
                    "value": "new_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + new_loss",
                            "BinOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "-pred_fake",
                            "UnaryOp"
                        ],
                        [
                            "-label * pred_real",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss.view(batch_size, -1).mean(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/mc_utils.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "voxel_world",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "voxel_world.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_38": {
                "variable": {
                    "value": "voxel_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "corners",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "corners",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ndimage.binary_dilation(voxel_p.numpy(), structure)",
                            "Call"
                        ],
                        [
                            "torch.tensor(corners, dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(m, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.flip(voxel_t, [0]) != 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mv_77": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([v[0], v[1], v[2], 0], dtype=v.dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([v[0], v[1], v[2], 1], dtype=v.dtype)",
                            "Call"
                        ],
                        [
                            "torch.mv(m, v)",
                            "Call"
                        ],
                        [
                            "v / v[3]",
                            "BinOp"
                        ],
                        [
                            "v[:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cumsum_85": {
                "variable": {
                    "value": "cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "roll_86": {
                "variable": {
                    "value": "cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cumsum(tensor, dim)",
                            "Call"
                        ],
                        [
                            "torch.roll(cumsum, 1, dim)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cumsum_113": {
                "variable": {
                    "value": "accu_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "depth2[:, 1] - depth2[:, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "total_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accu_depth[..., [-1], :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(total_depth, None, sample_depth)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "sample_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_141": {
                "variable": {
                    "value": "(rand_samples, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(rand_shape, dtype=total_depth.dtype, device=total_depth.device)",
                            "Call"
                        ],
                        [
                            "torch.rand(rand_shape, dtype=total_depth.dtype, device=total_depth.device)",
                            "Call"
                        ],
                        [
                            "rand_samples / nsamples",
                            "BinOp"
                        ],
                        [
                            "rand_samples * total_depth",
                            "BinOp"
                        ],
                        [
                            "torch.cat([rand_samples, boundary_samples, torch.zeros([bs, dim0, dim1, 1, 1], dtype=total_depth.dtype, device=total_depth.device)], dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "midpoints.unsqueeze(-3) > accu_depth.unsqueeze(-2)",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_152": {
                "variable": {
                    "value": "depth_deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_deltas",
                    "type": "Call",
                    "possible_values": [
                        [
                            "depth2[:, 0, :, :, 1:, :] - depth2[:, 1, :, :, :-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.cumsum(depth_deltas, dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([depth2[:, 0, :, :, [0], :], depth_deltas + depth2[:, 0, :, :, [0], :]], dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "depth_deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[depth2[:, 0, :, :, [0], :], depth_deltas + depth2[:, 0, :, :, [0], :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_154": {
                "variable": {
                    "value": "heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_deltas",
                    "type": "Call",
                    "possible_values": [
                        [
                            "depth2[:, 0, :, :, 1:, :] - depth2[:, 1, :, :, :-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.cumsum(depth_deltas, dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([depth2[:, 0, :, :, [0], :], depth_deltas + depth2[:, 0, :, :, [0], :]], dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(midpoints.unsqueeze(-3) > accu_depth.unsqueeze(-2), dim=-3)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_167": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-cumsum_exclusive(free_energy, dim=dim)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_376": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_377": {
                "variable": {
                    "value": "onehot_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.avg_pool2d(seg_mask, kernel_size, 1, kernel_size // 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[v[0], v[1], v[2], 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[v[0], v[1], v[2], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_128": {
                "variable": {
                    "value": "rand_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rand_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bs, dim0, dim1, nsamples, 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "total_depth.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "total_depth.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_131": {
                "variable": {
                    "value": "rand_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rand_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[bs, dim0, dim1, nsamples, 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "total_depth.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "total_depth.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "rand_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rand_samples, boundary_samples, torch.zeros([bs, dim0, dim1, 1, 1], dtype=total_depth.dtype, device=total_depth.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_208": {
                "variable": {
                    "value": "self.trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_217": {
                "variable": {
                    "value": "nfilledvox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.corner_t > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_220": {
                "variable": {
                    "value": "self.corner_t[self.corner_t > 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "nfilledvox + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_224": {
                "variable": {
                    "value": "mat_world2local",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.trans_mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_112": {
                "input": {
                    "value": "dists",
                    "type": "Name",
                    "possible_values": [
                        [
                            "depth2[:, 1] - depth2[:, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_164": {
                "input": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_166": {
                "input": {
                    "value": "-free_energy.float()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "mcid2rdid_lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mcid2rdid_lut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mapper.mcid2rdid_lut",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(mcid2rdid_lut, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "ggid2rdid_lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ggid2rdid_lut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mapper.ggid2rdid + [0]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(ggid2rdid_lut, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "variable": {
                    "value": "mc2coco_lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mc2coco_lut",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(zip(*sorted([(k, v) for (k, v) in self.id2cocoidx_lut.items()])))[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(mc2coco_lut, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_121": {
                "input": {
                    "value": "boundary_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "accu_depth.clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_129": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "nsamples + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_134": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "nsamples + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "rand_samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "[bs, dim0, dim1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "total_depth.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "total_depth.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numel_218": {
                "input": {
                    "value": "self.corner_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_54": {
                "input": {
                    "value": "voxel_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/voxlib/positional_encoding.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pe_stor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_58": {
                "*size": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "y - y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "allclose_63": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "positional_encoding_pt(x, 4, incl_orig=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "positional_encoding(x, 4, incl_orig=True)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_49": {
                "input": {
                    "value": "pts * np.pi * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_50": {
                "input": {
                    "value": "pts * np.pi * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/model_utils/gancraft/voxlib/setup.py": {
        "torch": {}
    },
    "imaginaire/model_utils/gancraft/voxlib/sp_trilinear.py": {
        "torch": {}
    },
    "imaginaire/model_utils/label.py": {
        "torch": {
            "zeros_89": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*output_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "data[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "data[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "data[few_shot_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "data[few_shot_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/optimizers/fromage.py": {
        "torch": {}
    },
    "imaginaire/optimizers/madam.py": {
        "torch": {
            "zeros_like_38": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_50": {
                "input": {
                    "value": "-group['lr'] * g_normed * torch.sign(p.data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_46": {
                "input": {
                    "value": "g_normed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data / (state['exp_avg_sq'] / bias_correction).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_51": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/bias_act/bias_act.py": {
        "torch": {
            "empty_43": {
                "variable": {
                    "value": "_null_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_15": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_19": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_22": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_24": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_27": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_30": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_34": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_36": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/third_party/bias_act/setup.py": {
        "torch": {}
    },
    "imaginaire/third_party/channelnorm/channelnorm.py": {
        "torch": {}
    },
    "imaginaire/third_party/channelnorm/setup.py": {
        "torch": {}
    },
    "imaginaire/third_party/correlation/correlation.py": {
        "torch": {
            "device_of_28": {
                "obj": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_of_52": {
                "obj": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/correlation/setup.py": {
        "torch": {}
    },
    "imaginaire/third_party/flow_net/flow_net.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "data1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im1.unsqueeze(2), im2.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "flownet2_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_checkpoint('flownet2.pth.tar', '1hF8vS6YeHkx3j2pfCeQqqZGwA_PJq_Da')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "im1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(im1, size=(new_h, new_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "variable": {
                    "value": "im2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(im2, size=(new_h, new_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(self.norm(im1 - resample(im2, flow1)) < 0.02).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(conf, size=(old_h, old_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(old_h, old_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "t * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "flow1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.flowNet(data1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(flow1, size=(old_h, old_w), mode='bilinear', align_corners=False) * old_h / new_h",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(old_h, old_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/models.py": {
        "torch": {
            "Upsample_31": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_42": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_55": {
                "variable": {
                    "value": "self.upsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_56": {
                "variable": {
                    "value": "self.upsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownets1_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :3, :, :], flownetsd_flow, flownets2_flow, norm_flownetsd_flow, norm_flownets2_flow, diff_flownetsd_img1, diff_flownets2_img1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv_redir, out_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3_1, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2a, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0, :, :], x[:, :, 1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0, :, :], x[:, :, 1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_329": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_340": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_393": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_404": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_414": {
                "variable": {
                    "value": "self.upsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownetc_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, resampled_img1, flownets1_flow / self.div_flow, norm_diff_img0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "weight.data[i, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bilinear",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([height, width])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/networks/flownet_c.py": {
        "torch": {
            "LeakyReLU_48": {
                "variable": {
                    "value": "self.corr_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_88": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "in_conv3_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv_redir, out_corr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3_1, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2a, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/networks/flownet_fusion.py": {
        "torch": {
            "ConvTranspose2d_41": {
                "variable": {
                    "value": "self.upsampled_flow2_to_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "variable": {
                    "value": "self.upsampled_flow1_to_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "concat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv1, out_deconv1, flow2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "concat0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv0, out_deconv0, flow1_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/networks/flownet_s.py": {
        "torch": {
            "ConvTranspose2d_57": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_61": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_77": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/networks/flownet_sd.py": {
        "torch": {
            "ConvTranspose2d_55": {
                "variable": {
                    "value": "self.upsampled_flow6_to_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_56": {
                "variable": {
                    "value": "self.upsampled_flow5_to_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "variable": {
                    "value": "self.upsampled_flow4_to_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "variable": {
                    "value": "self.upsampled_flow3_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_71": {
                "variable": {
                    "value": "self.upsample1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "concat5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv5, out_deconv5, flow6_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "concat4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv4, out_deconv4, flow5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "concat3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv3, out_deconv3, flow4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "concat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_conv2, out_deconv2, flow3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/networks/submodules.py": {
        "torch": {
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "weight.data[i, j, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bilinear",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([heigh, width])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/utils/param_utils.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight, axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "m.weight.data[:, 0:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 0:3, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "m.weight.data[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 3:6, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "m.weight.data[:, 6:9, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 6:9, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "m.weight.data[:, 9:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight[:, 9:, :, :].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "m.weight.data[:, 0:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 0:3, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "m.weight.data[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 3:6, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "m.weight.data[:, 0:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 0:3, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "m.weight.data[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 3:6, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "m.weight.data[:, 0:3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(weight[:, 0:3, :, :], axis=1).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "m.weight.data[:, 3:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight[:, 3:, :, :].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "m.weight.data[:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "weights[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ],
                        [
                            "biases[keys[i]].copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/third_party/flow_net/flownet2/utils/tools.py": {
        "torch": {
            "save_192": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prefix_save + '_' + filename",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/third_party/resample2d/resample2d.py": {
        "torch": {
            "autocast_55": {
                "device_type": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/third_party/resample2d/setup.py": {
        "torch": {}
    },
    "imaginaire/third_party/upfirdn2d/setup.py": {
        "torch": {}
    },
    "imaginaire/third_party/upfirdn2d/upfirdn2d.py": {
        "torch": {
            "as_tensor_168": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "torch.as_tensor(f, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "f[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f.ger(f)",
                            "Call"
                        ],
                        [
                            "f / f.sum()",
                            "BinOp"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f[np.newaxis, np.newaxis].repeat([num_channels, 1] + [1] * f.ndim)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_259": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, upx - 1, 0, 0, 0, upy - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_263": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_143": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_249": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_277": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "torch.as_tensor(f, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "f[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f.ger(f)",
                            "Call"
                        ],
                        [
                            "f / f.sum()",
                            "BinOp"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f[np.newaxis, np.newaxis].repeat([num_channels, 1] + [1] * f.ndim)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_279": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "f.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_280": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "f.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "list(self.pad) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "list(self.pad) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "F.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(x, list(self.pad) * 2, mode=self.padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "list(self.pad) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_312": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/base.py": {
        "torch": {
            "GradScaler_77": {
                "variable": {
                    "value": "self.scaler_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_78": {
                "variable": {
                    "value": "self.scaler_D",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_93": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_280": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cfg.logdir, line[0].split(' ')[-1])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_858": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_965": {
                "obj": {
                    "value": "{'net_G': net_G.state_dict(), 'net_D': net_D.state_dict(), 'opt_G': opt_G.state_dict(), 'opt_D': opt_D.state_dict(), 'sch_G': sch_G.state_dict(), 'sch_D': sch_D.state_dict(), 'current_epoch': current_epoch, 'current_iteration': current_iteration}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cfg.logdir, latest_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "vis_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img for img in vis_images if img is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__703": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.net_G_module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.cfg.gen_opt.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__780": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.net_D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.cfg.dis_opt.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_881": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_889": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_897": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_905": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_913": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_922": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_935": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_690": {
                "enabled": {
                    "value": "self.cfg.trainer.amp_config.enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_767": {
                "enabled": {
                    "value": "self.cfg.trainer.amp_config.enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_842": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_858": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isfinite_708": {
                "input": {
                    "value": "total_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_G_module.parameters(), self.cfg.gen_opt.clip_grad_norm)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_D.parameters(), self.cfg.dis_opt.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_729": {
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gen_forward(data)",
                            "Call"
                        ],
                        [
                            "self.dis_forward(data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, device=torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "total_loss + losses[loss_name] * self.weights[loss_name]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isfinite_784": {
                "input": {
                    "value": "total_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_G_module.parameters(), self.cfg.gen_opt.clip_grad_norm)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_D.parameters(), self.cfg.dis_opt.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_805": {
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.gen_forward(data)",
                            "Call"
                        ],
                        [
                            "self.dis_forward(data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, device=torch.device('cuda'))",
                            "Call"
                        ],
                        [
                            "total_loss + losses[loss_name] * self.weights[loss_name]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/trainers/fs_vid2vid.py": {
        "torch": {
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/funit.py": {
        "torch": {
            "L1Loss_53": {
                "variable": {
                    "value": "self.criteria[image_recon]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_54": {
                "variable": {
                    "value": "self.criteria[feature_matching]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_145": {
                "input": {
                    "value": "net_G_output['attn_a'][:, i:i + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "input": {
                    "value": "net_G_output['attn_b'][:, i:i + 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/gancraft.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_checkpoint(default_checkpoint_path, cfg.pretrained_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_115": {
                "variable": {
                    "value": "self.criteria[L2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_118": {
                "variable": {
                    "value": "self.criteria[L1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "segmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in segmap]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "segmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in segmap]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/munit.py": {
        "torch": {
            "L1Loss_52": {
                "variable": {
                    "value": "self.criteria[image_recon]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_132": {
                "variable": {
                    "value": "self.gen_losses[style_recon_a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['style_ba'] - net_G_output['style_a_rand']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "self.gen_losses[style_recon_a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_135": {
                "variable": {
                    "value": "self.gen_losses[style_recon_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['style_ab'] - net_G_output['style_b_rand']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "self.gen_losses[style_recon_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_153": {
                "variable": {
                    "value": "self.gen_losses[content_recon_a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['content_ab'] - net_G_output['content_a'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "self.gen_losses[content_recon_a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_156": {
                "variable": {
                    "value": "self.gen_losses[content_recon_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['content_ba'] - net_G_output['content_b'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "self.gen_losses[content_recon_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "self.dis_losses[consistency_reg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_142": {
                "variable": {
                    "value": "self.gen_losses[style_recon_aa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['style_aa'] - net_G_output['style_a'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "self.gen_losses[style_recon_aa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_145": {
                "variable": {
                    "value": "self.gen_losses[style_recon_bb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['style_bb'] - net_G_output['style_b'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_145": {
                "variable": {
                    "value": "self.gen_losses[style_recon_bb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_164": {
                "variable": {
                    "value": "self.gen_losses[content_recon_aa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['content_aa'] - net_G_output['content_a'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "self.gen_losses[content_recon_aa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_167": {
                "variable": {
                    "value": "self.gen_losses[content_recon_bb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "net_G_output['content_bb'] - net_G_output['content_b'].detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "self.gen_losses[content_recon_bb]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "net_G_output['images_aba'] - data['images_a']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_184": {
                "input": {
                    "value": "net_G_output['images_bab'] - data['images_b']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_231": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_245": {
                "input": {
                    "value": "net_D_output_aug[feature_name] - net_D_output[feature_name]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/pix2pixHD.py": {
        "torch": {
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/spade.py": {
        "torch": {
            "interpolate_277": {
                "variable": {
                    "value": "data[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[sy, sx]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_280": {
                "variable": {
                    "value": "data[images]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data['images']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "[sy, sx]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "segmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in segmaps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "edgemaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels[key], labels[key], labels[key])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/unit.py": {
        "torch": {
            "L1Loss_48": {
                "variable": {
                    "value": "self.criteria[image_recon]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_49": {
                "variable": {
                    "value": "self.criteria[cycle_recon]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/trainers/vid2vid.py": {
        "torch": {
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__543": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.net_G_module.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.cfg.gen_opt.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__628": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.net_D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.cfg.dis_opt.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_823": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_473": {
                "enabled": {
                    "value": "self.cfg.trainer.amp_config.enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_581": {
                "enabled": {
                    "value": "self.cfg.trainer.amp_config.enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_547": {
                "input": {
                    "value": "total_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_G_module.parameters(), self.cfg.gen_opt.clip_grad_norm)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_D.parameters(), self.cfg.dis_opt.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_631": {
                "input": {
                    "value": "total_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_G_module.parameters(), self.cfg.gen_opt.clip_grad_norm)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.clip_grad_norm_(self.net_D.parameters(), self.cfg.dis_opt.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "imaginaire/trainers/wc_vid2vid.py": {
        "torch": {
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/cudnn.py": {
        "torch": {}
    },
    "imaginaire/utils/dataset.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle and sampler is None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(cfg.data, 'num_workers', 8)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "persistent_workers": {
                    "value": "persistent_workers if num_workers > 0 else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DistributedSampler_53": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_initialized_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/diff_aug.py": {
        "torch": {
            "randint_70": {
                "variable": {
                    "value": "translation_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_72": {
                "variable": {
                    "value": "translation_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_75": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(x.size(2), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_80": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + translation_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + translation_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_82": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(x.float(), grid.float(), mode=mode, padding_mode=padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1, 1, 1, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_90": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_92": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_95": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_118": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_131": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(2, 3, device=x.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'reflection'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_embed_129": {
                "input": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * scale_r * torch.rand(batch_size, 2, device=x.device) - scale_r",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_76": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_77": {
                "start": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_78": {
                "start": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_96": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_98": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_48": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_123": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_128": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/distributed.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_17": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_initialized_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_114": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor / world_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/init_weight.py": {
        "torch": {
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/io.py": {
        "torch": {
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/meters.py": {
        "torch": {
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod.weight_u * torch.mv(weight_mat, mod.weight_v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_60": {
                "variable": {
                    "value": "LOG_WRITER",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mv_47": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "sn_reshape_weight_to_matrix(mod.weight_orig)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "mod.weight_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/misc.py": {
        "torch": {
            "eye_231": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_234": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(2, 3, device=x.device).unsqueeze(0).repeat(batch_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_235": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode=mode, padding_mode=padding_mode)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.size())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'reflection'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_floating_point_97": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.to(torch.device(device))",
                            "Call"
                        ],
                        [
                            "data.half()",
                            "Call"
                        ],
                        [
                            "data.float()",
                            "Call"
                        ],
                        [
                            "data.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "data[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_floating_point_115": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.to(torch.device(device))",
                            "Call"
                        ],
                        [
                            "data.half()",
                            "Call"
                        ],
                        [
                            "data.float()",
                            "Call"
                        ],
                        [
                            "data.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "data[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_62": {
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_233": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/model_average.py": {
        "torch": {
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * torch.mv(weight_mat, v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_213": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.sn_reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/trainer.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + get_rank()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + get_rank()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_34": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed + get_rank()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_243": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FusedAdam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Adam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Madam(params, lr=cfg_opt.lr, scale=cfg_opt.scale, g_bound=g_bound)",
                            "Call"
                        ],
                        [
                            "Fromage(params, lr=cfg_opt.lr)",
                            "Call"
                        ],
                        [
                            "RMSprop(params, lr=cfg_opt.lr, eps=cfg_opt.eps, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "FusedSGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "SGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg_opt.lr_policy.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg_opt.lr_policy.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_210": {
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[cfg.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "cfg.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "find_unused_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.trainer.distributed_data_parallel_params.find_unused_parameters",
                            "Attribute"
                        ]
                    ]
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_248": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FusedAdam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Adam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Madam(params, lr=cfg_opt.lr, scale=cfg_opt.scale, g_bound=g_bound)",
                            "Call"
                        ],
                        [
                            "Fromage(params, lr=cfg_opt.lr)",
                            "Call"
                        ],
                        [
                            "RMSprop(params, lr=cfg_opt.lr, eps=cfg_opt.eps, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "FusedSGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "SGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda x: 1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_313": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net.get_param_groups(cfg_opt)",
                            "Call"
                        ],
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg_opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg_opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(cfg_opt.adam_beta1, cfg_opt.adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LambdaLR_264": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FusedAdam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Adam(params, lr=cfg_opt.lr, eps=cfg_opt.eps, betas=(cfg_opt.adam_beta1, cfg_opt.adam_beta2))",
                            "Call"
                        ],
                        [
                            "Madam(params, lr=cfg_opt.lr, scale=cfg_opt.scale, g_bound=g_bound)",
                            "Call"
                        ],
                        [
                            "Fromage(params, lr=cfg_opt.lr)",
                            "Call"
                        ],
                        [
                            "RMSprop(params, lr=cfg_opt.lr, eps=cfg_opt.eps, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "FusedSGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "SGD(params, lr=cfg_opt.lr, momentum=cfg_opt.momentum, weight_decay=cfg_opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda x: sch(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "RMSprop_324": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net.get_param_groups(cfg_opt)",
                            "Call"
                        ],
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg_opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg_opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg_opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_334": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net.get_param_groups(cfg_opt)",
                            "Call"
                        ],
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg_opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg_opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg_opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/visualization/common.py": {
        "torch": {
            "from_numpy_266": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "imaginaire/utils/visualization/face.py": {
        "torch": {
            "cat_365": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels + [torch.from_numpy(label[0]).permute(2, 0, 1).unsqueeze(0)]",
                            "BinOp"
                        ],
                        [
                            "connect_face_keypoints(h, w, None, None, None, None, False, cfgdata, landmarks)",
                            "Call"
                        ],
                        [
                            "[torch.from_numpy(label).permute(2, 0, 1).unsqueeze(0) for label in labels]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_385": {
                "variable": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "label_map.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "ndarray": {
                    "value": "keypoints",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.hstack((keypoints, upper_pts[:, ::-1, :]))",
                            "Call"
                        ],
                        [
                            "data['label'].numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "keypoints[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "smooth_face_keypoints(concat_keypoints, ks)",
                            "Call"
                        ],
                        [
                            "filtered_keypoints[ks // 2:ks // 2 + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_273": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_363": {
                "ndarray": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "connect_face_keypoints(resize_h, resize_w, None, None, None, None, False, cfg, kpt)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_363": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "label[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_168": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_380": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "profile_129": {
                "enabled": {
                    "value": "args.profile",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "profile_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "record_shapes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}