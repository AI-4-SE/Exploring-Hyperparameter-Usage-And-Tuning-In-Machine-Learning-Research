{
    "equideepdmri/layers/BatchNormalization.py": {
        "torch": {
            "cat_156": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fields",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_scalar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "num_scalar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((m for (m, d) in Rs if d == 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_37": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((m for (m, d) in Rs))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_40": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((m for (m, d) in Rs))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "num_scalar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((m for (m, d) in Rs if d == 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "new_means",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "new_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "equideepdmri/layers/EquivariantPQLayer.py": {
        "torch": {
            "linspace_291": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "P_kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_273": {
                "variable": {
                    "value": "self.scalar_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(scalar_bias_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_296": {
                "tensors": {
                    "value": "torch.meshgrid(r, r, r)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_296": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose3d_360": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.type_in.dim * self.Q_in, *P_size_in)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose3d(x, computed_kernel, padding=self.p_padding, stride=self.p_stride, dilation=self.p_dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv3d(x, self.computed_kernel, padding=self.p_padding, stride=self.p_stride, dilation=self.p_dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "x.view(N, self.type_out.dim, self.Q_out, *P_size_out)",
                            "Call"
                        ],
                        [
                            "x.squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "computed_kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.computed_kernel.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.p_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.p_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.p_dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_363": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.type_in.dim * self.Q_in, *P_size_in)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose3d(x, computed_kernel, padding=self.p_padding, stride=self.p_stride, dilation=self.p_dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv3d(x, self.computed_kernel, padding=self.p_padding, stride=self.p_stride, dilation=self.p_dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "x.view(N, self.type_out.dim, self.Q_out, *P_size_out)",
                            "Call"
                        ],
                        [
                            "x.squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.computed_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.p_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.p_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.p_dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_273": {
                "*size": {
                    "value": "scalar_bias_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.type_out.C_l(l=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_296": {
                "*tensors": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1, 1, P_kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1, 1, P_kernel_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "equideepdmri/layers/QLengthWeightedPool.py": {
        "torch": {
            "Parameter_91": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(type_in_out.C, self.radial_basis.basis_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_100": {
                "variable": {
                    "value": "self.computed_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "equation": {
                    "value": "dc,cr,qr->dq",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.channel_mapping_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_129": {
                "equation": {
                    "value": "ndqzyx,dq->ndzyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "type_in_out.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.radial_basis.basis_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/Recomputeable.py": {
        "torch": {}
    },
    "equideepdmri/layers/filter/angular_basis_filters.py": {
        "torch": {
            "einsum_119": {
                "variable": {
                    "value": "kernel_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "kij,xi,xj->xk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "TP",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TP.to_dense().reshape(kernel_type.dim, type_kernel_1.dim, type_kernel_2.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_264": {
                "variable": {
                    "value": "q_vectors_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_schema_out.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_out, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_schema_out.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_out, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_265": {
                "variable": {
                    "value": "q_vectors_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_schema_in.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_in, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_schema_in.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_in, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_274": {
                "variable": {
                    "value": "q_vectors_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_schema_in.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_in, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_schema_in.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_in, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_281": {
                "variable": {
                    "value": "q_vectors_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_schema_out.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_out, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_schema_out.q_vectors",
                            "Attribute"
                        ],
                        [
                            "F.normalize(q_vectors_out, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/filter/combined_filter_kernels.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[kernel_constructor(type_out, type_in, Q_sampling_schema_out, Q_sampling_schema_in, P_diff_vectors, P_kernel_size) for kernel_constructor in kernel_definitions]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "kernel_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kernel() for kernel in self.kernels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[kernel_definition(kernel_type_out, type_in, Q_sampling_schema_out, Q_sampling_schema_in, P_diff_vectors, P_kernel_size) for (kernel_type_out, kernel_definition) in kernel_definitions]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/filter/filter_kernel.py": {
        "torch": {
            "Parameter_118": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(scalar_kernel.scalar_basis_size, self.type_filter.C)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_135": {
                "variable": {
                    "value": "scalar_kernel_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ns,sc->nc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "scalar_kernel_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_kernel()",
                            "Call"
                        ],
                        [
                            "scalar_kernel_tensor.view(-1, self.scalar_basis_size)",
                            "Call"
                        ],
                        [
                            "scalar_kernel_tensor[self.kernel_mask]",
                            "Subscript"
                        ],
                        [
                            "torch.einsum('ns,sc->nc', scalar_kernel_tensor, self.weights / self.scalar_basis_size ** 0.5)",
                            "Call"
                        ],
                        [
                            "self.scalar_kernel()",
                            "Call"
                        ],
                        [
                            "self.scalar_kernel_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_118": {
                "*size": {
                    "value": "scalar_kernel.scalar_basis_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.type_filter.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_308": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C_out * C_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_308": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_310": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "wuv,kij->wkuivj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(C_out * C_in).reshape(C_out, C_in, C_out * C_in).repeat(1, 1, C_f_angular)",
                            "Call"
                        ],
                        [
                            "I / (n_path * C_f_angular) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "C_out * (2 * l_out + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "C_in * (2 * l_in + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_326": {
                "tensors": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_326": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/filter/radial_basis_filters.py": {
        "torch": {
            "ModuleList_182": {
                "variable": {
                    "value": "self.scalar_kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "scalar_kernels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[scalar_kernel_contructor(Q_sampling_schema_out, Q_sampling_schema_in, P_diff_vectors, P_kernel_size) for scalar_kernel_contructor in scalar_kernel_contructors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "einsum_196": {
                "equation": {
                    "value": "self.einsum_formula",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*operands": {
                    "value": "*scalar_kernel_tensors",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_142": {
                "input": {
                    "value": "P_diff_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/filter/radial_basis_functions.py": {
        "torch": {
            "linspace_167": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "basis_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_212": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "min_radius",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "max_radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "basis_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_254": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "basis_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "basis_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_75": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sin_269": {
                "input": {
                    "value": "self.n_scaled * x_within_cutoff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "data": {
                    "value": "torch.randn(num_units, prev_num_units)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_73": {
                "*size": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "prev_num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Name"
                        ],
                        [
                            "num_units",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "equideepdmri/layers/filter/utils.py": {
        "torch": {
            "zeros_105": {
                "variable": {
                    "value": "mapping_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor_type.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_type.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "mapping_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "updated_filter_type.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "original_filter_type.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angular_filter_type.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Y.type.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(2 * l + 1) / math.sqrt(2 * l + 1) for l in Y.type.repeated_ls]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eye_26": {
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_176": {
                "input": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(Y.type.dim)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.ones(2 * l + 1) / math.sqrt(2 * l + 1) for l in Y.type.repeated_ls])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_175": {
                "*size": {
                    "value": "2 * l + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/layers/layer_builders.py": {
        "torch": {
            "Sequential_199": {
                "*args": {
                    "value": "OrderedDict([('conv', conv), ('batch_norm', batch_norm), ('non_linearity', non_linearity)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "OrderedDict([('conv', conv), ('non_linearity', non_linearity)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "*args": {
                    "value": "OrderedDict([('conv', conv), ('batch_norm', batch_norm)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/network/VoxelWiseSegmentationNetwork.py": {
        "torch": {
            "ModuleList_270": {
                "variable": {
                    "value": "self.pq_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pq_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.p_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "p_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_337": {
                "variable": {
                    "value": "dummy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/utils/q_space.py": {
        "torch": {
            "sqrt_67": {
                "variable": {
                    "value": "q_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bvals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "result_q_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.q_vectors.new_zeros(1, 3), non_b0_q_vectors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "result_field",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(combined_b0_channel, non_b0_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "q_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "q_vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(q_vectors)",
                            "Call"
                        ],
                        [
                            "q_lengths.unsqueeze(1) * bvecs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_87": {
                "input": {
                    "value": "self.q_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_40": {
                "input": {
                    "value": "torch.floor(self.q_lengths / radial_basis_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_111": {
                "input": {
                    "value": "schema.q_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_40": {
                "input": {
                    "value": "self.q_lengths / radial_basis_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "equideepdmri/utils/spherical_tensor.py": {
        "torch": {
            "einsum_199": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "f'mk,{einsum_indices_1}k{einsum_indices_2}->{einsum_indices_1}m{einsum_indices_2}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[operator_matrix, self.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_206": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "f'nmk,n{einsum_indices_1[:-1]}k{einsum_indices_2}->n{einsum_indices_1[:-1]}m{einsum_indices_2}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[operator_matrix, self.value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "f'nmk,{einsum_indices_1}k{einsum_indices_2}->n{einsum_indices_1}m{einsum_indices_2}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[operator_matrix, self.value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "example/utils.py": {
        "torch": {
            "tensor_20": {
                "data": {
                    "value": "1 - num_P_voxels / num_total_voxels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "q_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "self.scans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*p_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "self.brain_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*p_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*p_size",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}