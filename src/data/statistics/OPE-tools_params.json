{
    "ope/algos/approximate_model.py": {
        "sklearn": {},
        "torch": {
            "set_detect_anomaly_18": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.n_actions)",
                            "Call"
                        ],
                        [
                            "a[0]",
                            "Subscript"
                        ],
                        [
                            "policy([state])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__84": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ope/algos/dm_regression.py": {
        "sklearn": {},
        "torch": {
            "set_detect_anomaly_19": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_286": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__320": {
                "parameters": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.states(False, i, i + 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(tuple([-1]) + states.shape[2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.states(False, i, i + 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(tuple([-1]) + states.shape[2:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ope/algos/fqe.py": {
        "sklearn": {},
        "torch": {
            "set_detect_anomaly_17": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum([prob * U1[0, new_a] for (new_a, prob) in enumerate(pi_e.predict([0])[0])])",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(-1, np.prod(states.shape[2:]))",
                            "Call"
                        ],
                        [
                            "data.states",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(-1, np.prod(states.shape[2:]))",
                            "Call"
                        ],
                        [
                            "data.states",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "ndarray": {
                    "value": "initial_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Counter(df[df['t'] == 0]['x'])",
                            "Call"
                        ],
                        [
                            "{key: val / total for (key, val) in initial_states.items()}",
                            "DictComp"
                        ],
                        [
                            "data.initial_states()",
                            "Call"
                        ],
                        [
                            "processor(initial_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_286": {
                "ndarray": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_states[batch_idxs].reshape(tuple([-1]) + original_shape[2:])",
                            "Call"
                        ],
                        [
                            "processor(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ope/algos/more_robust_doubly_robust.py": {
        "sklearn": {},
        "torch": {
            "set_detect_anomaly_16": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_embed_95": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_propensity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[5]).float()",
                            "Call"
                        ],
                        [
                            "data.target_propensity().reshape(-1, n_actions)",
                            "Call"
                        ],
                        [
                            "data.target_propensity()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "qbeta_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qbeta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(D, torch.unsqueeze(prediction, 2)) - torch.unsqueeze(rew, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "input": {
                    "value": "qbeta_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(qbeta, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(behavior_propensity.pow(-1)) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "rew",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "behavior_propensity",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "target_propensity",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__105": {
                "parameters": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_embed_94": {
                "input": {
                    "value": "behavior_propensity.pow(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(target_propensity)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(prediction, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_k.predict(states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(-1, np.prod(states.shape[2:]))",
                            "Call"
                        ],
                        [
                            "np.squeeze(data.states(low_=i, high_=i + 1))",
                            "Call"
                        ],
                        [
                            "np.squeeze(data.states(low_=i, high_=i + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ],
                        [
                            "states.reshape(-1, np.prod(states.shape[2:]))",
                            "Call"
                        ],
                        [
                            "np.squeeze(data.states(low_=i, high_=i + 1))",
                            "Call"
                        ],
                        [
                            "np.squeeze(data.states(low_=i, high_=i + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ope/algos/retrace_lambda.py": {
        "sklearn": {},
        "torch": {
            "set_detect_anomaly_16": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__243": {
                "parameters": {
                    "value": "self.Q_k.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[0]).float()",
                            "Call"
                        ],
                        [
                            "data.states()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "initial_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.initial_states()",
                            "Call"
                        ],
                        [
                            "processor(initial_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_362": {
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([mapping[s_] for s_ in s])",
                            "Call"
                        ],
                        [
                            "data.states(low_=traj_num, high_=traj_num + 1)[0, i:]",
                            "Subscript"
                        ],
                        [
                            "processor(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_363": {
                "ndarray": {
                    "value": "sn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([mapping[s_] for s_ in sn])",
                            "Call"
                        ],
                        [
                            "data.next_states(low_=traj_num, high_=traj_num + 1)[0, i:]",
                            "Subscript"
                        ],
                        [
                            "processor(sn)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ope/utls/agent.py": {
        "tensorflow": {
            "InteractiveSession_22": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "paper.py": {
        "tensorflow": {}
    },
    "ope/algos/infinite_horizon.py": {
        "torch": {
            "set_detect_anomaly_23": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_145": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, -10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "input": {
                    "value": "torch.transpose(x, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "K_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-diff_xx.pow(2).sum(list(range(len(diff_xx.shape)))[2:])) / (2.0 * med_dist * med_dist)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "policy_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "is_start",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "med_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_141": {
                "variable": {
                    "value": "w_next",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w_next, -10, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__161": {
                "parameters": {
                    "value": "self.W.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_145": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res.x",
                            "Attribute"
                        ],
                        [
                            "res[0]",
                            "Subscript"
                        ],
                        [
                            "self.W.predict(state)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.clamp(w, -10, 10))",
                            "Call"
                        ],
                        [
                            "np.zeros(self.num_state)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "input": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inp[1]).float()",
                            "Call"
                        ],
                        [
                            "cfg.processor(SN[batch_idxs])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_153": {
                "input": {
                    "value": "-diff_xx.pow(2).sum(list(range(len(diff_xx.shape)))[2:])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "input": {
                    "value": "loss_xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(torch.transpose(x, 0, 1), K_xx), x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_141": {
                "input": {
                    "value": "w_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W.predict(next_state)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.clamp(w_next, -10, 10))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_154": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - is_start) * w * policy_ratio + is_start * norm_w - w_next",
                            "BinOp"
                        ],
                        [
                            "x.view((-1, 1))",
                            "Call"
                        ],
                        [
                            "quadratic_solver(n, G / 50.0, regularizer)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.processor(S[sub])",
                            "Call"
                        ],
                        [
                            "cfg.processor(S[batch_idxs])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ope/models/conv.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.c, 16, (2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.c, 4, (5, 5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.states_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(8, 16, (3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.rewards_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.dones_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_29": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(state)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ELU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "16 * (self.h - 1) * (self.w - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ELU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ELU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "action_space_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "8 * (self.h - 4 - 2) * (self.w - 4 - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Flatten_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "8 * (self.h - 4 - 2) * (self.w - 4 - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_77": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ope/utls/rollout.py": {
        "torch": {
            "set_detect_anomaly_17": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_294": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_295": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__304": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg.to_regress_pi_b['clipnorm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_299": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_w_softmax(states)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_310": {
                "ndarray": {
                    "value": "state[None, None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}