{
    "DCRNet/PythonCodes/Evaluation/multi_channel/Inference.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DCRNet(5)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dcrnet)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_r)",
                            "Call"
                        ],
                        [
                            "image_r.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_i)",
                            "Call"
                        ],
                        [
                            "image_i.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "recons_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_r.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "recons_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "ini_recons_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_r.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "ini_recons_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/Evaluation/multi_channel/Model/DCRNet.py": {
        "torch": {
            "randn_127": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_128": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_132": {
                "input": {
                    "value": "y_r - y_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/Evaluation/multi_channel/Model/DC_layer.py": {
        "torch": {
            "fftshift_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ifftshift_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.WF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "k0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k0_r, k0_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_r, x_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "view_as_complex_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_52": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IFFT2D(x)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(k).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_60": {
                "variable": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT2D(out)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(x_res).contiguous()",
                            "Call"
                        ],
                        [
                            "x_res.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft2_11": {
                "input": {
                    "value": "FFT.fftshift(x, dim=(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft2_14": {
                "input": {
                    "value": "FFT.ifftshift(x, dim=(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_res[:, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/Evaluation/single_channel/Inference.py": {
        "torch": {
            "DataParallel_34": {
                "variable": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DCRNet(5)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dcrnet)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_r)",
                            "Call"
                        ],
                        [
                            "image_r.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_i)",
                            "Call"
                        ],
                        [
                            "image_i.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_r)",
                            "Call"
                        ],
                        [
                            "k0_r.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_i)",
                            "Call"
                        ],
                        [
                            "k0_i.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "recons_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_r.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "recons_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "ini_recons_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_r.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "ini_recons_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "INPUT_k_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_k_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k0_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_k_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "INPUT_k_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_k_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k0_r[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_r, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_k_r.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_109": {
                "variable": {
                    "value": "INPUT_k_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_k_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k0_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_k_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "variable": {
                    "value": "INPUT_k_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "INPUT_k_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k0_i[:, :, j]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(INPUT_k_i, 0)",
                            "Call"
                        ],
                        [
                            "INPUT_k_i.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "ini_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ini_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(ini_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(ini_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "ini_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ini_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(ini_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(ini_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "ini_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ini_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(ini_r, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(ini_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "ini_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ini_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(ini_i, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(ini_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_37": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/Evaluation/single_channel/Model/DCRNet.py": {
        "torch": {
            "randn_126": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_127": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_131": {
                "input": {
                    "value": "y_r - y_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/Evaluation/single_channel/Model/DC_layer.py": {
        "torch": {
            "fftshift_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ifftshift_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.WF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "k0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k0_r, k0_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_r, x_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "view_as_complex_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_52": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IFFT2D(x)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(k).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_60": {
                "variable": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT2D(out)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(x_res).contiguous()",
                            "Call"
                        ],
                        [
                            "x_res.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft2_11": {
                "input": {
                    "value": "FFT.fftshift(x, dim=(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft2_14": {
                "input": {
                    "value": "FFT.ifftshift(x, dim=(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_res[:, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/training/Model/DCRNet.py": {
        "torch": {
            "randn_126": {
                "variable": {
                    "value": "x_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_127": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.midLayers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_131": {
                "input": {
                    "value": "y_r - y_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/training/Model/DC_layer.py": {
        "torch": {
            "fft2_11": {
                "input": {
                    "value": "FFT.fftshift(x, dim=(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifftshift_14": {
                "input": {
                    "value": "FFT.ifft2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.WF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "k0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k0_r, k0_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_r, x_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "view_as_complex_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_52": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IFFT2D(x)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(k).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_60": {
                "variable": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT2D(out)",
                            "Call"
                        ],
                        [
                            "torch.view_as_real(x_res).contiguous()",
                            "Call"
                        ],
                        [
                            "x_res.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ifft2_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_r, x_i], dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_res[:, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/training/TrainDCRNet.py": {
        "torch": {
            "MSELoss_43": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduce": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_44": {
                "variable": {
                    "value": "criterion2",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dcrnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_46": {
                "variable": {
                    "value": "scheduler2",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(dcrnet.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[40, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "dcrnet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./DCRNet_AF4_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_34": {
                "obj": {
                    "value": "dcrnet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'DCRNet_AF4_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dcrnet",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DCRNet(5)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(dcrnet)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DCRNet/PythonCodes/training/TrainingDataLoader.py": {
        "torch": {
            "numel_132": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.Prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "self.SNRs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[60, 40, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "label_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(label)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_r)",
                            "Call"
                        ],
                        [
                            "label_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label_r, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "label_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(label)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_i)",
                            "Call"
                        ],
                        [
                            "label_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label_i, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_68": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_r)",
                            "Call"
                        ],
                        [
                            "image_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image_r, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_i)",
                            "Call"
                        ],
                        [
                            "image_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image_i, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_r)",
                            "Call"
                        ],
                        [
                            "k0_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(k0_r, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_i)",
                            "Call"
                        ],
                        [
                            "k0_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(k0_i, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(self.Mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_r)",
                            "Call"
                        ],
                        [
                            "image_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "label_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(label)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_r)",
                            "Call"
                        ],
                        [
                            "label_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image_i)",
                            "Call"
                        ],
                        [
                            "image_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "label_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(label)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_i)",
                            "Call"
                        ],
                        [
                            "label_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "variable": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k0_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_r)",
                            "Call"
                        ],
                        [
                            "k0_r.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(k0_r, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "variable": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k0_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.imag(k0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(k0_i)",
                            "Call"
                        ],
                        [
                            "k0_i.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(k0_i, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.real(self.Mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_134": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_71": {
                "variable": {
                    "value": "tmp_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_128": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_128": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/DataFidelityVersion/Inference.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ],
                        [
                            "Unet_chi.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ],
                        [
                            "Unet_lfs.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['TE']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "TE.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['B0']",
                            "Subscript"
                        ],
                        [
                            "np.array(B0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(B0)",
                            "Call"
                        ],
                        [
                            "B0.float()",
                            "Call"
                        ],
                        [
                            "B0.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_part_WithDataFideility.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_part_WithDataFideility.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_part_WithDataFideility.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_part_WithDataFideility.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/DataFidelityVersion/Unet.py": {
        "torch": {
            "max_pool3d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/DataFidelityVersion/Unet_blocks.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_18": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_94": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_95": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_89": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/Inference.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ],
                        [
                            "Unet_chi.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ],
                        [
                            "Unet_lfs.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['TE']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "TE.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['B0']",
                            "Subscript"
                        ],
                        [
                            "np.array(B0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(B0)",
                            "Call"
                        ],
                        [
                            "B0.float()",
                            "Call"
                        ],
                        [
                            "B0.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_UnetPart.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_UnetPart.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_UnetPart.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_UnetPart.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/Inference_16Learnable_noise_DF.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "LoT_Layer_iQSM",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LoT_Layer_iQSM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LoTLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LoT_Layer_iQSM)",
                            "Call"
                        ],
                        [
                            "LoT_Layer_iQSM.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "kernels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kernel_x, kernel_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "LoT_Layer_iQFM",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LoT_Layer_iQFM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LoTLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LoT_Layer_iQFM)",
                            "Call"
                        ],
                        [
                            "LoT_Layer_iQFM.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "kernels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kernel_x, kernel_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ],
                        [
                            "Unet_chi.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ],
                        [
                            "Unet_lfs.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['TE']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "TE.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['B0']",
                            "Subscript"
                        ],
                        [
                            "np.array(B0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(B0)",
                            "Call"
                        ],
                        [
                            "B0.float()",
                            "Call"
                        ],
                        [
                            "B0.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_193": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_199": {
                "variable": {
                    "value": "tmp_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(tmp_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tmp_lfs, 0)",
                            "Call"
                        ],
                        [
                            "tmp_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "tmp_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "variable": {
                    "value": "tmp_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(tmp_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tmp_lfs, 0)",
                            "Call"
                        ],
                        [
                            "tmp_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "tmp_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_201": {
                "variable": {
                    "value": "tmp_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(tmp_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tmp_chi, 0)",
                            "Call"
                        ],
                        [
                            "tmp_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "tmp_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "variable": {
                    "value": "tmp_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(tmp_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tmp_chi, 0)",
                            "Call"
                        ],
                        [
                            "tmp_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "tmp_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_chi_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_lfs_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iQSM_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iTFE_100.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_93": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_chi_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_lfs_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iQSM_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iTFE_100.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_110": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_chi_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_lfs_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iQSM_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iTFE_100.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_117": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_chi_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/LPLayer_lfs_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iQSM_100.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/HemoCal_QL_16learnabel_DF_noiselayer/iTFE_100.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/LearnableLapLayer/Inference.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]], [[3 / 26, 3 / 13, 3 / 26], [3 / 13, -44 / 13, 3 / 13], [3 / 26, 3 / 13, 3 / 26]], [[1 / 13, 3 / 26, 1 / 13], [3 / 26, 3 / 13, 3 / 26], [1 / 13, 3 / 26, 1 / 13]]]",
                            "List"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "LoT_Layer_iQSM",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LoT_Layer_iQSM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LoTLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LoT_Layer_iQSM)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_63": {
                "variable": {
                    "value": "LoT_Layer_iQFM",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LoT_Layer_iQFM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LoTLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LoT_Layer_iQFM)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['phase']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['mask']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "mask.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['TE']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "TE.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "B0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matImage['B0']",
                            "Subscript"
                        ],
                        [
                            "np.array(B0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(B0)",
                            "Call"
                        ],
                        [
                            "B0.float()",
                            "Call"
                        ],
                        [
                            "B0.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQFM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_lfs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_lfs, 0)",
                            "Call"
                        ],
                        [
                            "pred_lfs.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iQSM(image, mask, TE, B0)",
                            "Call"
                        ],
                        [
                            "pred_chi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_chi, 0)",
                            "Call"
                        ],
                        [
                            "pred_chi.to('cpu')",
                            "Call"
                        ],
                        [
                            "pred_chi.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_67": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_75": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_LoTPart_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQSM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.expanduser(CheckpointsPath) + '/iQFM_Unet_Part_LearnableLoTLayer.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/LearnableLapLayer/Unet.py": {
        "torch": {
            "max_pool3d_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_b, x_d], dim=1)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/LearnableLapLayer/Unet_blocks.py": {
        "torch": {
            "from_numpy_126": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.conv_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x.repeat([15, 1, 1, 1, 1]).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_18": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_19": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_64": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_65": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_108": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_111": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_96": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_97": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_102": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_103": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/Unet.py": {
        "torch": {
            "max_pool3d_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_b, x_d], dim=1)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Evaluation/Unet_blocks.py": {
        "torch": {
            "from_numpy_126": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.conv_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x.repeat([15, 1, 1, 1, 1]).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_18": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_19": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_64": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_65": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_108": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_111": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_96": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_97": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_102": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_103": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQFM/TrainiQFM.py": {
        "torch": {
            "MSELoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_chi.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_53": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_chi.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQFM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQFM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_63": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LapLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LPLayer)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQFM/TrainingDataLoad.py": {
        "torch": {
            "numel_141": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_142": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_56": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_143": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_137": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQFM/Unet.py": {
        "torch": {
            "max_pool3d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQFM/Unet_blocks.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_18": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_94": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_95": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_89": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM/TrainiQSM.py": {
        "torch": {
            "MSELoss_36": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_chi.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_53": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_chi.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQSM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQSM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_63": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LapLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LPLayer)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM/TrainingDataLoad.py": {
        "torch": {
            "numel_141": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_142": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_56": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_143": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_137": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM/Unet.py": {
        "torch": {
            "max_pool3d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM/Unet_blocks.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_18": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_94": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_95": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_89": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM_iQFM_with_DataFidelity/TrainiQFM_and_iQSM.py": {
        "torch": {
            "MSELoss_40": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_chi.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_43": {
                "variable": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_lfs.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "D.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_64": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_chi.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_65": {
                "variable": {
                    "value": "scheduler2",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_lfs.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQSM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_28": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQSM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQFM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQFM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LPLayer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LapLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LPLayer)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM_iQFM_with_DataFidelity/TrainingDataLoad.py": {
        "torch": {
            "numel_161": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_163": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_101": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_157": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM_iQFM_with_DataFidelity/Unet.py": {
        "torch": {
            "max_pool3d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM_iQFM_with_DataFidelity/Unet_blocks.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_18": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_48": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_49": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_51": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_94": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_95": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_89": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/FixedLapLayer/TrainiQSM_iQFM_with_DataFidelity/utility.py": {
        "torch": {
            "sum_10": {
                "variable": {
                    "value": "TV_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, 1:, :, :] - x[:, :, :-1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "TV_L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, :, 1:, :] - x[:, :, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "TV_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, :, :, 1:] - x[:, :, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_23": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(chi, (32, 32, 32, 32, 32, 32), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(32, 32, 32, 32, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fftn_27": {
                "variable": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(chi, (32, 32, 32, 32, 32, 32), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ifftn_31": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT.fftn(chi, dim=(-3, -2, -1))",
                            "Call"
                        ],
                        [
                            "x_k * Dipole",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "real_33": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT.ifftn(x_k, dim=(-3, -2, -1))",
                            "Call"
                        ],
                        [
                            "torch.real(x_img)",
                            "Call"
                        ],
                        [
                            "x_img[:, :, 32:32 + H, 32:32 + L, 32:32 + D]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "chi.size(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataFidelity(image, D)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataFidelity(image, D)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_10": {
                "input": {
                    "value": "x[:, :, 1:, :, :] - x[:, :, :-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_11": {
                "input": {
                    "value": "x[:, :, :, 1:, :] - x[:, :, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_12": {
                "input": {
                    "value": "x[:, :, :, :, 1:] - x[:, :, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "chi.size(4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/LearnableLapLayer_Version_FutureStudy/TrainiQFM_and_iQSM_16c.py": {
        "torch": {
            "MSELoss_46": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_chi.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Unet_lfs.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_52": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_chi.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_53": {
                "variable": {
                    "value": "scheduler2",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Unet_lfs.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "D.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "LPLayer_chi.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_72": {
                "variable": {
                    "value": "scheduler3",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(LPLayer_chi.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer4",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "LPLayer_lfs.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_76": {
                "variable": {
                    "value": "scheduler4",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(LPLayer_lfs.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQSM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_28": {
                "obj": {
                    "value": "Unet_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQSM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./iQFM_UnetPart_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "Unet_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./iQFM_UnetPart_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "LPLayer_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./LPLayer_chi_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_34": {
                "obj": {
                    "value": "LPLayer_chi.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./LPLayer_chi_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_36": {
                "obj": {
                    "value": "LPLayer_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./LPLayer_lfs_final.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_37": {
                "obj": {
                    "value": "LPLayer_lfs.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./LPLayer_lfs_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Unet_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unet(4, 16, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Unet_lfs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_90": {
                "variable": {
                    "value": "LPLayer_chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LPLayer_chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LapLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LPLayer_chi)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_93": {
                "variable": {
                    "value": "LPLayer_lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LPLayer_lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LapLayer(conv_op)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(LPLayer_lfs)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/LearnableLapLayer_Version_FutureStudy/TrainingDataLoad.py": {
        "torch": {
            "numel_161": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_163": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_101": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph)",
                            "Call"
                        ],
                        [
                            "wph.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE)",
                            "Call"
                        ],
                        [
                            "TE.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi_hemo)",
                            "Call"
                        ],
                        [
                            "chi_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs_hemo)",
                            "Call"
                        ],
                        [
                            "lfs_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wph_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matWph['wph_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(wph_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wph_hemo)",
                            "Call"
                        ],
                        [
                            "wph_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(wph_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['Mask_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_hemo)",
                            "Call"
                        ],
                        [
                            "mask_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TE_hemo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTE['TE_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(TE_hemo)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(TE_hemo)",
                            "Call"
                        ],
                        [
                            "TE_hemo.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(TE_hemo, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_157": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/LearnableLapLayer_Version_FutureStudy/Unet.py": {
        "torch": {
            "max_pool3d_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_b, x_d], dim=1)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ],
                        [
                            "x + Input",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/LearnableLapLayer_Version_FutureStudy/Unet_blocks.py": {
        "torch": {
            "from_numpy_126": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LGOP['LM']",
                            "Subscript"
                        ],
                        [
                            "np.array(conv_op)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(conv_op)",
                            "Call"
                        ],
                        [
                            "conv_op.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(conv_op, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matMask['BET_mask_ero']",
                            "Subscript"
                        ],
                        [
                            "np.array(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['wph_sim']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.conv_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_x.repeat([15, 1, 1, 1, 1]).clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_18": {
                "variable": {
                    "value": "expPhi_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_19": {
                "variable": {
                    "value": "expPhi_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv3d_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_62": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_64": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_65": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_108": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_111": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_96": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_97": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_102": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_103": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iQSM/PythonCodes/Training/LearnableLapLayer_Version_FutureStudy/utility.py": {
        "torch": {
            "sum_10": {
                "variable": {
                    "value": "TV_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, 1:, :, :] - x[:, :, :-1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "variable": {
                    "value": "TV_L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, :, 1:, :] - x[:, :, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "TV_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:, :, :, :, 1:] - x[:, :, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_23": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(chi, (32, 32, 32, 32, 32, 32), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(32, 32, 32, 32, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fftn_27": {
                "variable": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(chi, (32, 32, 32, 32, 32, 32), 'constant', 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ifftn_31": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT.fftn(chi, dim=(-3, -2, -1))",
                            "Call"
                        ],
                        [
                            "x_k * Dipole",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "real_33": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FFT.ifftn(x_k, dim=(-3, -2, -1))",
                            "Call"
                        ],
                        [
                            "torch.real(x_img)",
                            "Call"
                        ],
                        [
                            "x_img[:, :, 32:32 + H, 32:32 + L, 32:32 + D]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matTest['test']",
                            "Subscript"
                        ],
                        [
                            "np.array(image)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "chi.size(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataFidelity(image, D)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataFidelity(image, D)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lfs, 0)",
                            "Call"
                        ],
                        [
                            "lfs.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_10": {
                "input": {
                    "value": "x[:, :, 1:, :, :] - x[:, :, :-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_11": {
                "input": {
                    "value": "x[:, :, :, 1:, :] - x[:, :, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_12": {
                "input": {
                    "value": "x[:, :, :, :, 1:] - x[:, :, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matD['D']",
                            "Subscript"
                        ],
                        [
                            "np.array(D)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ],
                        [
                            "D.float()",
                            "Call"
                        ],
                        [
                            "chi.size(4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "xQSM/python/Unet.py": {
        "torch": {
            "max_pool3d_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 1, 48, 48, 48, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "temp_conv(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool3d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.MidConv1(x)",
                            "Call"
                        ],
                        [
                            "temp_conv(x, x2)",
                            "Call"
                        ],
                        [
                            "self.FinalConv(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/Unet_blocks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.EncodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_in, num_out, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.MidConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(num_ch, 2 * num_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.DecodeConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(2 * num_in, num_in, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(num_in, num_in, 2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_11": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_12": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_14": {
                "in_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_15": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_28": {
                "in_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_29": {
                "num_features": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_31": {
                "in_channels": {
                    "value": "2 * num_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_32": {
                "num_features": {
                    "value": "num_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "in_channels": {
                    "value": "2 * num_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_60": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "num_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_46": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm3d_47": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_52": {
                "in_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_53": {
                "num_features": {
                    "value": "num_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/eval/run_demo.py": {
        "torch": {
            "squeeze_93": {
                "variable": {
                    "value": "Recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Net(Field)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(Recon, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(Recon, 0)",
                            "Call"
                        ],
                        [
                            "Recon.to('cpu')",
                            "Call"
                        ],
                        [
                            "Recon.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "Recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Net(Field)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(Recon, 0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(Recon, 0)",
                            "Call"
                        ],
                        [
                            "Recon.to('cpu')",
                            "Call"
                        ],
                        [
                            "Recon.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Field)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "Field.float()",
                            "Call"
                        ],
                        [
                            "tmp_Field",
                            "Name"
                        ],
                        [
                            "Field[pos_init[1]:pos_end[1], pos_init[2]:pos_end[2], pos_init[3]:pos_end[3]]",
                            "Subscript"
                        ],
                        [
                            "Field.to(device)",
                            "Call"
                        ],
                        [
                            "nibField.get_fdata()",
                            "Call"
                        ],
                        [
                            "np.array(Field)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_142": {
                "variable": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Field)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "Field.float()",
                            "Call"
                        ],
                        [
                            "tmp_Field",
                            "Name"
                        ],
                        [
                            "Field[pos_init[1]:pos_end[1], pos_init[2]:pos_end[2], pos_init[3]:pos_end[3]]",
                            "Subscript"
                        ],
                        [
                            "Field.to(device)",
                            "Call"
                        ],
                        [
                            "nibField.get_fdata()",
                            "Call"
                        ],
                        [
                            "np.array(Field)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Field",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(Field)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(Field, 0)",
                            "Call"
                        ],
                        [
                            "Field.float()",
                            "Call"
                        ],
                        [
                            "tmp_Field",
                            "Name"
                        ],
                        [
                            "Field[pos_init[1]:pos_end[1], pos_init[2]:pos_end[2], pos_init[3]:pos_end[3]]",
                            "Subscript"
                        ],
                        [
                            "Field.to(device)",
                            "Call"
                        ],
                        [
                            "nibField.get_fdata()",
                            "Call"
                        ],
                        [
                            "np.array(Field)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_62": {
                "variable": {
                    "value": "Net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xQSM(2)",
                            "Call"
                        ],
                        [
                            "Unet(2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Net)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NetName + '.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "model_weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NetName + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "xQSM/python/eval/utils.py": {
        "torch": {
            "Tensor_15": {
                "variable": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "variable": {
                    "value": "mu1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "variable": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size).contiguous())",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/trainingCode_for_mat/TrainPh2QSMNet.py": {
        "torch": {
            "MSELoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Chi_Net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_39": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Chi_Net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "Chi_Net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./ChiNet_Latest.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Chi_Net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./ChiNet_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "Chi_Net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Chi_Net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xQSM(2, 64)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Chi_Net)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/trainingCode_for_mat/TrainingDataLoad.py": {
        "torch": {
            "numel_88": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "self.Prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.SNRs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[50, 40, 20, 10, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "AddNoise(lfs, tmp_SNR)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_68": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matchi['chi_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matlfs['lfs_patch']",
                            "Subscript"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "AddNoise(lfs, tmp_SNR)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_90": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_72": {
                "variable": {
                    "value": "tmp_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "input": {
                    "value": "noisePower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigPower / SNR",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_84": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/trainingCode_for_mat/xQSM_blocks.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_h1, x_h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l1, x_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_63": {
                "variable": {
                    "value": "self.up_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_65": {
                "variable": {
                    "value": "self.up_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.BN_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_69": {
                "variable": {
                    "value": "self.up_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_71": {
                "variable": {
                    "value": "self.up_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_73": {
                "variable": {
                    "value": "self.BN_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_104": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_106": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_108": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_109": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_150": {
                "variable": {
                    "value": "y_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_116": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_118": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_120": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_121": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_123": {
                "variable": {
                    "value": "self.FinalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_129": {
                "variable": {
                    "value": "self.convLL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_131": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_133": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_135": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_137": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_138": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_140": {
                "variable": {
                    "value": "self.BN_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_141": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_179": {
                "variable": {
                    "value": "y_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/training_code_for_nii/TrainPh2QSMNet.py": {
        "torch": {
            "MSELoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Chi_Net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_39": {
                "variable": {
                    "value": "scheduler1",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Chi_Net.parameters())",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "Chi_Net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./ChiNet_Latest.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "Chi_Net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./ChiNet_%s.pth' % epo",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "Chi_Net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Chi_Net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xQSM(2, 64)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(Chi_Net)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/training_code_for_nii/TrainingDataLoad.py": {
        "torch": {
            "numel_86": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ins ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DataSet(DATA_DIRECTORY, DATA_LIST_PATH)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.Prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "self.SNRs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[50, 40, 20, 10, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "niblabel.get_data()",
                            "Call"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nibimage.get_data()",
                            "Call"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "AddNoise(lfs, tmp_SNR)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_66": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "niblabel.get_data()",
                            "Call"
                        ],
                        [
                            "np.array(chi)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(chi)",
                            "Call"
                        ],
                        [
                            "chi.float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(chi, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nibimage.get_data()",
                            "Call"
                        ],
                        [
                            "np.array(lfs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lfs)",
                            "Call"
                        ],
                        [
                            "lfs.float()",
                            "Call"
                        ],
                        [
                            "AddNoise(lfs, tmp_SNR)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(lfs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_88": {
                "input": {
                    "value": "tmp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(ins ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.numel(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_70": {
                "variable": {
                    "value": "tmp_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "input": {
                    "value": "noisePower.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_82": {
                "*size": {
                    "value": "ins.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/training/training_code_for_nii/xQSM_blocks.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_h1, x_h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l1, x_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_63": {
                "variable": {
                    "value": "self.up_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_65": {
                "variable": {
                    "value": "self.up_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.BN_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_69": {
                "variable": {
                    "value": "self.up_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_71": {
                "variable": {
                    "value": "self.up_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_73": {
                "variable": {
                    "value": "self.BN_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_104": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_106": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_108": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_109": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_150": {
                "variable": {
                    "value": "y_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_116": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_118": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_120": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_121": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_123": {
                "variable": {
                    "value": "self.FinalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_129": {
                "variable": {
                    "value": "self.convLL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_131": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_133": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_135": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_137": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_138": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_140": {
                "variable": {
                    "value": "self.BN_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_141": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_179": {
                "variable": {
                    "value": "y_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "xQSM/python/xQSM_blocks.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_h1, x_h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l1, x_l2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_63": {
                "variable": {
                    "value": "self.up_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_65": {
                "variable": {
                    "value": "self.up_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.BN_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_69": {
                "variable": {
                    "value": "self.up_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_71": {
                "variable": {
                    "value": "self.up_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_73": {
                "variable": {
                    "value": "self.BN_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_104": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_106": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_108": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_109": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_150": {
                "variable": {
                    "value": "y_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_114": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_116": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_118": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_120": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_121": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_123": {
                "variable": {
                    "value": "self.FinalConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self.convHH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_129": {
                "variable": {
                    "value": "self.convLL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_131": {
                "variable": {
                    "value": "self.convHL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_133": {
                "variable": {
                    "value": "self.convLH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.In_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_135": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "hasbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_137": {
                "variable": {
                    "value": "self.BN_HH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_138": {
                "variable": {
                    "value": "self.BN_LH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.ReLU_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_140": {
                "variable": {
                    "value": "self.BN_LL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_141": {
                "variable": {
                    "value": "self.BN_HL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.Out_L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.ReLU_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool3d_179": {
                "variable": {
                    "value": "y_l2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([x_h1, x_h2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}