{
    "meercat/baseline.py": {
        "sklearn": {
            "linear_kernel_35": {
                "variable": {
                    "value": "mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mention_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['bigram'].transform(mentions)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "mention_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['bigram'].transform(mentions)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_kernel_38": {
                "variable": {
                    "value": "context_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "context_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['context'].transform(contexts)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "context_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['context'].transform(contexts)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "meercat/combo.py": {
        "sklearn": {
            "linear_kernel_33": {
                "variable": {
                    "value": "mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mention_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['bigram'].transform(mentions)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "mention_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectorizers['bigram'].transform(mentions)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_37": {
                "variable": {
                    "value": "context_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embeddings.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/fit_vectorizer.py": {
        "sklearn": {
            "TfidfVectorizer_20": {
                "variable": {
                    "value": "bigram_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_22": {
                "variable": {
                    "value": "context_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "meercat/cut_tree.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings)",
                            "Call"
                        ],
                        [
                            "load_embeddings(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dot_72": {
                "input": {
                    "value": "left_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.children[0].embedding / node.children[0].n_leaves",
                            "BinOp"
                        ],
                        [
                            "left_embedding / torch.norm(left_embedding)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "right_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.children[1].embedding / node.children[1].n_leaves",
                            "BinOp"
                        ],
                        [
                            "right_embedding / torch.norm(right_embedding)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_70": {
                "input": {
                    "value": "left_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.children[0].embedding / node.children[0].n_leaves",
                            "BinOp"
                        ],
                        [
                            "left_embedding / torch.norm(left_embedding)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_71": {
                "input": {
                    "value": "right_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node.children[1].embedding / node.children[1].n_leaves",
                            "BinOp"
                        ],
                        [
                            "right_embedding / torch.norm(right_embedding)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "meercat/embed.py": {
        "torch": {
            "device_91": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "mention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/encode_mentions.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entity_tokenizer.counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ELIterableDataset(fname=args.input, tokenizer=tokenizer, entity_tokenizer=entity_tokenizer, rank=args.local_rank, world_size=world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "true_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "true_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(true_clusters, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_88": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MentionEncoderModel.from_pretrained(args.model_name, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/encode_w_blink.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x['ids'] for x in processed_samples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SequentialSampler_77": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_63": {
                "*tensors": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/models/modeling_mention_encoder.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.context_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.entity_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_52": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_projection(pooled_output)",
                            "Call"
                        ],
                        [
                            "F.normalize(context_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "context_embedding",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "meercat/models/modeling_relic.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.context_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.entity_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.scaling_constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.entity_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.entity_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.entity_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_67": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_projection(pooled_output)",
                            "Call"
                        ],
                        [
                            "F.normalize(context_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "context_embedding",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels.unsqueeze(-1), *negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "entity_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entity_embeddings(indices)",
                            "Call"
                        ],
                        [
                            "entity_embeddings.to(input_ids.device)",
                            "Call"
                        ],
                        [
                            "F.normalize(entity_embeddings, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_133": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.scaling_constant * torch.einsum('bd,bsd->bs', context_embedding, entity_embeddings)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randint_89": {
                "variable": {
                    "value": "random_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.entity_embeddings.num_embeddings",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(labels.size(0), num_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_98": {
                "variable": {
                    "value": "random_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "counts.unsqueeze(0).repeat((labels.size(0), 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper_bound",
                            "variable"
                        ],
                        [
                            "self.random_negatives",
                            "Attribute"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_113": {
                "equation": {
                    "value": "bd,bsd->bs",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_projection(pooled_output)",
                            "Call"
                        ],
                        [
                            "F.normalize(context_embedding, dim=-1)",
                            "Call"
                        ],
                        [
                            "context_embedding",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "meercat/nn_thresh.py": {
        "torch": {
            "zeros_like_141": {
                "variable": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_148": {
                "variable": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_170": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "embeddings / torch.norm(embeddings, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "entity_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entity_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(entity_ids, dtype=torch.int64, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.clone().detach()",
                            "Call"
                        ],
                        [
                            "row.clone().detach()",
                            "Call"
                        ],
                        [
                            "row.clone().detach()",
                            "Call"
                        ],
                        [
                            "row.clone().detach()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "self._last_seen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "self._last_seen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_55": {
                "variable": {
                    "value": "removal_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row[:self._i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmin_74": {
                "variable": {
                    "value": "removal_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._last_seen[:self._i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_115": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "embeddings / torch.norm(embeddings, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embeddings.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_173": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(embeddings, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "embeddings / torch.norm(embeddings, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "removal_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row[:self._i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmin_97": {
                "variable": {
                    "value": "removal_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._last_seen[:self._i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/train_el.py": {
        "torch": {
            "tensor_71": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entity_tokenizer.counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ELIterableDataset(fname=args.train, tokenizer=tokenizer, entity_tokenizer=entity_tokenizer, rank=args.local_rank, world_size=world_size, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ELIterableDataset(fname=args.dev, tokenizer=tokenizer, entity_tokenizer=entity_tokenizer, rank=args.local_rank, world_size=world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.ELIterableDataset(fname=args.test, tokenizer=tokenizer, entity_tokenizer=entity_tokenizer, rank=args.local_rank, world_size=world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_141": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "args.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embeddings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "true_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "true_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(true_clusters, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RelicModel.from_pretrained(args.model_name, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_143": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_172": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_207": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_167": {
                "enabled": {
                    "value": "args.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/train_me.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.APIterableDataset.load(fname=args.train, tokenizer=tokenizer, rank=args.local_rank, world_size=world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "dev_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.APIterableDataset.load(fname=args.dev, tokenizer=tokenizer, rank=args.local_rank, world_size=world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_117": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "enabled": {
                    "value": "args.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_87": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MentionEncoderModel.from_pretrained(args.model_name, config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_119": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_36": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_42": {
                "variable": {
                    "value": "embedding_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "2 * args.local_rank + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_145": {
                "variable": {
                    "value": "pos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_1_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**pos_1)",
                            "Call"
                        ],
                        [
                            "model(**pos_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_146": {
                "variable": {
                    "value": "neg_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_1_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**pos_1)",
                            "Call"
                        ],
                        [
                            "model(**pos_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:1')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', 2 * args.local_rank + 1)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_187": {
                "variable": {
                    "value": "pos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_1_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**pos_1)",
                            "Call"
                        ],
                        [
                            "model(**pos_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_188": {
                "variable": {
                    "value": "neg_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_1_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**pos_1)",
                            "Call"
                        ],
                        [
                            "model(**pos_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_141": {
                "enabled": {
                    "value": "args.fp16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meercat/utils.py": {
        "torch": {}
    },
    "tests/embed_test.py": {
        "torch": {}
    },
    "tests/nn_thresh_test.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [0, 1], [1, 0], [1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_18": {
                "input": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_thresh.cluster(example, threshold=0.5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/relic_test.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}