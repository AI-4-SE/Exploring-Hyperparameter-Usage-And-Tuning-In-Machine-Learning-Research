{
    "dataset/base_dataset.py": {
        "torch": {}
    },
    "dataset/dataset.py": {
        "torch": {
            "ConcatDataset_83": {
                "variable": {
                    "value": "mixtrainset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[source_dataset, target_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "mix_trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mixtrainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ConcatDataset([source_dataset, target_dataset])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "BaseDataSet(source_env.data_dir, source_list, cfg.source, cfg.num_classes, max_iters=cfg.num_steps * cfg.batch_size, joint_transform=source_joint_transform, transform=train_transform, label_transform=label_transform, set='train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "targetloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "BaseDataSet(env.data_dir, data_list, dataset_name, config.num_classes, joint_transform=joint_transform, transform=train_transform, label_transform=label_transform, max_prop=max_prop, selected=selected, set=set)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/transforms.py": {
        "torch": {
            "from_numpy_137": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img[0]",
                            "Subscript"
                        ],
                        [
                            "img[0]",
                            "Subscript"
                        ],
                        [
                            "np.array(img)[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "np.asarray(img, np.float32)",
                            "Call"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.asarray(img, np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "img / self.std",
                            "BinOp"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.array(img, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "np.array(wei, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "Upsample_40": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "pred_e",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "C - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_57": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, C - 1, steps=C).view(C, 1, 1)",
                            "Call"
                        ],
                        [
                            "pred_e.repeat(1, H, W).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.argmax(dim=0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_60": {
                "variable": {
                    "value": "label_e",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "C - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_63": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, C - 1, steps=C).view(C, 1, 1)",
                            "Call"
                        ],
                        [
                            "label_e.repeat(1, H, W).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_96": {
                "f": {
                    "value": "args.frm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(cfg['snapshot'], args.frm, 'GTA5_{0:d}.pth'.format(i * 2000))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "init_config.py": {
        "torch": {
            "SummaryWriter_78": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "config.tb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/DeeplabV2.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_173": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer5(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x1, (H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(dilation_series, padding_series)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "model/model_builder.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.init_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "model/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "so_run.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/base_trainer.py": {
        "torch": {
            "Upsample_63": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, 2048)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.config['snapshot'], tmp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_76": {
                "variable": {
                    "value": "pred_e",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "C - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_79": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, C - 1, steps=C).view(C, 1, 1)",
                            "Call"
                        ],
                        [
                            "pred_e.repeat(1, H, W).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.argmax(dim=0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_82": {
                "variable": {
                    "value": "label_e",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "C - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_85": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, C - 1, steps=C).view(C, 1, 1)",
                            "Call"
                        ],
                        [
                            "label_e.repeat(1, H, W).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "class13_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iou[:3], iou[6:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/ccm_trainer.py": {
        "torch": {
            "softmax_29": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(p, dim=1)",
                            "Call"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(p, dim=1)",
                            "Call"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_40": {
                "variable": {
                    "value": "loss_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(img_s.cuda())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_s.long().cuda()",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "self.target_his_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self.target_his_h.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "self.target_his_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self.target_his_w.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_295": {
                "variable": {
                    "value": "hists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hists",
                            "variable"
                        ],
                        [
                            "hist.squeeze()",
                            "Call"
                        ],
                        [
                            "hist",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p1.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_302": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(result)",
                            "Call"
                        ],
                        [
                            "result.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_310": {
                "variable": {
                    "value": "wei",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda().squeeze()",
                            "Call"
                        ],
                        [
                            "pred.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_373": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1 + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_374": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2 + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_387": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1 + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_388": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2 + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_80": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.optim_parameters(self.config.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_137": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.model.forward(img.cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "self.model.forward(img.cuda())",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred.squeeze()",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "cu_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "cu_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_251": {
                "variable": {
                    "value": "cu_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cu_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(h, self.config.num_classes).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_h, p=1, dim=0)",
                            "Call"
                        ],
                        [
                            "cu_h.t()",
                            "Call"
                        ],
                        [
                            "pred.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "cu_h.t()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_h, p=1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_252": {
                "variable": {
                    "value": "cu_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cu_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(w, self.config.num_classes).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_w, p=1, dim=0)",
                            "Call"
                        ],
                        [
                            "cu_w.t()",
                            "Call"
                        ],
                        [
                            "pred.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "cu_w.t()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_w, p=1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_279": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.model.forward(img.cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "self.model.forward(img.cuda())",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred.squeeze()",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_287": {
                "variable": {
                    "value": "cu_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cu_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(h, self.config.num_classes).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_h, p=1, dim=0)",
                            "Call"
                        ],
                        [
                            "cu_h.t()",
                            "Call"
                        ],
                        [
                            "pred.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "cu_h.t()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_h, p=1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_288": {
                "variable": {
                    "value": "cu_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cu_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(w, self.config.num_classes).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_w, p=1, dim=0)",
                            "Call"
                        ],
                        [
                            "cu_w.t()",
                            "Call"
                        ],
                        [
                            "pred.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "cu_w.t()",
                            "Call"
                        ],
                        [
                            "F.normalize(cu_w, p=1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_325": {
                "variable": {
                    "value": "(srted, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_wei.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_329": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sel_cls_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_wei > thres",
                            "Compare"
                        ],
                        [
                            "sel_cls_mask * cls_mask",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "i * torch.ones_like(label)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thres_cb_plabel(output, self.cb_thres, num_cls=self.config.num_classes)",
                            "Call"
                        ],
                        [
                            "mask_fusion(output, mask, mask2)",
                            "Call"
                        ],
                        [
                            "plabel.view(1024, 2048)",
                            "Call"
                        ],
                        [
                            "plabel.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.asarray(plabel, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(plabel)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(label) * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(sel_cls_mask, i * torch.ones_like(label), plabel)",
                            "Call"
                        ],
                        [
                            "self.calc_pixel_simi(pred, label, target_template)",
                            "Call"
                        ],
                        [
                            "plabel.view(src_h, src_w)",
                            "Call"
                        ],
                        [
                            "plabel.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.asarray(plabel, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(plabel)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_398": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.config['snapshot'], tmp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "p * log_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.forward(img.cuda())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_143": {
                "variable": {
                    "value": "cls_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.max(dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "pred_probs.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_label == i",
                            "Compare"
                        ],
                        [
                            "label == i",
                            "Compare"
                        ]
                    ]
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_311": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda().squeeze()",
                            "Call"
                        ],
                        [
                            "pred.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_312": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda().squeeze()",
                            "Call"
                        ],
                        [
                            "pred.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_357": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(image.cuda())",
                            "Call"
                        ],
                        [
                            "interp(output)",
                            "Call"
                        ],
                        [
                            "self.model.forward(image.cuda())",
                            "Call"
                        ],
                        [
                            "interp(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_329": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label.cuda().squeeze()",
                            "Call"
                        ],
                        [
                            "pred.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.cuda()",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "trainer/source_only_trainer.py": {
        "torch": {
            "cross_entropy_31": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(img.cuda())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label.long().cuda()",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_42": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.module.optim_parameters(self.config.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_45": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.optim_parameters(self.config.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.config['snapshot'], name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.config['snapshot'], tmp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/flatwhite.py": {
        "torch": {}
    },
    "utils/func.py": {
        "torch": {
            "masked_select_12": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.view(-1, 1).squeeze().cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(label, mask)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(plabel != 255) * (label != 255)",
                            "BinOp"
                        ],
                        [
                            "torch.gt(P, vec)",
                            "Call"
                        ],
                        [
                            "mask.sum(dim=1).byte()",
                            "Call"
                        ],
                        [
                            "mask.squeeze()",
                            "Call"
                        ],
                        [
                            "mask1 + mask2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "masked_select_13": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plabel.view(-1, 1).squeeze().cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(plabel, mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, pred_label, ignore)",
                            "Call"
                        ],
                        [
                            "plabel.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(select_mask, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask > 0, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "plabel",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(plabel != 255) * (label != 255)",
                            "BinOp"
                        ],
                        [
                            "torch.gt(P, vec)",
                            "Call"
                        ],
                        [
                            "mask.sum(dim=1).byte()",
                            "Call"
                        ],
                        [
                            "mask.squeeze()",
                            "Call"
                        ],
                        [
                            "mask1 + mask2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.Tensor([thres_dic[k]]) for k in range(num_cls)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(vec).cuda()",
                            "Call"
                        ],
                        [
                            "vec.view(1, c, 1, 1)",
                            "Call"
                        ],
                        [
                            "vec.expand_as(P)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.Tensor([thres_dic[k]]) for k in range(num_cls)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(vec).cuda()",
                            "Call"
                        ],
                        [
                            "vec.view(1, c, 1, 1)",
                            "Call"
                        ],
                        [
                            "vec.expand_as(P)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_50": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(plabel != 255) * (label != 255)",
                            "BinOp"
                        ],
                        [
                            "torch.gt(P, vec)",
                            "Call"
                        ],
                        [
                            "mask.sum(dim=1).byte()",
                            "Call"
                        ],
                        [
                            "mask.squeeze()",
                            "Call"
                        ],
                        [
                            "mask1 + mask2",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255 * torch.ones_like(pred_label, dtype=torch.long)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_65": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_68": {
                "variable": {
                    "value": "(value, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_prob.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_71": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "select_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_prob > thres).cuda()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plabel.view(-1, 1).squeeze().cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(plabel, mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, pred_label, ignore)",
                            "Call"
                        ],
                        [
                            "plabel.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(select_mask, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask > 0, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "plabel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_85": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_87": {
                "variable": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "plabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plabel.view(-1, 1).squeeze().cuda().float()",
                            "Call"
                        ],
                        [
                            "torch.masked_select(plabel, mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask, pred_label, ignore)",
                            "Call"
                        ],
                        [
                            "plabel.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(select_mask, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_label, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "plabel * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask > 0, pred_label, plabel)",
                            "Call"
                        ],
                        [
                            "plabel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "P.argmax(dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "label.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/kmeans.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_9": {
                "variable": {
                    "value": "device_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers.size(0)",
                            "Call"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices.view(-1, 1).expand(-1, dimension)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "centers_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(dataset, 0, indices.view(-1, 1).expand(-1, dimension))",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_centers, dimension, dtype=torch.float, device=device_gpu)",
                            "Call"
                        ],
                        [
                            "centers / cnt.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "random_init(dataset, num_centers)",
                            "Call"
                        ],
                        [
                            "update_centers(dataset, codes, num_centers)",
                            "Call"
                        ],
                        [
                            "centers[:num_centers, :]",
                            "Subscript"
                        ],
                        [
                            "centers",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "centers_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers.size(0)",
                            "Call"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.size(1)",
                            "Call"
                        ],
                        [
                            "dataset.size(1)",
                            "Call"
                        ],
                        [
                            "dataset.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers.size(0)",
                            "Call"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_63": {
                "variable": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cnt > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_centers, dtype=torch.float, device=device_gpu)",
                            "Call"
                        ],
                        [
                            "torch.where(cnt > 0.5, cnt, torch.ones(num_centers, dtype=torch.float, device=device_gpu))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(num_centers, dtype=torch.float, device=device_gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "dataset_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset_piece ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_45": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dataset_piece",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[begin:end, :]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "centers_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(centers, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_49": {
                "variable": {
                    "value": "(_, min_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(dataset_piece, centers_t)",
                            "Call"
                        ],
                        [
                            "distances + centers_norms",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_63": {
                "*size": {
                    "value": "num_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers.size(0)",
                            "Call"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ],
                        [
                            "num_centers",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_80": {
                "input": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_points, dtype=torch.long, device=device_gpu)",
                            "Call"
                        ],
                        [
                            "compute_codes(dataset, centers)",
                            "Call"
                        ],
                        [
                            "new_codes",
                            "variable"
                        ],
                        [
                            "codes",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "new_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_codes(dataset, centers)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/optimize.py": {
        "torch": {}
    },
    "utils/pool.py": {
        "torch": {
            "softmax_30": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}