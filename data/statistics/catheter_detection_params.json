{
    "data/aligned_dataset_srcnn.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "models/base_model.py": {
        "torch": {
            "save_47": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "LambdaLR_94": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_213": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_226": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_227": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_228": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_229": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_230": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_258": {
                "variable": {
                    "value": "self.blk1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_nc + output_nc, ngf, kernel_size=3, stride=1, padding=1, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.blk2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf, ngf * 2, kernel_size=4, stride=2, padding=1, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.blk3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ngf * 2, ngf * 4, kernel_size=4, stride=2, padding=1, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.blk5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResnetBlock(ngf * 4, padding_type=padding_type, norm_layer=norm_layer, use_dropout=use_dropout, use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.blk6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResnetBlock(ngf * 4, padding_type=padding_type, norm_layer=norm_layer, use_dropout=use_dropout, use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.blk7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResnetBlock(ngf * 2, padding_type=padding_type, norm_layer=norm_layer, use_dropout=use_dropout, use_bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_306": {
                "variable": {
                    "value": "self.up2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * ngf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * ngf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_307": {
                "variable": {
                    "value": "self.up2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * ngf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * ngf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_308": {
                "variable": {
                    "value": "self.up2i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_19": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_55": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_96": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_21": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_57": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_98": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_158": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_233": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "input_nc + output_nc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_267": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_274": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_290": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_292": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_297": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_299": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_304": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_23": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_35": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_47": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_59": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_148": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_164": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "(input_list[t], I)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_336": {
                "tensors": {
                    "value": "(d3, e2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_338": {
                "tensors": {
                    "value": "(d2, e1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_150": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_166": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_list[2].size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(hh / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(ww / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_353": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(batch_size, self.nclass, int(hh / 4), int(ww / 4))).cuda()",
                            "Call"
                        ],
                        [
                            "self.blk7(torch.cat((d2, e1), 1))",
                            "Call"
                        ],
                        [
                            "self.up2i(I)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(I, dim=1) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_list[2].size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spatial_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "spatial_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_list[2].size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spatial_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "spatial_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/scale_rcnn.py": {
        "torch": {
            "Adam_52": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "input": {
                    "value": "self.fake_B0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "input": {
                    "value": "self.fake_B1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "input": {
                    "value": "self.fake_B2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_57": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "round_97": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target + 1) * 0.5 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.round(target).type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_100": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_108": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "log_p[target.view(n * h * w, 1).repeat(1, c) >= 0]",
                            "Subscript"
                        ],
                        [
                            "log_p.view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target + 1) * 0.5 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.round(target).type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_41": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}