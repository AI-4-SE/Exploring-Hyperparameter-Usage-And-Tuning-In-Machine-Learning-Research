{
    "IM/IM_TV/GraphSAGE-master/graphsage/minibatch.py": {
        "sklearn": {
            "StandardScaler_263": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/supervisedPredict.py": {
        "sklearn": {
            "f1_score_86": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_true, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_215": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_312": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_319": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_320": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_321": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_341": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_168": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/supervised_train.py": {
        "sklearn": {},
        "tensorflow": {
            "set_random_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_267": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_273": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_274": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_275": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_286": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_287": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_359": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_298": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_139": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/get_output.py": {
        "sklearn": {
            "StandardScaler_292": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_43": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_selected']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_46": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_left']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_59": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_61": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/graphGenerator.py": {
        "sklearn": {}
    },
    "IM/IM_TV/main.py": {
        "sklearn": {
            "StandardScaler_105": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "mu_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_selected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "mu_left",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "mu_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_30": {
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/nn.py": {
        "sklearn": {},
        "tensorflow": {
            "RunConfig_121": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_125": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_130": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_134": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "neuralNetModel",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./trained_model_MC'",
                            "str"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig().replace(session_config=tf.ConfigProto(device_count={'GPU': 0}))",
                            "Call"
                        ],
                        [
                            "tf.estimator.RunConfig().replace(session_config=session_config)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "mu_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_selected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "mu_left",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "mu_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "learningRate1",
                            "variable"
                        ]
                    ]
                }
            },
            "EstimatorSpec_115": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "numpy_input_fn_267": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_47": {
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ],
                        [
                            "(features['mu_selected'], features['mu_left'], features['mu_v'])",
                            "Tuple"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                }
            },
            "scalar_114": {
                "name": {
                    "value": "loss_op",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "numpy_input_fn_205": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(y_train, dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EstimatorSpec_87": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "export_outputs": {
                    "value": "{'predict': tf.estimator.export.PredictOutput(output)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "squared_difference_97": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_122": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_global_step_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PredictOutput_88": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/util.py": {
        "sklearn": {
            "StandardScaler_77": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/util_output.py": {
        "sklearn": {
            "StandardScaler_78": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/minibatch.py": {
        "sklearn": {
            "StandardScaler_259": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/supervisedPredict.py": {
        "sklearn": {
            "f1_score_84": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_true, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_213": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_310": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_317": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_318": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_319": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_339": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_166": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/supervised_train.py": {
        "sklearn": {},
        "tensorflow": {
            "set_random_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_267": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_273": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_274": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_275": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_286": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_287": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_359": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_298": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "trainable_variables_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_139": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/get_output.py": {
        "sklearn": {
            "StandardScaler_288": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_selected']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_33": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_left']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_36": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1",
                            "variable"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_42": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_45": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_47": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/graphGenerator.py": {
        "sklearn": {}
    },
    "MaxCover-20200616T101530Z-001/MaxCover/main.py": {
        "sklearn": {
            "StandardScaler_108": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "mu_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_selected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "mu_left",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "mu_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_29": {
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/nn.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_42": {
                "variable": {
                    "value": "mu_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_selected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "mu_left",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "mu_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunConfig_62": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "neuralNetModel",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./trained_model_MC_' + str(model_iter)",
                            "BinOp"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig().replace(session_config=tf.ConfigProto(device_count={'GPU': 1}))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_75": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "dimension1 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_95": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "learningRate1",
                            "variable"
                        ]
                    ]
                }
            },
            "EstimatorSpec_126": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "numpy_input_fn_271": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "number",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_48": {
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ],
                        [
                            "(features['mu_selected'], features['mu_left'], features['mu_v'])",
                            "Tuple"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "receiver_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mu_selected': mu_selected, 'mu_left': mu_left, 'mu_v': mu_v}",
                            "Dict"
                        ]
                    ]
                }
            },
            "scalar_125": {
                "name": {
                    "value": "loss_op",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "numpy_input_fn_211": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(y_train, dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EstimatorSpec_98": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "export_outputs": {
                    "value": "{'predict': tf.estimator.export.PredictOutput(output)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "squared_difference_108": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_63": {
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_global_step_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PredictOutput_99": {
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/util.py": {
        "sklearn": {
            "StandardScaler_58": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_68": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/util_output.py": {
        "sklearn": {
            "StandardScaler_80": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/aggregators.py": {
        "tensorflow": {
            "dropout_46": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(neigh_vecs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_172": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_181": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_250": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_338": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_347": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_349": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_403": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_408": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_411": {
                "variable": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(neigh_vecs), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_412": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(neigh_vecs), axis=2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_413": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_414": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_432": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_433": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rnn_outputs, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_len + (length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_438": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_265": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_267": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_353": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_355": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_441": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_443": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "[neigh_vecs, tf.expand_dims(self_vecs, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_411": {
                "input_tensor": {
                    "value": "tf.abs(neigh_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_413": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_418": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_428": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_429": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_411": {
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_424": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/inits.py": {
        "tensorflow": {
            "zeros_24": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_19": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_25": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/layers.py": {
        "tensorflow": {
            "dropout_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(FLAGS.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_70": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_62": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_65": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/metrics.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_9": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_11": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_18": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_35": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_12": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_14": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_20": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_12": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_20": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_35": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/models.py": {
        "tensorflow": {
            "get_collection_63": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_85": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_170": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_251": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_337": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_369": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_370": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_371": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_400": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_401": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_403": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_404": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_405": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_432": {
                "variable": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([dict_size, nodevec_dim], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_435": {
                "variable": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([dict_size, nodevec_dim], stddev=1.0 / math.sqrt(nodevec_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_439": {
                "variable": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([dict_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_443": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_448": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_451": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_460": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_461": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_462": {
                "variable": {
                    "value": "self.outputs2_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_463": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_464": {
                "variable": {
                    "value": "self.neg_outputs_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_482": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_484": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_495": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_497": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_499": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_500": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_501": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "logits": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "self.embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[adj.get_shape().as_list()[0], identity_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_392": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_406": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_488": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_502": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embeds, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_300": {
                "params": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "node_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_379": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_402": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_405": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_436": {
                "shape": {
                    "value": "[dict_size, nodevec_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(nodevec_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "shape": {
                    "value": "[dict_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_449": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_480": {
                "input_tensor": {
                    "value": "tf.multiply(self.outputs1, self.outputs2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_481": {
                "a": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.neg_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_486": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_487": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_498": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_501": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_119": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_128": {
                "x": {
                    "value": "tf.reduce_sum(diff * diff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_239": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler((samples[k], layer_infos[t].num_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_405": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_480": {
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_481": {
                "a": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_483": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_485": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_501": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_381": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_389": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_328": {
                "tensor": {
                    "value": "hidden[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "neigh_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size * support_sizes[hop], num_samples[len(num_samples) - hop - 1], dim_mult * dims[layer]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/neigh_samplers.py": {
        "tensorflow": {
            "embedding_lookup_26": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.adj_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_27": {
                "a": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_28": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/predictModel.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_237": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_243": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_244": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_245": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_250": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_251": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_253": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_sample_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_128": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/prediction.py": {
        "tensorflow": {
            "matmul_91": {
                "variable": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(neg_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_107": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_115": {
                "variable": {
                    "value": "neg_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.exp(neg_aff), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "aff - neg_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin), name='diff')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_124": {
                "variable": {
                    "value": "self.neg_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.vars['weights'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * inputs2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim1, input_dim2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.exp(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_122": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(aff, 1) - self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "a": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_115": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/supervised_models.py": {
        "tensorflow": {
            "AdamOptimizer_73": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_85": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self.embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[adj.get_shape().as_list()[0], identity_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_132": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embeds, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_116": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_127": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_138": {
                "logits": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_109": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ],
                        [
                            "self.node_pred.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_97": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_107": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ],
                        [
                            "self.node_pred.vars.values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/unsupervised_train.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_235": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_241": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_242": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_243": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_257": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_258": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_317": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_sample_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_126": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_329": {
                "variable": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_331": {
                "variable": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_333": {
                "variable": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.squeeze(test_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_334": {
                "variable": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.squeeze(train_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_nd_335": {
                "variable": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(model.context_embeds, tf.squeeze(test_ids))",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(test_ids, update_nodes, tf.shape(model.context_embeds))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(model.context_embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_336": {
                "variable": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.scatter_nd(train_ids, no_update_nodes, tf.shape(model.context_embeds))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_333": {
                "input": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_334": {
                "input": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_335": {
                "input": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_336": {
                "indices": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(model.context_embeds, tf.squeeze(train_ids))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.scatter_nd(train_ids, no_update_nodes, tf.shape(model.context_embeds)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(model.context_embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_336": {
                "input": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "IM/IM_TV/GraphSAGE-master/graphsage/utils.py": {
        "tensorflow": {}
    },
    "IM/IM_TV/testing.py": {
        "tensorflow": {
            "Estimator_41": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "neuralNetModel",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./trained_model_MC'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_60": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_selected']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_19": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_left']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_22": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_24": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_4)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_4)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_37": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_36": {
                "name": {
                    "value": "loss_op",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_30": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_32": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/aggregators.py": {
        "tensorflow": {
            "dropout_46": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(neigh_vecs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_105": {
                "variable": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.concat([neigh_vecs, tf.expand_dims(self_vecs, axis=1)], axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_172": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_181": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_250": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_338": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_neighbors, self.neigh_input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reshape(neigh_h, (batch_size * num_neighbors, self.neigh_input_dim))",
                            "Call"
                        ],
                        [
                            "l(h_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_neighbors, self.hidden_dim_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_347": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_349": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_350": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_403": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_408": {
                "variable": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_411": {
                "variable": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(neigh_vecs), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_412": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(neigh_vecs), axis=2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_413": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_414": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_432": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_433": {
                "variable": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rnn_outputs, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_len + (length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "from_neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "neigh_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "neigh_vecs",
                            "variable"
                        ],
                        [
                            "tf.reshape(h_reshaped, (batch_size, num_neighbors, self.hidden_dim_2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(neigh_h, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(flat, index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['neigh_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "from_self",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['self_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_438": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_265": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_267": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_353": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_355": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_441": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_443": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[from_self, from_neighs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "[neigh_vecs, tf.expand_dims(self_vecs, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "self.name + name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_411": {
                "input_tensor": {
                    "value": "tf.abs(neigh_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_413": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_418": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_428": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_429": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_411": {
                "x": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_rnn_424": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "neigh_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(neigh_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(length, tf.constant(1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "self_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(self_vecs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/inits.py": {
        "tensorflow": {
            "zeros_24": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_19": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_25": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/layers.py": {
        "tensorflow": {
            "dropout_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(FLAGS.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_70": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_62": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_65": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/metrics.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_9": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_11": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_18": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_35": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_12": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_14": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_20": {
                "x": {
                    "value": "tf.reduce_sum(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2(preds, actuals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_12": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_20": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_35": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/models.py": {
        "tensorflow": {
            "get_collection_63": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_85": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_170": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_251": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_337": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_369": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_370": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_371": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_400": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_401": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_403": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_404": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_405": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_432": {
                "variable": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([dict_size, nodevec_dim], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_435": {
                "variable": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([dict_size, nodevec_dim], stddev=1.0 / math.sqrt(nodevec_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_embeds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_439": {
                "variable": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([dict_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "context_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_443": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_448": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(self.placeholders['batch2'], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fixed_unigram_candidate_sampler_451": {
                "variable": {
                    "value": "(self.neg_samples, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "true_classes": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(self.placeholders['batch2'], dtype=tf.int64), [self.batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_true": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "FLAGS.neg_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "unique": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "range_max": {
                    "value": "len(self.degrees)",
                    "type": "Call",
                    "possible_values": []
                },
                "distortion": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "unigrams": {
                    "value": "self.degrees.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_460": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.target_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_461": {
                "variable": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_462": {
                "variable": {
                    "value": "self.outputs2_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.inputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_463": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_464": {
                "variable": {
                    "value": "self.neg_outputs_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.context_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_482": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_484": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_495": {
                "variable": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neg_aff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, FLAGS.neg_sample_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "variable": {
                    "value": "_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_497": {
                "variable": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.neg_aff, _aff]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_499": {
                "variable": {
                    "value": "(_, indices_of_ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_500": {
                "variable": {
                    "value": "(_, self.ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-indices_of_ranks",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(self.aff_all)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_501": {
                "variable": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.div(1.0, tf.cast(self.ranks[:, -1] + 1, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "logits": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "self.embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[adj.get_shape().as_list()[0], identity_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_392": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_406": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_488": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_502": {
                "name": {
                    "value": "mrr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mrr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embeds, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_300": {
                "params": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "node_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_379": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_402": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_405": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_436": {
                "shape": {
                    "value": "[dict_size, nodevec_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(nodevec_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "shape": {
                    "value": "[dict_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_449": {
                "x": {
                    "value": "self.placeholders['batch2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_480": {
                "input_tensor": {
                    "value": "tf.multiply(self.outputs1, self.outputs2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_481": {
                "a": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.neg_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_486": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_487": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_498": {
                "input": {
                    "value": "self.aff_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_501": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(self.ranks[:, -1] + 1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_119": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_128": {
                "x": {
                    "value": "tf.reduce_sum(diff * diff, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_239": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler((samples[k], layer_infos[t].num_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[support_size * batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_405": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_480": {
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.outputs2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_481": {
                "a": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_483": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(self.outputs1, self.outputs2), 1) + self.outputs2_bias",
                            "BinOp"
                        ],
                        [
                            "self.link_pred_layer.affinity(self.outputs1, self.outputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_485": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.outputs1, tf.transpose(self.neg_outputs)) + self.neg_outputs_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_501": {
                "x": {
                    "value": "self.ranks[:, -1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_381": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_389": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_328": {
                "tensor": {
                    "value": "hidden[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "neigh_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size * support_sizes[hop], num_samples[len(num_samples) - hop - 1], dim_mult * dims[layer]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/neigh_samplers.py": {
        "tensorflow": {
            "embedding_lookup_26": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.adj_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_27": {
                "a": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_28": {
                "variable": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "adj_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.adj_info, ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random_shuffle(tf.transpose(adj_lists)))",
                            "Call"
                        ],
                        [
                            "tf.slice(adj_lists, [0, 0], [-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, num_samples]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/predictModel.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_237": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_243": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_244": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_245": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_250": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_251": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_253": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_sample_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_128": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/prediction.py": {
        "tensorflow": {
            "matmul_91": {
                "variable": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(neg_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "true_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_107": {
                "variable": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_115": {
                "variable": {
                    "value": "neg_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.exp(neg_aff), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "aff - neg_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.subtract(neg_aff, tf.expand_dims(aff, 1) - self.margin), name='diff')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_124": {
                "variable": {
                    "value": "self.neg_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.vars['weights'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs1 * inputs2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, self.vars['weights'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "self.vars[weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim1, input_dim2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "neg_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "negative_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(neg_aff), logits=neg_aff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "tf.exp(neg_aff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_122": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(aff, 1) - self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "a": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_115": {
                "x": {
                    "value": "neg_aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs1, tf.transpose(neg_samples))",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ],
                        [
                            "self.neg_cost(inputs1, neg_samples, hard_neg_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "aff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ],
                        [
                            "self.affinity(inputs1, inputs2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/supervised_models.py": {
        "tensorflow": {
            "AdamOptimizer_73": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_85": {
                "variable": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.outputs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self.embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "node_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[adj.get_shape().as_list()[0], identity_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(features, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_132": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.embeds, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_116": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_127": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.placeholders['labels'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.node_preds, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_138": {
                "logits": {
                    "value": "self.node_preds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_109": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ],
                        [
                            "self.node_pred.vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_97": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_107": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.vars.values()",
                            "Call"
                        ],
                        [
                            "self.node_pred.vars.values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/GraphSAGE-master/graphsage/unsupervised_train.py": {
        "tensorflow": {
            "set_random_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "minibatch.adj.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "adj_info_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=minibatch.adj.shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "adj_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_235": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_241": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_242": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_243": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir()",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_257": {
                "variable": {
                    "value": "train_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_258": {
                "variable": {
                    "value": "val_adj_info",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "adj_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(adj_info_ph, trainable=False, name='adj_info')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "minibatch.test_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_317": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "batch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_sample_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_126": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_329": {
                "variable": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_331": {
                "variable": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_333": {
                "variable": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.squeeze(test_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_334": {
                "variable": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "tf.squeeze(train_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_nd_335": {
                "variable": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(model.context_embeds, tf.squeeze(test_ids))",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(test_ids, update_nodes, tf.shape(model.context_embeds))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(model.context_embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_336": {
                "variable": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.scatter_nd(train_ids, no_update_nodes, tf.shape(model.context_embeds))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_333": {
                "input": {
                    "value": "test_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if G.node[n]['val'] or G.node[n]['test']], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_334": {
                "input": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_335": {
                "input": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_336": {
                "indices": {
                    "value": "train_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[id_map[n]] for n in G.nodes_iter() if not G.node[n]['val'] and (not G.node[n]['test'])], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "no_update_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(model.context_embeds, tf.squeeze(train_ids))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.scatter_nd(train_ids, no_update_nodes, tf.shape(model.context_embeds)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(model.context_embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_336": {
                "input": {
                    "value": "model.context_embeds",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaxCover-20200616T101530Z-001/MaxCover/testing.py": {
        "tensorflow": {
            "Estimator_41": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "neuralNetModel",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./trained_model_MC'",
                            "str"
                        ]
                    ]
                }
            },
            "numpy_input_fn_60": {
                "variable": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "{'mu_selected': mu_s, 'mu_left': mu_l, 'mu_v': mu_v}",
                    "type": "Dict",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_selected']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_19": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_left']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_22": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features['mu_v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_24": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_1, layer_2, layer_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_4)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([layer_1, layer_2, layer_3], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_4)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(output, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_37": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_36": {
                "name": {
                    "value": "loss_op",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(output, labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_30": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_32": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layer_4, 1, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}