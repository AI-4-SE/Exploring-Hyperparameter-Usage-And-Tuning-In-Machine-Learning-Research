{
    "mpl/autograd/functions.py": {
        "torch": {
            "mm_17": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addmm_19": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat1": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_31": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "dense_weight_placeholder.view(size_4d)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.reshape(size_4d)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/alexnet.py": {
        "torch": {
            "flatten_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/base_model.py": {
        "torch": {
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/densenet.py": {
        "torch": {
            "relu_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_39": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/googlenet.py": {
        "torch": {
            "flatten_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_38": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.rvs(m.weight.numel())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/inception.py": {
        "torch": {
            "flatten_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self._transform_input(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/leaf.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DenseConv2d(1, 32, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DenseLinear(64 * 7 * 7, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DenseConv2d(3, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/lenet.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DenseLinear(784, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/resnet.py": {
        "torch": {
            "flatten_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/squeezenet.py": {
        "torch": {
            "flatten_22": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/models/utils.py": {
        "torch": {}
    },
    "mpl/models/vgg.py": {
        "torch": {
            "flatten_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/nn/conv2d.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.dense_weight_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(size=self.weight.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_66": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_90": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "new_conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv2d_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(out_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "new_conv2d.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv2d_module.bias.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_25": {
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_72": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_78": {
                "input": {
                    "value": "torch.abs(weights_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_92": {
                "input": {
                    "value": "rand_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rand[self.mask == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_48": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "weights_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[self.mask == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mpl/nn/linear.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight.data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.dense_weight_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(size=self.weight.size(), device=self.weight.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._sparse_masked_select_abs(self.weight, thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_84": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "self.mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "new_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "linear_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_44": {
                "indices": {
                    "value": "indices.masked_select(prune_mask).reshape(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "values.masked_select(prune_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.out_features, self.in_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_87": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "new_linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "linear_module.bias.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_26": {
                "size": {
                    "value": "self.weight.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_tensor._values()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_53": {
                "input": {
                    "value": "torch.abs(weight_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "weight_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight._values()",
                            "Call"
                        ],
                        [
                            "self.weight[self.mask == 1.0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mpl/optim/sgd.py": {
        "torch": {
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_51": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.dense.grad.masked_select(p.mask)",
                            "Call"
                        ],
                        [
                            "p.grad",
                            "Attribute"
                        ],
                        [
                            "d_p.add(p, alpha=weight_decay)",
                            "Call"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "mpl/utils/save_load.py": {
        "torch": {
            "zeros_35": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_37": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.to(torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(bitmap, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_45": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.to(torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "bitmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_60": {
                "input": {
                    "value": "x._indices()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    }
}