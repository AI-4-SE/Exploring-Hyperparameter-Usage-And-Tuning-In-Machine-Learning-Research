{
    "utils.py": {
        "sklearn": {
            "precision_recall_fscore_support_274": {
                "variable": {
                    "value": "(pr, re, f1cat, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_276": {
                "variable": {
                    "value": "(pr, re, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_278": {
                "variable": {
                    "value": "(p, r, f, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "clamp_198": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mdist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.margin - dist",
                            "BinOp"
                        ],
                        [
                            "margin - dist",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_242": {
                "variable": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist - margin",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "variable": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mdist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.margin - dist",
                            "BinOp"
                        ],
                        [
                            "margin - dist",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_251": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_185": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.pow(diff, 2), 1) / x0.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "dist ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.pow(diff, 2), 1) / x0.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "dist ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_232": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.pow(diff, 2), 1) / x0.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "dist ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.pow(diff, 2), 1) / x0.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "dist ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_255": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_256": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_187": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0 * x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0 * x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "torch.pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_199": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(dist_sq)",
                            "Call"
                        ],
                        [
                            "torch.clamp(mdist, min=0.0)",
                            "Call"
                        ],
                        [
                            "1 - prod / torch.sqrt(torch.sum(x0 ** 2, 1) * torch.sum(x1 ** 2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(dist_sq)",
                            "Call"
                        ],
                        [
                            "1 - prod / torch.sqrt(torch.sum(x0 ** 2, 1) * torch.sum(x1 ** 2, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y * dist_sq + (1 - y) * torch.pow(dist, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / 2.0 / x0.size()[0]",
                            "BinOp"
                        ],
                        [
                            "y * torch.pow(dist_pos, 2) + (1 - y) * torch.pow(dist_neg, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / 2.0 / x0.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_231": {
                "input": {
                    "value": "torch.pow(diff, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_244": {
                "input": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(mdist, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y * dist_sq + (1 - y) * torch.pow(dist, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / 2.0 / x0.size()[0]",
                            "BinOp"
                        ],
                        [
                            "y * torch.pow(dist_pos, 2) + (1 - y) * torch.pow(dist_neg, 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss) / 2.0 / x0.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_184": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 - x1",
                            "BinOp"
                        ],
                        [
                            "x0 - x1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_231": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x0 - x1",
                            "BinOp"
                        ],
                        [
                            "x0 - x1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_188": {
                "input": {
                    "value": "torch.sum(x0 ** 2, 1) * torch.sum(x1 ** 2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_235": {
                "input": {
                    "value": "torch.sum(x0 ** 2, 1) * torch.sum(x1 ** 2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "x1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader_new.py": {
        "torch": {
            "tensor_837": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_838": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_839": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_841": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_842": {
                "variable": {
                    "value": "all_true_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.true for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_843": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[_ for (_, f) in enumerate(features)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_900": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_901": {
                "variable": {
                    "value": "all_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_902": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_904": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "variable": {
                    "value": "all_true_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.true for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_906": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[_ + train_size for (_, f) in enumerate(features)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_815": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_unlabel_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_848": {
                "variable": {
                    "value": "all_e1_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.e1_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_849": {
                "variable": {
                    "value": "all_e2_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.e2_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_850": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_884": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_unlabel_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_910": {
                "variable": {
                    "value": "all_e1_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.e1_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_911": {
                "variable": {
                    "value": "all_e2_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.e2_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_912": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_834": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_re(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_wic(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_re(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_unlabel_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_853": {
                "variable": {
                    "value": "all_keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.keys for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_854": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_857": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_897": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_re(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_wic(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features_re(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, args.max_seq_len, tokenizer, add_sep_token=args.add_sep_token, task=args.task_type)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_unlabel_{}'.format(mode, args.task, list(filter(None, args.model_name_or_path.split('/'))).pop(), args.max_seq_len, 'dist' if args.rule == 1 else 'clean'))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_915": {
                "variable": {
                    "value": "all_keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.keys for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_916": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_919": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_50": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_133": {
                "variable": {
                    "value": "self.extended_token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "bert_config.type_vocab_size + 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_160": {
                "variable": {
                    "value": "sum_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_mask_unsqueeze.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hidden_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "sum_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "concat_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pooled_output, e1_h, e2_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_194": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_197": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modeling_roberta.py": {
        "torch": {
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "DataParallel_53": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_58": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_batch * w.unsqueeze(1) * weight.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_79": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_94": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_97": {
                "variable": {
                    "value": "argmax_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input[w]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "argmax_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_x[index, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(logits.view(-1, logits.shape[-1])).view(logits.shape)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_127": {
                "variable": {
                    "value": "selftrain_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[self.train_dataset, self.unlabeled]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RandomSampler_130": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "selftrain_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([self.train_dataset, self.unlabeled])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "selftrain_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([self.train_dataset, self.unlabeled])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(selftrain_dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(concatdataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(self.train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_148": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_271": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SequentialSampler_332": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.test_dataset",
                            "Attribute"
                        ],
                        [
                            "self.dev_dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.test_dataset",
                            "Attribute"
                        ],
                        [
                            "self.dev_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, x) in enumerate(weight) if x > thresh]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_113": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_235": {
                "variable": {
                    "value": "concatdataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[self.train_dataset, self.unlabeled]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RandomSampler_236": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "concatdataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([self.train_dataset, self.unlabeled])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concatdataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ConcatDataset([self.train_dataset, self.unlabeled])",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(selftrain_dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(concatdataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(self.train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_239": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(selftrain_dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(concatdataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(self.train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "self.args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_config.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.log(target + 1e-06) * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.log(target + 1e-06) * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, x) in enumerate(weight) if x > thresh]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y ** power / f",
                            "BinOp"
                        ],
                        [
                            "t + 1e-10",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t / torch.sum(t, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "teacher_model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_147": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_147": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_36": {
                "n": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(target.view(-1, target.shape[-1])).view(target.shape)",
                            "Call"
                        ],
                        [
                            "self.soft_frequency(target, probs=True, soft=soft)",
                            "Call"
                        ],
                        [
                            "softmax(target.view(-1, target.shape[-1])).view(target.shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "input * w.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_82": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(target.view(-1, target.shape[-1])).view(target.shape)",
                            "Call"
                        ],
                        [
                            "self.soft_frequency(target, probs=True, soft=soft)",
                            "Call"
                        ],
                        [
                            "softmax(target.view(-1, target.shape[-1])).view(target.shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__208": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__301": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_183": {
                "input": {
                    "value": "softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_292": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "target + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "target + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_192": {
                "input": {
                    "value": "softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}