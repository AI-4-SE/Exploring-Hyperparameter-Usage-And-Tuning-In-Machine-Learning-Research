{
    "async_loader.py": {
        "tensorflow": {
            "stack_48": {
                "variable": {
                    "value": "crop_offsets",
                    "possible_values": []
                },
                "values": {
                    "value": "crop_offsets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(crop_offsets)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_118": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(label)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_132": {
                "params": {
                    "value": "multi_scale_crop_sizes",
                    "possible_values": [
                        [
                            "get_multi_scale_crop_size(scale_size, scale_size, crop_size, scale_ratios, max_distort)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(multi_scale_crop_sizes, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "crop_index",
                    "possible_values": [
                        [
                            "tf.random_uniform((), maxval=multi_scale_crop_sizes.get_shape()[0].value, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_133": {
                "params": {
                    "value": "multi_scale_crop_sizes",
                    "possible_values": [
                        [
                            "get_multi_scale_crop_size(scale_size, scale_size, crop_size, scale_ratios, max_distort)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(multi_scale_crop_sizes, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "crop_index",
                    "possible_values": [
                        [
                            "tf.random_uniform((), maxval=multi_scale_crop_sizes.get_shape()[0].value, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_167": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_215": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_271": {
                "variable": {
                    "value": "paths",
                    "possible_values": []
                },
                "value": {
                    "value": "paths",
                    "possible_values": [
                        [
                            "[p[0] for p in gt_pairs]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(paths, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "[p for (i, p) in enumerate(paths) if i not in remove_list]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(paths, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "label",
                            "Name"
                        ],
                        [
                            "tf.fill([config['n_steps']], label)",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ],
                        [
                            "tf.fill([config['n_steps']], label)",
                            "Call"
                        ],
                        [
                            "np.array([int(p[1]) for p in gt_pairs])",
                            "Call"
                        ],
                        [
                            "labels - 1",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(labels, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[l for (i, l) in enumerate(labels) if i not in remove_list]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_273": {
                "variable": {
                    "value": "nums",
                    "possible_values": []
                },
                "value": {
                    "value": "nums",
                    "possible_values": [
                        [
                            "[len(os.listdir(data_path1 + p)) / 2 - max(length1, length2) + 1 for p in paths]",
                            "ListComp"
                        ],
                        [
                            "[len(os.listdir(data_path1 + p)) / 3 - max(length1, length2) + 1 for p in paths]",
                            "ListComp"
                        ],
                        [
                            "[int(n - read_strides[i] * n_steps + read_strides[i]) for (i, n) in enumerate(nums)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(nums, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[int(n) for (i, n) in enumerate(nums) if i not in remove_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_274": {
                "variable": {
                    "value": "read_strides",
                    "possible_values": []
                },
                "value": {
                    "value": "read_strides",
                    "possible_values": [
                        [
                            "[min(read_stride, float(n) / n_steps) for n in nums]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(read_strides, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(read_strides, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_275": {
                "variable": {
                    "value": "offset_str",
                    "possible_values": []
                },
                "value": {
                    "value": "offset_str",
                    "possible_values": [
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "convert_to_tensor_276": {
                "variable": {
                    "value": "multi_scale_crop_sizes",
                    "possible_values": []
                },
                "value": {
                    "value": "multi_scale_crop_sizes",
                    "possible_values": [
                        [
                            "get_multi_scale_crop_size(scale_size, scale_size, crop_size, scale_ratios, max_distort)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(multi_scale_crop_sizes, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "slice_input_producer_279": {
                "variable": {
                    "value": "filename_queue",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[paths, labels, nums, read_strides]",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_434": {
                "variable": {
                    "value": "paths",
                    "possible_values": []
                },
                "value": {
                    "value": "paths",
                    "possible_values": [
                        [
                            "[p[0] for p in gt_pairs]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(paths, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "[p for (i, p) in enumerate(paths) if i not in remove_list]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(paths, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "convert_to_tensor_435": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "label",
                            "Name"
                        ],
                        [
                            "tf.fill([config['n_steps']], label)",
                            "Call"
                        ],
                        [
                            "label",
                            "Name"
                        ],
                        [
                            "tf.fill([config['n_steps']], label)",
                            "Call"
                        ],
                        [
                            "np.array([int(p[1]) for p in gt_pairs])",
                            "Call"
                        ],
                        [
                            "labels - 1",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(labels, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[l for (i, l) in enumerate(labels) if i not in remove_list]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_436": {
                "variable": {
                    "value": "read_strides",
                    "possible_values": []
                },
                "value": {
                    "value": "read_strides",
                    "possible_values": [
                        [
                            "[min(read_stride, float(n) / n_steps) for n in nums]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(read_strides, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(read_strides, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_437": {
                "variable": {
                    "value": "offsets",
                    "possible_values": []
                },
                "value": {
                    "value": "offsets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(offsets, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_438": {
                "variable": {
                    "value": "hos",
                    "possible_values": []
                },
                "value": {
                    "value": "hos",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(hos, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_439": {
                "variable": {
                    "value": "wos",
                    "possible_values": []
                },
                "value": {
                    "value": "wos",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(wos, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_440": {
                "variable": {
                    "value": "mirrors",
                    "possible_values": []
                },
                "value": {
                    "value": "mirrors",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(mirrors, dtype=tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_442": {
                "variable": {
                    "value": "offset_str",
                    "possible_values": []
                },
                "value": {
                    "value": "offset_str",
                    "possible_values": [
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                }
            },
            "slice_input_producer_445": {
                "variable": {
                    "value": "filename_queue",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[paths, labels, read_strides, offsets, hos, wos, mirrors]",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "read_file_56": {
                "variable": {
                    "value": "file_contents",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_name",
                    "possible_values": []
                }
            },
            "decode_jpeg_57": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents",
                    "possible_values": [
                        [
                            "tf.read_file(image_name)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_i_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_x_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_y_' + id + '.jpg')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "fill_122": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dims": {
                    "value": "[config['n_steps']]",
                    "possible_values": []
                },
                "value": {
                    "value": "label",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(label)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "less_126": {
                "variable": {
                    "value": "mirror",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 1.0)",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "less_128": {
                "variable": {
                    "value": "mirror",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "cond_156": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(1.0, 0.5)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[6]",
                            "Subscript"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(image)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "values": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_194": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "dims": {
                    "value": "[config['n_steps']]",
                    "possible_values": []
                },
                "value": {
                    "value": "label",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(label)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cond_204": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(1.0, 0.5)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[6]",
                            "Subscript"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(image)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "values": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_321": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value]",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[video_num]",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "batch_457": {
                "variable": {
                    "value": "(images, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "batch_463": {
                "variable": {
                    "value": "(images, images2, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, image2, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_471": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "reshape_472": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value]",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[video_num]",
                    "possible_values": []
                }
            },
            "reshape_481": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "possible_values": []
                }
            },
            "stack_33": {
                "values": {
                    "value": "[0, 0]",
                    "possible_values": []
                }
            },
            "stack_34": {
                "values": {
                    "value": "[0, tf.to_int32(4 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_35": {
                "values": {
                    "value": "[tf.to_int32(4 * height_off), 0]",
                    "possible_values": []
                }
            },
            "stack_36": {
                "values": {
                    "value": "[tf.to_int32(4 * height_off), tf.to_int32(4 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_37": {
                "values": {
                    "value": "[tf.to_int32(2 * height_off), tf.to_int32(2 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_39": {
                "values": {
                    "value": "[0, tf.to_int32(2 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_40": {
                "values": {
                    "value": "[tf.to_int32(4 * height_off), tf.to_int32(2 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_41": {
                "values": {
                    "value": "[tf.to_int32(2 * height_off), 0]",
                    "possible_values": []
                }
            },
            "stack_42": {
                "values": {
                    "value": "[tf.to_int32(2 * height_off), tf.to_int32(4 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_43": {
                "values": {
                    "value": "[tf.to_int32(height_off), tf.to_int32(width_off)]",
                    "possible_values": []
                }
            },
            "stack_44": {
                "values": {
                    "value": "[tf.to_int32(height_off), tf.to_int32(3 * width_off)]",
                    "possible_values": []
                }
            },
            "stack_45": {
                "values": {
                    "value": "[tf.to_int32(3 * height_off), tf.to_int32(width_off)]",
                    "possible_values": []
                }
            },
            "stack_46": {
                "values": {
                    "value": "[tf.to_int32(3 * height_off), tf.to_int32(3 * width_off)]",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "slice_93": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [height, width], method=0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "preprocessing_fn(image, crop_size, crop_size, random_mirror=random_mirror)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, tf.stack([ho, wo, 0]), tf.stack([crop_height, crop_width, -1]))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2, image3], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2], 2)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "tf.stack([ho, wo, 0])",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([crop_height, crop_width, -1])",
                    "possible_values": []
                }
            },
            "cond_164": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(1.0, 0.5)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[6]",
                            "Subscript"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(image)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "possible_values": []
                }
            },
            "cond_212": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform([], 0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(1.0, 0.5)",
                            "Call"
                        ],
                        [
                            "name_label_stride_setting_queue[6]",
                            "Subscript"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(image)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "possible_values": []
                }
            },
            "shuffle_batch_292": {
                "variable": {
                    "value": "(images, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "shuffle_batch_299": {
                "variable": {
                    "value": "(images, images2, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, image2, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "batch_307": {
                "variable": {
                    "value": "(images, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "batch_313": {
                "variable": {
                    "value": "(images, images2, label_batch, name)",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, image2, label, filename_queue[0]]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "int(batch_size / n_steps)",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "possible_values": [
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ],
                        [
                            "min_queue_examples + (num_preprocess_threads + 2) * int(batch_size / n_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_324": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "a": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "image_334": {
                "name": {
                    "value": "Modality1_batch",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "batch_size",
                    "possible_values": []
                }
            },
            "scalar_335": {
                "name": {
                    "value": "Modality1_batch_max_value",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(images)",
                    "possible_values": []
                }
            },
            "scalar_336": {
                "name": {
                    "value": "Modality1_batch_min_value",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(images)",
                    "possible_values": []
                }
            },
            "scalar_337": {
                "name": {
                    "value": "Modality1_batch_mean_value",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(images)",
                    "possible_values": []
                }
            },
            "transpose_343": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "a": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value]",
                    "possible_values": []
                }
            },
            "transpose_474": {
                "variable": {
                    "value": "label_batch",
                    "possible_values": []
                },
                "a": {
                    "value": "label_batch",
                    "possible_values": [
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_batch, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [video_num])",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_batch, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_488": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "a": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "images2",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value]",
                    "possible_values": []
                }
            },
            "gather_61": {
                "variable": {
                    "value": "id",
                    "possible_values": []
                },
                "params": {
                    "value": "offset_str",
                    "possible_values": [
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "start_offset + o",
                    "possible_values": []
                }
            },
            "read_file_62": {
                "variable": {
                    "value": "file_contents",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_name + '/flow_i_' + id + '.jpg'",
                    "possible_values": []
                }
            },
            "decode_jpeg_63": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents",
                    "possible_values": [
                        [
                            "tf.read_file(image_name)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_i_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_x_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_y_' + id + '.jpg')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "gather_143": {
                "params": {
                    "value": "fix_offsets",
                    "possible_values": [
                        [
                            "get_fix_offset(int(config['width']), int(config['height']), crop_height, crop_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "offset_index",
                    "possible_values": [
                        [
                            "tf.random_uniform((), maxval=fix_offsets.get_shape()[0].value, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_144": {
                "params": {
                    "value": "fix_offsets",
                    "possible_values": [
                        [
                            "get_fix_offset(int(config['width']), int(config['height']), crop_height, crop_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "offset_index",
                    "possible_values": [
                        [
                            "tf.random_uniform((), maxval=fix_offsets.get_shape()[0].value, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_151": {
                "x": {
                    "value": "config['data_path1']",
                    "possible_values": []
                },
                "y": {
                    "value": "video_name",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[0]",
                            "Subscript"
                        ],
                        [
                            "name_label_stride_setting_queue[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_199": {
                "x": {
                    "value": "config['data_path1']",
                    "possible_values": []
                },
                "y": {
                    "value": "video_name",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[0]",
                            "Subscript"
                        ],
                        [
                            "name_label_stride_setting_queue[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_max_335": {
                "input_tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_336": {
                "input_tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_337": {
                "input_tensor": {
                    "value": "images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_348": {
                "name": {
                    "value": "Modality2_batch",
                    "possible_values": []
                },
                "data": {
                    "value": "images2",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(images2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images2, [1, 0, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(images2, [batch_size, imgs_shape[2].value, imgs_shape[3].value, imgs_shape[4].value])",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "batch_size",
                    "possible_values": []
                }
            },
            "to_int32_34": {
                "x": {
                    "value": "4 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_35": {
                "x": {
                    "value": "4 * height_off",
                    "possible_values": []
                }
            },
            "to_int32_36": {
                "x": {
                    "value": "4 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_37": {
                "x": {
                    "value": "2 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_39": {
                "x": {
                    "value": "2 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_40": {
                "x": {
                    "value": "2 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_41": {
                "x": {
                    "value": "2 * height_off",
                    "possible_values": []
                }
            },
            "to_int32_42": {
                "x": {
                    "value": "4 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_43": {
                "x": {
                    "value": "width_off",
                    "possible_values": [
                        [
                            "(w - crop_width) / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_int32_44": {
                "x": {
                    "value": "3 * width_off",
                    "possible_values": []
                }
            },
            "to_int32_45": {
                "x": {
                    "value": "width_off",
                    "possible_values": [
                        [
                            "(w - crop_width) / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_int32_46": {
                "x": {
                    "value": "3 * width_off",
                    "possible_values": []
                }
            },
            "gather_69": {
                "variable": {
                    "value": "id",
                    "possible_values": []
                },
                "params": {
                    "value": "offset_str",
                    "possible_values": [
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ],
                        [
                            "['%04d' % i for i in xrange(1, 9999)]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(offset_str, dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "start_offset + o",
                    "possible_values": []
                }
            },
            "read_file_70": {
                "variable": {
                    "value": "file_contents",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_name + '/flow_x_' + id + '.jpg'",
                    "possible_values": []
                }
            },
            "decode_jpeg_71": {
                "variable": {
                    "value": "image1",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents",
                    "possible_values": [
                        [
                            "tf.read_file(image_name)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_i_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_x_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_y_' + id + '.jpg')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "variable": {
                    "value": "image1",
                    "possible_values": []
                },
                "x": {
                    "value": "image1",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "read_file_73": {
                "variable": {
                    "value": "file_contents",
                    "possible_values": []
                },
                "filename": {
                    "value": "image_name + '/flow_y_' + id + '.jpg'",
                    "possible_values": []
                }
            },
            "decode_jpeg_74": {
                "variable": {
                    "value": "image2",
                    "possible_values": []
                },
                "contents": {
                    "value": "file_contents",
                    "possible_values": [
                        [
                            "tf.read_file(image_name)",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_i_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_x_' + id + '.jpg')",
                            "Call"
                        ],
                        [
                            "tf.read_file(image_name + '/flow_y_' + id + '.jpg')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "to_float_75": {
                "variable": {
                    "value": "image2",
                    "possible_values": []
                },
                "x": {
                    "value": "image2",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_93": {
                "values": {
                    "value": "[crop_height, crop_width, -1]",
                    "possible_values": []
                }
            },
            "to_int32_152": {
                "x": {
                    "value": "tf.floor(i * read_stride)",
                    "possible_values": []
                }
            },
            "flip_left_right_156": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [height, width], method=0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "preprocessing_fn(image, crop_size, crop_size, random_mirror=random_mirror)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, tf.stack([ho, wo, 0]), tf.stack([crop_height, crop_width, -1]))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2, image3], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2], 2)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_159": {
                "x": {
                    "value": "config['data_path2']",
                    "possible_values": []
                },
                "y": {
                    "value": "video_name",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[0]",
                            "Subscript"
                        ],
                        [
                            "name_label_stride_setting_queue[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_200": {
                "x": {
                    "value": "tf.floor(i * read_stride)",
                    "possible_values": []
                }
            },
            "flip_left_right_204": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [height, width], method=0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "preprocessing_fn(image, crop_size, crop_size, random_mirror=random_mirror)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, tf.stack([ho, wo, 0]), tf.stack([crop_height, crop_width, -1]))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2, image3], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2], 2)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_207": {
                "x": {
                    "value": "config['data_path2']",
                    "possible_values": []
                },
                "y": {
                    "value": "video_name",
                    "possible_values": [
                        [
                            "name_label_length_stride_queue[0]",
                            "Subscript"
                        ],
                        [
                            "name_label_stride_setting_queue[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_78": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "values": {
                    "value": "[image1, image2, image3]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "values": {
                    "value": "[image1, image2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "floor_152": {
                "x": {
                    "value": "i * read_stride",
                    "possible_values": []
                }
            },
            "to_int32_160": {
                "x": {
                    "value": "tf.floor(i * read_stride)",
                    "possible_values": []
                }
            },
            "flip_left_right_164": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [height, width], method=0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "preprocessing_fn(image, crop_size, crop_size, random_mirror=random_mirror)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, tf.stack([ho, wo, 0]), tf.stack([crop_height, crop_width, -1]))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2, image3], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2], 2)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_200": {
                "x": {
                    "value": "i * read_stride",
                    "possible_values": []
                }
            },
            "to_int32_208": {
                "x": {
                    "value": "tf.floor(i * read_stride)",
                    "possible_values": []
                }
            },
            "flip_left_right_212": {
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [height, width], method=0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "preprocessing_fn(image, crop_size, crop_size, random_mirror=random_mirror)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, tf.stack([ho, wo, 0]), tf.stack([crop_height, crop_width, -1]))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(file_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat(images, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2, image3], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([image1, image2], 2)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], config['crop'], ho, wo, config['crop_size'], crop_height, crop_width, config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality'], tf.add(config['data_path1'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_1'], False, config['length1'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "one_image(config['modality2'], tf.add(config['data_path2'], video_name), offset_str, offset + tf.to_int32(tf.floor(i * read_stride)), config['height'], config['width'], 1, ho, wo, config['crop_size'], config['crop_size'], config['crop_size'], config['preprocessing_fn_2'], False, config['length2'])",
                            "Call"
                        ],
                        [
                            "tf.cond(mirror, lambda : tf.image.flip_left_right(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_160": {
                "x": {
                    "value": "i * read_stride",
                    "possible_values": []
                }
            },
            "floor_208": {
                "x": {
                    "value": "i * read_stride",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "x": {
                    "value": "image1 * image1 + image2 * image2",
                    "possible_values": []
                }
            }
        }
    },
    "deployment/model_deploy.py": {
        "tensorflow": {
            "get_global_step_225": {
                "variable": {
                    "value": "global_step_tensor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_global_step_290": {
                "variable": {
                    "value": "global_step_tensor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "add_n_403": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                }
            },
            "get_collection_454": {
                "variable": {
                    "value": "update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "possible_values": []
                }
            },
            "get_collection_317": {
                "variable": {
                    "value": "clone_losses",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "possible_values": []
                }
            },
            "get_collection_391": {
                "variable": {
                    "value": "regularization_losses",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "device_315": {
                "device_name": {
                    "value": "clone.device",
                    "possible_values": []
                }
            },
            "add_n_319": {
                "variable": {
                    "value": "clone_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "possible_values": []
                }
            },
            "add_n_325": {
                "variable": {
                    "value": "regularization_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "possible_values": []
                }
            },
            "add_n_329": {
                "variable": {
                    "value": "sum_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_332": {
                "name": {
                    "value": "clone.scope + '/clone_loss'",
                    "possible_values": []
                },
                "data": {
                    "value": "clone_loss",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_334": {
                "name": {
                    "value": "regularization_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(regularization_losses, name='regularization_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_446": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "possible_values": []
                }
            },
            "device_458": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "possible_values": []
                }
            },
            "get_collection_482": {
                "variable": {
                    "value": "regularization_losses",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "global_variables_223": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "model_variables_223": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "model_variables_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "div_321": {
                "variable": {
                    "value": "clone_loss",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "possible_values": []
                }
            },
            "device_359": {
                "device_name": {
                    "value": "clone.device",
                    "possible_values": []
                }
            },
            "name_scope_394": {
                "name": {
                    "value": "clone.scope",
                    "possible_values": []
                }
            },
            "group_477": {
                "variable": {
                    "value": "update_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "possible_values": []
                }
            },
            "add_n_493": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                }
            },
            "get_collection_497": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "possible_values": []
                }
            },
            "add_n_539": {
                "variable": {
                    "value": "sum_grad",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "possible_values": []
                }
            },
            "info_569": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "possible_values": []
                }
            },
            "name_scope_213": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "possible_values": []
                }
            },
            "name_scope_278": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "possible_values": []
                }
            },
            "device_461": {
                "device_name": {
                    "value": "config.variables_device()",
                    "possible_values": []
                }
            },
            "scalar_502": {
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_216": {
                "device_name": {
                    "value": "chooser.choose",
                    "possible_values": []
                }
            },
            "device_281": {
                "device_name": {
                    "value": "chooser.choose",
                    "possible_values": []
                }
            },
            "name_scope_485": {
                "name": {
                    "value": "clone.scope",
                    "possible_values": []
                }
            },
            "global_norm_567": {
                "t_list": {
                    "value": "[grad_values]",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "possible_values": []
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "possible_values": []
                }
            },
            "get_variable_scope_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_scope_282": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "deployment/train_util.py": {
        "tensorflow": {
            "DEFINE_float_14": {
                "name": {
                    "value": "power",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "possible_values": []
                },
                "help": {
                    "value": "The power parameter for polynomial decay.",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_78": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "possible_values": []
                }
            },
            "group_164": {
                "*inputs": {
                    "value": "*ops",
                    "possible_values": []
                }
            },
            "latest_checkpoint_181": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "IsDirectory_194": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "possible_values": []
                }
            },
            "latest_checkpoint_195": {
                "variable": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "possible_values": []
                }
            },
            "info_199": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "variables",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ]
                    ]
                }
            },
            "exponential_decay_32": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "possible_values": [
                        [
                            "eval(FLAGS.decay_iteration)",
                            "Call"
                        ],
                        [
                            "[decay_steps * i for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[np.int64(i) for i in decay_steps]",
                            "ListComp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "possible_values": []
                }
            },
            "scalar_121": {
                "name": {
                    "value": "training/Learning Rate",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "info_182": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "info_189": {
                "msg": {
                    "value": "'Fine-tuning from %s' % FLAGS.npy_weights",
                    "possible_values": []
                }
            },
            "trainable_variables_252": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_39": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "possible_values": []
                }
            },
            "AdamOptimizer_87": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "possible_values": []
                }
            },
            "histogram_120": {
                "name": {
                    "value": "variable.op.name",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_41": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "possible_values": [
                        [
                            "eval(FLAGS.decay_iteration)",
                            "Call"
                        ],
                        [
                            "[decay_steps * i for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[np.int64(i) for i in decay_steps]",
                            "ListComp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "possible_values": []
                },
                "power": {
                    "value": "FLAGS.power",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_93": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "possible_values": []
                }
            },
            "piecewise_constant_56": {
                "x": {
                    "value": "global_step",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "decay_steps",
                    "possible_values": [
                        [
                            "eval(FLAGS.decay_iteration)",
                            "Call"
                        ],
                        [
                            "[decay_steps * i for i in xrange(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[np.int64(i) for i in decay_steps]",
                            "ListComp"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_values",
                    "possible_values": [
                        [
                            "[FLAGS.learning_rate * FLAGS.learning_rate_decay_factor ** i for i in xrange(len(decay_steps) + 1)]",
                            "ListComp"
                        ],
                        [
                            "eval(FLAGS.learning_rate_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_100": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "key",
                    "possible_values": [
                        [
                            "data_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "name": {
                    "value": "subkey",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'copy_%s' % key",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_variable_151": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "name": {
                    "value": "subkey",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_105": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_111": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            }
        }
    },
    "nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "constant_initializer_105": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_104": {
                "stddev": {
                    "value": "0.05",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "nets/googlenet.py": {
        "tensorflow": {
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'GoogleNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "GoogleNet",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            }
        }
    },
    "nets/googlenet_rnn.py": {
        "tensorflow": {
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "echoNet",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_resnet_v2.py": {
        "tensorflow": {
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_resnet_v2_rnn.py": {
        "tensorflow": {
            "concat_49": {
                "variable": {
                    "value": "mixed",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "mixed",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "mixed",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "concat_172": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_230": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, normalizer_fn=None, normalizer_params=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_utils.py": {
        "tensorflow": {}
    },
    "nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "squeeze_298": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_466": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "squeeze_482": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_337": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_373": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "squeeze_521": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            },
            "squeeze_506": {
                "variable": {
                    "value": "aux_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_306": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            }
        }
    },
    "nets/lenet.py": {
        "tensorflow": {
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, num_classes]",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_91": {
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "nets/nets_factory.py": {
        "tensorflow": {}
    },
    "nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "possible_values": []
                }
            },
            "constant_initializer_99": {
                "value": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "block.scope",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_v1.py": {
        "tensorflow": {
            "relu_108": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_196": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "nets/vgg.py": {
        "tensorflow": {
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "possible_values": []
                }
            }
        }
    },
    "ops/fops.py": {
        "tensorflow": {
            "split_84": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(n_steps)",
                    "possible_values": []
                },
                "axis": {
                    "value": "int(0)",
                    "possible_values": []
                }
            },
            "static_rnn_87": {
                "variable": {
                    "value": "(outputs, states)",
                    "possible_values": []
                },
                "cell": {
                    "value": "en_cell",
                    "possible_values": [
                        [
                            "ENCell(batch_size, num_mem, num_round, 1, cell=cell, echocell=echocell)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "num_frames",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.concat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "M_init",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_M_init' % name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._mem_size, self._mem_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "tile_105": {
                "variable": {
                    "value": "self._memory",
                    "possible_values": []
                },
                "input": {
                    "value": "M_init",
                    "possible_values": [
                        [
                            "tf.get_variable('%s_M_init' % name, [1, self._mem_size, self._mem_dim], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_Tile_M' % name",
                    "possible_values": []
                }
            },
            "split_253": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "possible_values": [
                        [
                            "tf.concat(states, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self._num_mem * self._num_round",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "state_split",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "hidden",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_states",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, attn_length, 1, attn_size]",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "name": {
                    "value": "AttnW",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "possible_values": []
                }
            },
            "conv2d_314": {
                "variable": {
                    "value": "hidden_features",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "tf.reshape(attention_states, [-1, attn_length, 1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "possible_values": [
                        [
                            "tf.get_variable('AttnW', [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "get_variable_315": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "name": {
                    "value": "AttnV",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0].value, -1]",
                    "possible_values": []
                }
            },
            "split_356": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(n_steps)",
                    "possible_values": []
                },
                "axis": {
                    "value": "int(0)",
                    "possible_values": []
                }
            },
            "static_rnn_359": {
                "variable": {
                    "value": "(outputs, states)",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "num_frames",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_361": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.concat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LSTM",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [input_shape[0].value, -1])",
                            "Call"
                        ],
                        [
                            "tf.split(inputs, int(n_steps), int(0))",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0].value, -1]",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "name": {
                    "value": "w_name",
                    "possible_values": [
                        [
                            "'%s_w' % name if name else None",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "mul",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.get_variable(w_name, [input_size, output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "oi",
                    "possible_values": []
                },
                "tensor": {
                    "value": "oi",
                    "possible_values": [
                        [
                            "_linear(inputs, output_size, False, scope='OI')",
                            "Call"
                        ],
                        [
                            "tf.reshape(oi, [self._batch_size, 1, output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, 1, output_size]",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "memory",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "possible_values": [
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(memory, [self._batch_size * self._mem_size, self._mem_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size * self._mem_size, self._mem_dim]",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "os",
                    "possible_values": []
                },
                "tensor": {
                    "value": "os",
                    "possible_values": [
                        [
                            "_linear(memory, output_size, bias, bias_start, scope='OS')",
                            "Call"
                        ],
                        [
                            "tf.reshape(os, [self._batch_size, self._mem_size, output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self._mem_size, output_size]",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "l",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "possible_values": [
                        [
                            "att_weight(inputs, tf.concat([c, self._memory], 2), self.echocell, scope='Line_weights')",
                            "Call"
                        ],
                        [
                            "tf.reshape(l, [self._batch_size, self._mem_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self._mem_size, 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l * self._memory",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.nn.bias_add(mul, b))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(mul, b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l * self._memory, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self._mem_dim])",
                            "Call"
                        ],
                        [
                            "final_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(ow * outputs_concat, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self._mem_dim]",
                    "possible_values": []
                }
            },
            "concat_283": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "values": {
                    "value": "states",
                    "possible_values": [
                        [
                            "tf.split(state, self._num_mem * self._num_round, 1, name='state_split')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "scope or 'attention_decoder'",
                    "possible_values": []
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "possible_values": [
                        [
                            "core_rnn_cell_impl._linear(decoder_inputs, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "_linear(decoder_inputs, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, attention_vec_size]",
                    "possible_values": []
                }
            },
            "reduce_sum_326": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v * tf.tanh(hidden_features + y)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "logits": {
                    "value": "s",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v * tf.tanh(hidden_features + y), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LN_LSTM",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "GRUCell_344": {
                "variable": {
                    "value": "lstm_cell",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "possible_values": []
                }
            },
            "DropoutWrapper_352": {
                "variable": {
                    "value": "lstm_cell",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_60": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "num_units": {
                    "value": "mem_dim",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_104": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "dlinear",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "input_",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_",
                    "possible_values": [
                        [
                            "tf.reshape(input_, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "possible_values": []
                }
            },
            "reverse_144": {
                "variable": {
                    "value": "range_",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(1, output_size + 1, 1)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[True]",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "possible_values": [
                        [
                            "'%s_b' % name if name else None",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "identity_initializer(tf.cast(range_, tf.float32))",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "possible_values": [
                        [
                            "'%s_b' % name if name else None",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.bias_add(mul, b)",
                    "possible_values": []
                }
            },
            "bias_add_154": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "value": {
                    "value": "mul",
                    "possible_values": [
                        [
                            "tf.matmul(input_, w)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.get_variable(b_name, [output_size], tf.float32, identity_initializer(tf.cast(range_, tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(b_name, [output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "scope or 'UnbalanceLinear'",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "(r, u)",
                    "possible_values": []
                },
                "value": {
                    "value": "self.unbalance_linear([inputs, self._memory], 2 * self._mem_dim, True, 1.0)",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "possible_values": []
                }
            },
            "concat_276": {
                "variable": {
                    "value": "outputs_concat",
                    "possible_values": []
                },
                "values": {
                    "value": "final_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "ow",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ow",
                    "possible_values": [
                        [
                            "att_weight(inputs, outputs_concat, self.echocell, scope='ow')",
                            "Call"
                        ],
                        [
                            "tf.reshape(ow, [self._batch_size, len(final_outputs), 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, len(final_outputs), 1]",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ow * outputs_concat",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.nn.bias_add(mul, b))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(mul, b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l * self._memory, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self._mem_dim])",
                            "Call"
                        ],
                        [
                            "final_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(ow * outputs_concat, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self.output_size]",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "Attention",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_346": {
                "variable": {
                    "value": "lstm_cell",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "possible_values": []
                }
            },
            "LSTMCell_64": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "units": {
                    "value": "mem_dim",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_135": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "tensor": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.nn.bias_add(mul, b))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(mul, b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(l * self._memory, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self._mem_dim])",
                            "Call"
                        ],
                        [
                            "final_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(ow * outputs_concat, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self._batch_size, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Gates",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Candidate",
                    "possible_values": []
                }
            },
            "concat_193": {
                "values": {
                    "value": "[c, self._memory]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "Computing",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "final_outputs[i]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "final_outputs[i]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, 1, self.output_size]",
                    "possible_values": []
                }
            },
            "LSTMCell_348": {
                "variable": {
                    "value": "lstm_cell",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "possible_values": []
                }
            },
            "random_normal_initializer_149": {
                "stddev": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_152": {
                "value": {
                    "value": "mul",
                    "possible_values": [
                        [
                            "tf.matmul(input_, w)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "tf.get_variable(b_name, [output_size], tf.float32, identity_initializer(tf.cast(range_, tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(b_name, [output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_188": {
                "x": {
                    "value": "u",
                    "possible_values": []
                }
            },
            "tanh_327": {
                "x": {
                    "value": "hidden_features + y",
                    "possible_values": []
                }
            },
            "GRUCell_69": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "units": {
                    "value": "mem_dim",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ],
                        [
                            "tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_141": {
                "input": {
                    "value": "tensor",
                    "possible_values": []
                }
            },
            "cast_146": {
                "x": {
                    "value": "range_",
                    "possible_values": [
                        [
                            "tf.reverse(tf.range(1, output_size + 1, 1), [True])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "GRUBlockCell_71": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "x": {
                    "value": "mem_dim",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ops/network.py": {
        "tensorflow": {
            "get_variable_96": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "[input.get_shape()[-1]]",
                            "List"
                        ]
                    ]
                },
                "trainable": {
                    "value": "self.trainable if trainable else False",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(wd)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "possible_values": [
                        [
                            "list(collections or [])",
                            "Call"
                        ],
                        [
                            "collections + [tf.GraphKeys.GLOBAL_VARIABLES, tf.GraphKeys.MODEL_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_144": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "features": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "var",
                    "possible_values": []
                },
                "logits": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_150": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_159": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "local_response_normalization_167": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_184": {
                "values": {
                    "value": "inputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "list(range(len(input.get_shape()) - 1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_188": {
                "inputs": {
                    "value": "inputs",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_236": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "moving_mean",
                            "Name"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "possible_values": [
                        [
                            "moving_variance",
                            "Name"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "possible_values": [
                        [
                            "self.make_var('offset', shape=shape, initializer=tf.zeros_initializer(), trainable=self.trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "self.make_var('scale', shape=shape, initializer=tf.ones_initializer(), trainable=self.trainable)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_119": {
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "xrange(len(layer_output))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_128": {
                "variable": {
                    "value": "input_groups",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "group",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "split_129": {
                "variable": {
                    "value": "kernel_groups",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[k_h, k_w, c_i / group, c_o], initializer=initializer, wd=weight_decay, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "group",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, kernel_groups)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "bias_add_137": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(output_groups, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean=mean, variance=variance, offset=offset, scale=scale, variance_epsilon=1e-05, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o], initializer=tf.constant_initializer(0.0), wd=bias_decay, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], initializer=tf.constant_initializer(0.0), wd=bias_decay, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_139": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(output_groups, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean=mean, variance=variance, offset=offset, scale=scale, variance_epsilon=1e-05, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_224": {
                "variable": {
                    "value": "(mean, variance)",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "list(range(len(input.get_shape()) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_247": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(output_groups, 3)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean=mean, variance=variance, offset=offset, scale=scale, variance_epsilon=1e-05, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "feed_in",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_178": {
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_to_collection_228": {
                "name": {
                    "value": "UPDATE_OPS_COLLECTION",
                    "possible_values": [
                        [
                            "tf.GraphKeys.UPDATE_OPS",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "update_moving_mean",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_mean, mean, decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_231": {
                "name": {
                    "value": "UPDATE_OPS_COLLECTION",
                    "possible_values": [
                        [
                            "tf.GraphKeys.UPDATE_OPS",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "update_moving_variance",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_variance, variance, decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_214": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_219": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_initializer_266": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "constant_initializer_134": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "ones_initializer_202": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_205": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "ops/ops.py": {
        "tensorflow": {
            "get_variable_129": {
                "variable": {
                    "value": "matrix",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "bias_term",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(bias_start, dtype=dtype)",
                    "possible_values": []
                }
            },
            "get_global_step_148": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_256": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_370": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(outputs, real_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, original_shape)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * r + d",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "real_beta",
                    "possible_values": [
                        [
                            "variables.model_variable('beta', shape=params_shape, dtype=dtype, initializer=beta_initializer, collections=beta_collections, trainable=trainable_beta)",
                            "Call"
                        ],
                        [
                            "tf.zeros(params_shape, name='beta')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_value_375": {
                "variable": {
                    "value": "is_training_value",
                    "possible_values": []
                },
                "pylist": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "signed_sqrt",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "l2_norm",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "l2_normalize_57": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "len(inputs.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat(args, 1)",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_146": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_150": {
                "variable": {
                    "value": "start",
                    "possible_values": []
                },
                "value": {
                    "value": "start",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "convert_to_tensor_151": {
                "variable": {
                    "value": "stop",
                    "possible_values": []
                },
                "value": {
                    "value": "stop",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(stop, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "convert_to_tensor_152": {
                "variable": {
                    "value": "start_value",
                    "possible_values": []
                },
                "value": {
                    "value": "start_value",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_value, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "convert_to_tensor_153": {
                "variable": {
                    "value": "stop_value",
                    "possible_values": []
                },
                "value": {
                    "value": "stop_value",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(stop_value, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNorm",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "possible_values": [
                        [
                            "[-1, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "[-1, channels, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "beta",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "fakebeta",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "real_beta",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "beta",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "beta",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "fakebeta",
                    "possible_values": []
                }
            },
            "ones_317": {
                "variable": {
                    "value": "gamma",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ],
                        [
                            "inputs_shape[1:2]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "gamma",
                    "possible_values": []
                }
            },
            "fused_batch_norm_345": {
                "variable": {
                    "value": "(outputs, mean, variance)",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable_gamma)",
                            "Call"
                        ],
                        [
                            "tf.ones(params_shape, name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "tf.zeros(params_shape, name='fakebeta')",
                            "Call"
                        ],
                        [
                            "tf.zeros(params_shape, name='fakebeta')",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_394": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(outputs, real_beta)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs, original_shape)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "outputs * r + d",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "original_shape",
                    "possible_values": [
                        [
                            "inputs.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_51": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_51": {
                "x": {
                    "value": "tf.abs(inputs)",
                    "possible_values": []
                }
            },
            "warn_65": {
                "msg": {
                    "value": "%s: The input_size parameter is deprecated.",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "possible_values": []
                }
            },
            "split_82": {
                "variable": {
                    "value": "(r, u)",
                    "possible_values": []
                },
                "value": {
                    "value": "_linear([inputs, state], 2 * self._num_units, True, 1.0)",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "case_161": {
                "pred_fn_pairs": {
                    "value": "pred_fn_pairs",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "default": {
                    "value": "default",
                    "possible_values": [
                        [
                            "lambda : stop_value",
                            "Lambda"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_initializer_324": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_335": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rsqrt_348": {
                "variable": {
                    "value": "moving_inv",
                    "possible_values": []
                },
                "x": {
                    "value": "moving_variance + epsilon",
                    "possible_values": []
                }
            },
            "stop_gradient_349": {
                "variable": {
                    "value": "r",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.clip_by_value(tf.sqrt(variance + epsilon) * moving_inv, 1 / RMAX, RMAX)",
                    "possible_values": []
                }
            },
            "stop_gradient_352": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.clip_by_value((mean - moving_mean) * moving_inv, -DMAX, DMAX)",
                    "possible_values": []
                }
            },
            "fused_batch_norm_358": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "variables.model_variable('gamma', shape=params_shape, dtype=dtype, initializer=gamma_initializer, collections=gamma_collections, trainable=trainable_gamma)",
                            "Call"
                        ],
                        [
                            "tf.ones(params_shape, name='gamma')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "tf.zeros(params_shape, name='fakebeta')",
                            "Call"
                        ],
                        [
                            "tf.zeros(params_shape, name='fakebeta')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "moving_mean",
                    "possible_values": [
                        [
                            "variables.model_variable('moving_mean', shape=params_shape, dtype=dtype, initializer=moving_mean_initializer, trainable=False, collections=moving_mean_collections)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_variance",
                    "possible_values": [
                        [
                            "variables.model_variable('moving_variance', shape=params_shape, dtype=dtype, initializer=moving_variance_initializer, trainable=False, collections=moving_variance_collections)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "False",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "possible_values": [
                        [
                            "DATA_FORMAT_NHWC",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_to_collections_389": {
                "names": {
                    "value": "ops.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "value": {
                    "value": "update_mean",
                    "possible_values": []
                }
            },
            "add_to_collections_390": {
                "names": {
                    "value": "ops.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "value": {
                    "value": "update_variance",
                    "possible_values": []
                }
            },
            "abs_51": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(inputs, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "Gates",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Candidate",
                    "possible_values": []
                }
            },
            "concat_134": {
                "values": {
                    "value": "args",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "constant_initializer_140": {
                "value": {
                    "value": "bias_start",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "inputs.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "polynomial_decay_157": {
                "learning_rate": {
                    "value": "start_value",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_value, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step - start",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "stop - start",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "stop_value",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(stop_value, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "power": {
                    "value": "1.0",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "zeros_initializer_291": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_308": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "x": {
                    "value": "u",
                    "possible_values": []
                }
            },
            "clip_by_value_349": {
                "t": {
                    "value": "tf.sqrt(variance + epsilon) * moving_inv",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1 / RMAX",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "RMAX",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_352": {
                "t": {
                    "value": "(mean - moving_mean) * moving_inv",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-DMAX",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "DMAX",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_349": {
                "x": {
                    "value": "variance + epsilon",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_52": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_56": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "possible_values": []
                }
            },
            "random_brightness_67": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "possible_values": []
                }
            },
            "random_contrast_69": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "possible_values": []
                }
            },
            "to_float_88": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_49": {
                "name": {
                    "value": "image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_61": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_63": {
                "name": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "image_86": {
                "name": {
                    "value": "image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "possible_values": []
                }
            },
            "image_94": {
                "name": {
                    "value": "resized_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(resized_image, 0)",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_94": {
                "input": {
                    "value": "resized_image",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/googlenet_preprocessing.py": {
        "tensorflow": {
            "split_76": {
                "variable": {
                    "value": "channels",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "tf.split(image, num_channels, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "merge_44": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_133": {
                "t": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "possible_values": []
                }
            },
            "name_scope_162": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_164": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_178": {
                "name": {
                    "value": "cropped_resized_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "random_flip_left_right_183": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(distorted_image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                }
            },
            "image_191": {
                "name": {
                    "value": "final_distorted_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "name_scope_218": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_220": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_224": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "resize_bilinear_225": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "random_brightness_103": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "random_saturation_104": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_saturation_106": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_107": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "random_brightness_110": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "random_saturation_111": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_112": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_contrast_113": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(distorted_image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(distorted_image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "random_saturation_115": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_116": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "random_contrast_117": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_118": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_contrast_120": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_121": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_brightness_122": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "random_saturation_123": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_125": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_saturation_126": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_contrast_127": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_128": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "_mean_image_subtraction(image, [_R_MEAN, _G_MEAN, _B_MEAN])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0",
                    "possible_values": []
                }
            },
            "equal_45": {
                "x": {
                    "value": "sel",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "subtract_160": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "multiply_161": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "subtract_200": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "multiply_201": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_127": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_129": {
                "variable": {
                    "value": "cast",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "multiply_131": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "cast",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "1.0 / 255.0",
                            "BinOp"
                        ],
                        [
                            "1.0 / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_145": {
                "name": {
                    "value": "cropped_resized_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "random_flip_left_right_150": {
                "variable": {
                    "value": "distorted_image",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_158": {
                "name": {
                    "value": "final_distorted_image",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "possible_values": []
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_188": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_190": {
                "variable": {
                    "value": "cast",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "multiply_192": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "cast",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "1.0 / 255.0",
                            "BinOp"
                        ],
                        [
                            "1.0 / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_196": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "resize_bilinear_197": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_199": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "input": {
                    "value": "distorted_image",
                    "possible_values": [
                        [
                            "apply_with_random_selector(image, lambda x, method: tf.image.resize_images(x, [height, width], method=method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.multiply(cast, scale)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_69": {
                "variable": {
                    "value": "original_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_71": {
                "variable": {
                    "value": "rank_assertion",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "possible_values": []
                }
            },
            "Assert_78": {
                "variable": {
                    "value": "size_assertion",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "possible_values": []
                }
            },
            "to_int32_84": {
                "variable": {
                    "value": "offsets",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.pack([offset_height, offset_width, 0])",
                    "possible_values": []
                }
            },
            "Assert_134": {
                "variable": {
                    "value": "crop_size_assert",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "channels",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "convert_to_tensor_252": {
                "variable": {
                    "value": "smallest_side",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "to_float_254": {
                "variable": {
                    "value": "height",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_255": {
                "variable": {
                    "value": "width",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_256": {
                "variable": {
                    "value": "smallest_side",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_258": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "possible_values": []
                }
            },
            "to_int32_261": {
                "variable": {
                    "value": "new_height",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "possible_values": []
                }
            },
            "to_int32_262": {
                "variable": {
                    "value": "new_width",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "possible_values": []
                }
            },
            "convert_to_tensor_277": {
                "variable": {
                    "value": "smallest_side",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "shape_279": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_283": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "resize_bilinear_284": {
                "variable": {
                    "value": "resized_image",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "variable": {
                    "value": "resized_image",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_320": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_338": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.pack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_122": {
                "variable": {
                    "value": "image_rank",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "possible_values": []
                }
            },
            "Assert_123": {
                "variable": {
                    "value": "rank_assert",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "possible_values": []
                }
            },
            "Assert_150": {
                "variable": {
                    "value": "height_assert",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "possible_values": []
                }
            },
            "Assert_154": {
                "variable": {
                    "value": "width_assert",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "possible_values": []
                }
            },
            "concat_233": {
                "values": {
                    "value": "channels",
                    "possible_values": [
                        [
                            "tf.split(image, num_channels, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "random_flip_left_right_322": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "tf.rank(image)",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "logical_and_79": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "possible_values": []
                }
            },
            "slice_90": {
                "input_": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.pack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([rank_assertion], tf.pack([crop_height, crop_width, original_shape[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "image_list[0]",
                    "possible_values": []
                }
            },
            "logical_and_135": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "greater_258": {
                "x": {
                    "value": "height",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_72": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_80": {
                "x": {
                    "value": "original_shape[0]",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "possible_values": []
                }
            },
            "greater_equal_81": {
                "x": {
                    "value": "original_shape[1]",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "possible_values": []
                }
            },
            "equal_124": {
                "x": {
                    "value": "image_rank",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "greater_equal_136": {
                "x": {
                    "value": "image_height",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "possible_values": []
                }
            },
            "greater_equal_137": {
                "x": {
                    "value": "image_width",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_151": {
                "x": {
                    "value": "height",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_155": {
                "x": {
                    "value": "width",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_193": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "control_flow_ops.with_dependencies([size_assertion], tf.slice(image, offsets, cropped_shape))",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_video_classifier.py": {
        "tensorflow": {
            "DEFINE_string_42": {
                "name": {
                    "value": "mode",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "possible_values": []
                },
                "help": {
                    "value": "Run mode. train or test or extract.",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "master",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "train_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "possible_values": []
                }
            },
            "DEFINE_string_53": {
                "name": {
                    "value": "eval_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/eval_log/",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where event logs are written to.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "num_clones",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "worker_replicas",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "num_ps_tasks",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "log_every_n_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "save_summaries_secs",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "save_interval_secs",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "trace_every_n_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the timeline is saved, in seconds.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "task",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "weight_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "possible_values": []
                }
            },
            "DEFINE_string_100": {
                "name": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "possible_values": []
                }
            },
            "DEFINE_float_105": {
                "name": {
                    "value": "adadelta_rho",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "possible_values": []
                }
            },
            "DEFINE_float_109": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "adam_beta1",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "possible_values": []
                }
            },
            "DEFINE_float_117": {
                "name": {
                    "value": "adam_beta2",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "possible_values": []
                }
            },
            "DEFINE_float_121": {
                "name": {
                    "value": "opt_epsilon",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "possible_values": []
                }
            },
            "DEFINE_float_123": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "possible_values": []
                }
            },
            "DEFINE_float_126": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "possible_values": []
                }
            },
            "DEFINE_float_130": {
                "name": {
                    "value": "ftrl_l1",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "possible_values": []
                }
            },
            "DEFINE_float_133": {
                "name": {
                    "value": "ftrl_l2",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "possible_values": []
                }
            },
            "DEFINE_float_136": {
                "name": {
                    "value": "momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "possible_values": []
                }
            },
            "DEFINE_float_140": {
                "name": {
                    "value": "rmsprop_momentum",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "possible_values": []
                }
            },
            "DEFINE_float_142": {
                "name": {
                    "value": "rmsprop_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "possible_values": []
                }
            },
            "DEFINE_string_148": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", \"piecewise\", or \"polynomial\"",
                    "possible_values": []
                }
            },
            "DEFINE_float_154": {
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "possible_values": []
                }
            },
            "DEFINE_string_156": {
                "name": {
                    "value": "learning_rate_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "possible_values": []
                },
                "help": {
                    "value": "Setting the exact learning rate steps when FLAGS.learning_rate is set as 0.",
                    "possible_values": []
                }
            },
            "DEFINE_float_160": {
                "name": {
                    "value": "end_learning_rate",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "possible_values": []
                }
            },
            "DEFINE_float_164": {
                "name": {
                    "value": "label_smoothing",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "possible_values": []
                }
            },
            "DEFINE_float_167": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "possible_values": []
                }
            },
            "DEFINE_string_170": {
                "name": {
                    "value": "decay_iteration",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations after which learning rate decays.",
                    "possible_values": []
                }
            },
            "DEFINE_bool_174": {
                "name": {
                    "value": "sync_replicas",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_178": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "possible_values": []
                }
            },
            "DEFINE_float_182": {
                "name": {
                    "value": "moving_average_decay",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "possible_values": []
                }
            },
            "DEFINE_float_187": {
                "name": {
                    "value": "grad_clipping",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "Gradient cliping by norm.",
                    "possible_values": []
                }
            },
            "DEFINE_string_199": {
                "name": {
                    "value": "dataset_list",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "possible_values": []
                },
                "help": {
                    "value": "The list of the dataset to load.",
                    "possible_values": []
                }
            },
            "DEFINE_string_202": {
                "name": {
                    "value": "dataset_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_205": {
                "name": {
                    "value": "NUM_CLASSES",
                    "possible_values": []
                },
                "default": {
                    "value": "101",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of classes.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_209": {
                "name": {
                    "value": "labels_offset",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "possible_values": []
                }
            },
            "DEFINE_string_215": {
                "name": {
                    "value": "model_name",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "possible_values": []
                }
            },
            "DEFINE_string_218": {
                "name": {
                    "value": "preprocessing_name",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_222": {
                "name": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_225": {
                "name": {
                    "value": "resize_image_size",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "possible_values": []
                }
            },
            "DEFINE_integer_228": {
                "name": {
                    "value": "train_image_size",
                    "possible_values": []
                },
                "default": {
                    "value": "224",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "possible_values": []
                }
            },
            "DEFINE_integer_231": {
                "name": {
                    "value": "max_number_of_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_235": {
                "name": {
                    "value": "top_k",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "possible_values": []
                },
                "help": {
                    "value": "Top k accuracy.",
                    "possible_values": []
                }
            },
            "DEFINE_string_238": {
                "name": {
                    "value": "feature_dir",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where features are written to.",
                    "possible_values": []
                }
            },
            "DEFINE_string_242": {
                "name": {
                    "value": "rnn",
                    "possible_values": []
                },
                "default": {
                    "value": "shuttleNet",
                    "possible_values": []
                },
                "help": {
                    "value": "The list of the dataset to load.",
                    "possible_values": []
                }
            },
            "DEFINE_string_245": {
                "name": {
                    "value": "echocell",
                    "possible_values": []
                },
                "default": {
                    "value": "GRUBlock",
                    "possible_values": []
                },
                "help": {
                    "value": "The list of the dataset to load.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_248": {
                "name": {
                    "value": "num_rnn",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of rnn layers.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_256": {
                "name": {
                    "value": "n_steps",
                    "possible_values": []
                },
                "default": {
                    "value": "16",
                    "possible_values": []
                },
                "help": {
                    "value": "Time steps for LSTM.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_259": {
                "name": {
                    "value": "length",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "possible_values": []
                },
                "help": {
                    "value": "Sample length.",
                    "possible_values": []
                }
            },
            "DEFINE_string_261": {
                "name": {
                    "value": "modality",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "Modality of data.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_264": {
                "name": {
                    "value": "read_stride",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "possible_values": []
                },
                "help": {
                    "value": "Read stride of video frames.",
                    "possible_values": []
                }
            },
            "DEFINE_string_275": {
                "name": {
                    "value": "checkpoint_path",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "possible_values": []
                }
            },
            "DEFINE_string_279": {
                "name": {
                    "value": "npy_weights",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a weights.npy from which to fine-tune.",
                    "possible_values": []
                }
            },
            "DEFINE_string_287": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "possible_values": []
                }
            },
            "DEFINE_string_292": {
                "name": {
                    "value": "checkpoint_exclude_end_scopes",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "possible_values": []
                }
            },
            "DEFINE_string_297": {
                "name": {
                    "value": "trainable_scopes",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "possible_values": []
                }
            },
            "DEFINE_integer_306": {
                "name": {
                    "value": "eval_interval_secs",
                    "possible_values": []
                },
                "default": {
                    "value": "1200",
                    "possible_values": []
                },
                "help": {
                    "value": "Interval between evaluation runs.",
                    "possible_values": []
                }
            },
            "Graph_628": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_733": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_collection_468": {
                "variable": {
                    "value": "update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_544": {
                "variable": {
                    "value": "update_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "possible_values": []
                }
            },
            "merge_554": {
                "variable": {
                    "value": "summary_op",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "possible_values": []
                }
            },
            "ConfigProto_560": {
                "variable": {
                    "value": "sess_config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "possible_values": []
                }
            },
            "in_top_k_666": {
                "variable": {
                    "value": "top_k_op",
                    "possible_values": []
                },
                "targets": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.split(logits, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "test_label",
                    "possible_values": [
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "FLAGS.top_k",
                    "possible_values": []
                }
            },
            "merge_all_668": {
                "variable": {
                    "value": "summary_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_669": {
                "variable": {
                    "value": "summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "possible_values": []
                }
            },
            "Saver_682": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "possible_values": [
                        [
                            "train_util._get_variables_to_restore()",
                            "Call"
                        ],
                        [
                            "variable_averages.variables_to_restore(slim.get_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ],
                        [
                            "variable_averages.variables_to_restore(slim.get_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "Supervisor_683": {
                "variable": {
                    "value": "sv",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "None",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "None",
                    "possible_values": []
                },
                "global_step": {
                    "value": "None",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "in_top_k_773": {
                "variable": {
                    "value": "top_k_op",
                    "possible_values": []
                },
                "targets": {
                    "value": "predicts",
                    "possible_values": [
                        [
                            "tf.split(predicts, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "test_label",
                    "possible_values": [
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "FLAGS.top_k",
                    "possible_values": []
                }
            },
            "Saver_786": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "possible_values": [
                        [
                            "train_util._get_variables_to_restore()",
                            "Call"
                        ],
                        [
                            "variable_averages.variables_to_restore(slim.get_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ],
                        [
                            "variable_averages.variables_to_restore(slim.get_variables())",
                            "Call"
                        ],
                        [
                            "slim.get_variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "Supervisor_787": {
                "variable": {
                    "value": "sv",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "None",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "None",
                    "possible_values": []
                },
                "global_step": {
                    "value": "None",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "latest_checkpoint_797": {
                "variable": {
                    "value": "model_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "set_verbosity_854": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "run_864": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_314": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_collection_479": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_487": {
                "variable": {
                    "value": "variable_averages",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_503": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "train_util._configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, variable_averages=variable_averages, variables_to_average=moving_average_variables, total_num_replicas=FLAGS.worker_replicas)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step_tensor)",
                            "Call"
                        ],
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step_tensor)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "possible_values": []
                }
            },
            "IsDirectory_623": {
                "dirname": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ],
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_624": {
                "msg": {
                    "value": "Training directory %s not found.",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ],
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_672": {
                "variable": {
                    "value": "variable_averages",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step_tensor",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "IsDirectory_728": {
                "dirname": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ],
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "fatal_729": {
                "msg": {
                    "value": "Training directory %s not found.",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_dir",
                    "possible_values": [
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ],
                        [
                            "FLAGS.train_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_776": {
                "variable": {
                    "value": "variable_averages",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step_tensor",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_795": {
                "msg": {
                    "value": "'Starting evaluation at ' + time.strftime('%Y-%m-%d-%H:%M:%S', time.localtime())",
                    "possible_values": []
                }
            },
            "device_326": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "possible_values": []
                }
            },
            "device_353": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "possible_values": []
                }
            },
            "split_367": {
                "variable": {
                    "value": "split_images",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "deploy_config.num_clones",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_373": {
                "variable": {
                    "value": "split_cnn_labels",
                    "possible_values": []
                },
                "value": {
                    "value": "cnn_labels",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "tf.reshape(cnn_labels, [1, -1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cnn_labels, [FLAGS.n_steps, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_labels, [-1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "deploy_config.num_clones",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_collection_392": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "possible_values": []
                }
            },
            "concat_435": {
                "variable": {
                    "value": "cnn_outputs",
                    "possible_values": []
                },
                "values": {
                    "value": "cnn_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(values=cnn_outputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_outputs, [FLAGS.n_steps, total_video_num] + output_shape[1:])",
                            "Call"
                        ],
                        [
                            "tf.split(cnn_outputs, deploy_config.num_clones, 1)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(output, [-1] + output_shape[1:]) for output in cnn_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "variable": {
                    "value": "cnn_outputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnn_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(values=cnn_outputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_outputs, [FLAGS.n_steps, total_video_num] + output_shape[1:])",
                            "Call"
                        ],
                        [
                            "tf.split(cnn_outputs, deploy_config.num_clones, 1)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(output, [-1] + output_shape[1:]) for output in cnn_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.n_steps, total_video_num] + output_shape[1:]",
                    "possible_values": []
                }
            },
            "split_440": {
                "variable": {
                    "value": "cnn_outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "cnn_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(values=cnn_outputs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_outputs, [FLAGS.n_steps, total_video_num] + output_shape[1:])",
                            "Call"
                        ],
                        [
                            "tf.split(cnn_outputs, deploy_config.num_clones, 1)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(output, [-1] + output_shape[1:]) for output in cnn_outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "deploy_config.num_clones",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "device_495": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "possible_values": []
                }
            },
            "scalar_527": {
                "name": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "possible_values": []
                }
            },
            "get_collection_550": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_697": {
                "variable": {
                    "value": "model_path",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "info_799": {
                "msg": {
                    "value": "Skipping evaluation. No checkpoint found in: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "global_step_807": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "global_step_tensor.name",
                    "possible_values": []
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "cnn_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnn_labels",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "tf.reshape(cnn_labels, [1, -1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cnn_labels, [FLAGS.n_steps, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_labels, [-1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, FLAGS.NUM_CLASSES]",
                    "possible_values": []
                }
            },
            "tile_371": {
                "variable": {
                    "value": "cnn_labels",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn_labels",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "tf.reshape(cnn_labels, [1, -1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cnn_labels, [FLAGS.n_steps, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_labels, [-1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[FLAGS.n_steps, 1, 1]",
                    "possible_values": []
                }
            },
            "reshape_372": {
                "variable": {
                    "value": "cnn_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cnn_labels",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "tf.reshape(cnn_labels, [1, -1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ],
                        [
                            "tf.tile(cnn_labels, [FLAGS.n_steps, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cnn_labels, [-1, FLAGS.NUM_CLASSES])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, FLAGS.NUM_CLASSES]",
                    "possible_values": []
                }
            },
            "reshape_376": {
                "variable": {
                    "value": "split_rnn_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.n_steps, total_video_num, FLAGS.NUM_CLASSES]",
                    "possible_values": []
                }
            },
            "split_378": {
                "variable": {
                    "value": "split_rnn_labels",
                    "possible_values": []
                },
                "value": {
                    "value": "split_rnn_labels",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [FLAGS.n_steps, total_video_num, FLAGS.NUM_CLASSES])",
                            "Call"
                        ],
                        [
                            "tf.split(labels, deploy_config.num_clones, 0)",
                            "Call"
                        ],
                        [
                            "tf.split(split_rnn_labels, deploy_config.num_clones, 1)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(label, [FLAGS.n_steps * each_video_num, FLAGS.NUM_CLASSES]) for label in split_rnn_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "deploy_config.num_clones",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "split_383": {
                "variable": {
                    "value": "split_rnn_labels",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "deploy_config.num_clones",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_424": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.split(logits, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "device_433": {
                "device_name": {
                    "value": "deploy_config.clone_device(0)",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_461": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.split(logits, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "histogram_474": {
                "name": {
                    "value": "'activations/' + end_point",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_475": {
                "name": {
                    "value": "'sparsity/' + end_point",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "possible_values": []
                }
            },
            "scalar_480": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_498": {
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "train_util._configure_learning_rate(global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_664": {
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.split(logits, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "FLAGS.n_steps",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_665": {
                "value": {
                    "value": "test_label",
                    "possible_values": [
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "FLAGS.n_steps",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "info_695": {
                "msg": {
                    "value": "'Starting evaluation at ' + time.strftime('%Y-%m-%d-%H:%M:%S', time.localtime())",
                    "possible_values": []
                }
            },
            "global_step_705": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "global_step_tensor.name",
                    "possible_values": []
                }
            },
            "split_771": {
                "value": {
                    "value": "predicts",
                    "possible_values": [
                        [
                            "tf.split(predicts, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "FLAGS.n_steps",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_772": {
                "value": {
                    "value": "test_label",
                    "possible_values": [
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.split(test_label, FLAGS.n_steps, 0)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "FLAGS.n_steps",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "info_805": {
                "msg": {
                    "value": "Loading model from checkpoint: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(FLAGS.train_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(FLAGS.train_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_808": {
                "msg": {
                    "value": "Successfully loaded %s at global step = %d.",
                    "possible_values": []
                },
                "*args": {
                    "value": "os.path.basename(model_path)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_408": {
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "possible_values": [
                        [
                            "clones[0].outputs",
                            "Attribute"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "possible_values": []
                },
                "scope": {
                    "value": "aux_loss",
                    "possible_values": []
                }
            },
            "reshape_442": {
                "tensor": {
                    "value": "output",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + output_shape[1:]",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_458": {
                "logits": {
                    "value": "end_points['AuxLogits']",
                    "possible_values": [
                        [
                            "clones[0].outputs",
                            "Attribute"
                        ]
                    ]
                },
                "onehot_labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.NUM_CLASSES)",
                            "Call"
                        ],
                        [
                            "split_cnn_labels[0]",
                            "Subscript"
                        ],
                        [
                            "split_rnn_labels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "FLAGS.label_smoothing",
                    "possible_values": []
                },
                "weights": {
                    "value": "0.4",
                    "possible_values": []
                },
                "scope": {
                    "value": "aux_loss",
                    "possible_values": []
                }
            },
            "zero_fraction_476": {
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_699": {
                "msg": {
                    "value": "Skipping evaluation. No checkpoint found in: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_dir",
                    "possible_values": []
                }
            },
            "info_703": {
                "msg": {
                    "value": "Loading model from checkpoint: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(FLAGS.train_dir)",
                            "Call"
                        ],
                        [
                            "tf.train.latest_checkpoint(FLAGS.train_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_706": {
                "msg": {
                    "value": "Successfully loaded %s at global step = %d.",
                    "possible_values": []
                },
                "*args": {
                    "value": "os.path.basename(model_path)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ],
                        [
                            "tf.train.global_step(sess, global_step_tensor.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_380": {
                "tensor": {
                    "value": "label",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.n_steps * each_video_num, FLAGS.NUM_CLASSES]",
                    "possible_values": []
                }
            },
            "error_719": {
                "msg": {
                    "value": "Evaluation failed.",
                    "possible_values": []
                }
            }
        }
    }
}