{
    "code2vec/common.py": {
        "tensorflow": {
            "cast_162": {
                "variable": {
                    "value": "bool_tensor_as_int32",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bool_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_163": {
                "variable": {
                    "value": "cumsum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bool_tensor_as_int32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(bool_tensor, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_164": {
                "x": {
                    "value": "tf.equal(cumsum, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bool_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_164": {
                "x": {
                    "value": "cumsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cumsum(bool_tensor_as_int32, axis=-1, exclusive=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/keras_attention_layer.py": {
        "tensorflow": {
            "dot_53": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "actual_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.attention_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.dot(actual_input, self.attention_param)",
                            "Call"
                        ],
                        [
                            "K.softmax(attention_weights, axis=1)",
                            "Call"
                        ],
                        [
                            "attention_weights + mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "actual_input * attention_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "K.expand_dims(mask, axis=2)",
                            "Call"
                        ],
                        [
                            "K.log(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "K.expand_dims(mask, axis=2)",
                            "Call"
                        ],
                        [
                            "K.log(mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/keras_checkpoint_saver_callback.py": {
        "tensorflow": {}
    },
    "code2vec/keras_model.py": {
        "tensorflow": {
            "Input_40": {
                "variable": {
                    "value": "path_source_token_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_41": {
                "variable": {
                    "value": "path_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_42": {
                "variable": {
                    "value": "path_target_token_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_43": {
                "variable": {
                    "value": "context_valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "token_embedding_shared_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.vocabs.token_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.config.TOKEN_EMBEDDINGS_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "token_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_74": {
                "variable": {
                    "value": "self.keras_train_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[path_source_token_input, path_input, path_target_token_input, context_valid_mask]",
                            "List"
                        ],
                        [
                            "(input_tensors.path_source_token_indices, input_tensors.path_indices, input_tensors.path_target_token_indices, input_tensors.context_valid_mask)",
                            "Tuple"
                        ],
                        [
                            "inputs + (input_tensors.path_source_token_strings, input_tensors.path_strings, input_tensors.path_target_token_strings)",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "target_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(self.vocabs.target_vocab.size, use_bias=False, activation='softmax', name='target_index')(code_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_86": {
                "variable": {
                    "value": "self.keras_eval_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[path_source_token_input, path_input, path_target_token_input, context_valid_mask]",
                            "List"
                        ],
                        [
                            "(input_tensors.path_source_token_indices, input_tensors.path_indices, input_tensors.path_target_token_indices, input_tensors.context_valid_mask)",
                            "Tuple"
                        ],
                        [
                            "inputs + (input_tensors.path_source_token_strings, input_tensors.path_strings, input_tensors.path_target_token_strings)",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[target_index, topk_predicted_words]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "code2vec-keras-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_95": {
                "variable": {
                    "value": "self.keras_model_predict_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[path_source_token_input, path_input, path_target_token_input, context_valid_mask]",
                            "List"
                        ],
                        [
                            "(input_tensors.path_source_token_indices, input_tensors.path_indices, input_tensors.path_target_token_indices, input_tensors.context_valid_mask)",
                            "Tuple"
                        ],
                        [
                            "inputs + (input_tensors.path_source_token_strings, input_tensors.path_strings, input_tensors.path_target_token_strings)",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "predict_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(KerasPredictionModelOutput(target_index=target_index, code_vectors=code_vectors, attention_weights=attention_weights, topk_predicted_words=topk_predicted_words, topk_predicted_words_scores=topk_predicted_words_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorBoard_160": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/scalars/train_' + common.now_str()",
                            "BinOp"
                        ]
                    ]
                },
                "update_freq": {
                    "value": "self.config.NUM_BATCHES_TO_LOG_PROGRESS * self.config.TRAIN_BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_266": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.config.entire_model_load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_286": {
                "variable": {
                    "value": "self._checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.keras_train_model.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model": {
                    "value": "self.keras_train_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointManager_293": {
                "variable": {
                    "value": "self._checkpoint_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "self._get_checkpoint()",
                    "type": "Call",
                    "possible_values": []
                },
                "directory": {
                    "value": "self.config.entire_model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.MAX_TO_KEEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "input_dim": {
                    "value": "self.vocabs.path_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.config.PATH_EMBEDDINGS_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "path_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "rate": {
                    "value": "1 - self.config.DROPOUT_KEEP_RATE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TimeDistributed_61": {
                "layer": {
                    "value": "Dense(self.config.CODE_VECTOR_SIZE, use_bias=False, activation='tanh')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_69": {
                "units": {
                    "value": "self.vocabs.target_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "target_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_62": {
                "units": {
                    "value": "self.config.CODE_VECTOR_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_105": {
                "x": {
                    "value": "word_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.target_vocab.special_words.OOV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "regex_full_match_106": {
                "input": {
                    "value": "word_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "^[a-zA-Z\\\\|]+$",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/keras_topk_word_predictions_layer.py": {
        "tensorflow": {
            "top_k_31": {
                "variable": {
                    "value": "(top_k_pred_scores, top_k_pred_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_32": {
                "variable": {
                    "value": "top_k_pred_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_k_pred_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(top_k_pred_indices, dtype=self.index_to_word_table.key_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.index_to_word_table.key_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/keras_word_prediction_layer.py": {
        "tensorflow": {
            "cast_33": {
                "variable": {
                    "value": "top_k_pred_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.top_k(y_pred, k=self.top_k).indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.index_to_word_table.key_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_49": {
                "variable": {
                    "value": "first_legal_predicted_target_word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "first_legal_predicted_target_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common.tf_get_first_true(legal_predicted_target_words_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_50": {
                "variable": {
                    "value": "first_legal_predicted_word_string",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "predicted_target_words_strings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.index_to_word_table.lookup(top_k_pred_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "first_legal_predicted_target_word_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(first_legal_predicted_target_word_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "first_legal_predicted_word_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(predicted_target_words_strings, first_legal_predicted_target_word_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "legal_predicted_target_words_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(top_k_pred_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_33": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "top_k_pred_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.top_k(y_pred, k=self.top_k).indices, dtype=self.index_to_word_table.key_dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code2vec/keras_words_subtoken_metrics.py": {
        "tensorflow": {
            "cast_31": {
                "variable": {
                    "value": "true_target_word_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_target_word",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.index_to_word_table.key_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "true_target_word_string",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "true_target_word_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_true_target_word_string(true_target_word)",
                            "Call"
                        ],
                        [
                            "tf.reshape(true_target_word_string, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_split_51": {
                "variable": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "source": {
                    "value": "true_target_word_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_true_target_word_string(true_target_word)",
                            "Call"
                        ],
                        [
                            "tf.reshape(true_target_word_string, [-1])",
                            "Call"
                        ]
                    ]
                },
                "sep": {
                    "value": "self.subtokens_delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_split_52": {
                "variable": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "source": {
                    "value": "predicted_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_prediction_from_topk(topk_predicted_words)",
                            "Call"
                        ]
                    ]
                },
                "sep": {
                    "value": "self.subtokens_delimiter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_53": {
                "variable": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(true_target_word_string, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(true_target_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_target_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "<PAD>",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_dense_54": {
                "variable": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(predicted_word, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(prediction_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "<PAD>",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_55": {
                "variable": {
                    "value": "true_target_subwords_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(true_target_word_string, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(true_target_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_target_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "<PAD>",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_56": {
                "variable": {
                    "value": "prediction_subwords_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(predicted_word, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(prediction_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "<PAD>",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "variable": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(true_target_word_string, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(true_target_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_target_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(predicted_word, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(prediction_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_any_64": {
                "variable": {
                    "value": "true_target_subwords__in__prediction_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.equal(true_target_subwords, tf.transpose(prediction_subwords, perm=[0, 2, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_66": {
                "variable": {
                    "value": "prediction_subwords__in__true_target_subwords",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.equal(prediction_subwords, tf.transpose(true_target_subwords, perm=[0, 2, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "batch_true_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.logical_and(prediction_subwords__in__true_target_subwords, prediction_subwords_mask), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "batch_false_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.logical_and(~prediction_subwords__in__true_target_subwords, prediction_subwords_mask), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "batch_false_negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.logical_and(~true_target_subwords__in__prediction_subwords, true_target_subwords_mask), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_95": {
                "variable": {
                    "value": "first_legal_predicted_target_word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "first_legal_predicted_target_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common.tf_get_first_true(legal_predicted_target_words_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_96": {
                "variable": {
                    "value": "first_legal_predicted_word_string",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "topk_predicted_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions if self.topk_predicted_words is None else self.topk_predicted_words",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "first_legal_predicted_target_word_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(first_legal_predicted_target_word_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "first_legal_predicted_word_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(topk_predicted_words, first_legal_predicted_target_word_idx)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_no_nan_113": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tp + self.fp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_119": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tp + self.fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_125": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tp + self.fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_126": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tp + self.fp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_127": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * precision * recall",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "precision + recall + K.epsilon()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "legal_predicted_target_words_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(topk_predicted_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_64": {
                "x": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(true_target_word_string, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(true_target_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_target_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(prediction_subwords, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_66": {
                "x": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(predicted_word, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(prediction_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(true_target_subwords, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "tf.logical_and(prediction_subwords__in__true_target_subwords, prediction_subwords_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "tf.logical_and(~prediction_subwords__in__true_target_subwords, prediction_subwords_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "tf.logical_and(~true_target_subwords__in__prediction_subwords, true_target_subwords_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "prediction_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(predicted_word, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(prediction_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prediction_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.string_split(true_target_word_string, sep=self.subtokens_delimiter)",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(true_target_subwords, default_value='<PAD>')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(true_target_subwords, -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_70": {
                "x": {
                    "value": "prediction_subwords__in__true_target_subwords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(tf.equal(prediction_subwords, tf.transpose(true_target_subwords, perm=[0, 2, 1])), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prediction_subwords_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(prediction_subwords, '<PAD>')",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_73": {
                "x": {
                    "value": "~prediction_subwords__in__true_target_subwords",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "prediction_subwords_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(prediction_subwords, '<PAD>')",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_76": {
                "x": {
                    "value": "~true_target_subwords__in__prediction_subwords",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "true_target_subwords_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(true_target_subwords, '<PAD>')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "topk_predicted_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions if self.topk_predicted_words is None else self.topk_predicted_words",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "epsilon_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/my_model.py": {
        "tensorflow": {
            "Input_74": {
                "variable": {
                    "value": "path_source_token_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_75": {
                "variable": {
                    "value": "path_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_76": {
                "variable": {
                    "value": "path_target_token_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_77": {
                "variable": {
                    "value": "context_valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.MAX_CONTEXTS,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_84": {
                "variable": {
                    "value": "token_embedding_shared_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.vocabs.token_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.config.TOKEN_EMBEDDINGS_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "token_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_110": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[path_source_token_input, path_input, path_target_token_input, context_valid_mask]",
                            "List"
                        ],
                        [
                            "(input_tensors.path_source_token_indices, input_tensors.path_indices, input_tensors.path_target_token_indices, input_tensors.context_valid_mask)",
                            "Tuple"
                        ],
                        [
                            "inputs + (input_tensors.path_source_token_strings, input_tensors.path_strings, input_tensors.path_target_token_strings)",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[target_index, value_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "self._value_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_80": {
                "input_dim": {
                    "value": "self.vocabs.path_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.config.PATH_EMBEDDINGS_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "path_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "rate": {
                    "value": "1 - self.config.DROPOUT_KEEP_RATE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TimeDistributed_95": {
                "layer": {
                    "value": "Dense(self.config.CODE_VECTOR_SIZE, use_bias=False, activation='tanh')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_105": {
                "units": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "35",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "target_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_107": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "value_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "self.config.CODE_VECTOR_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/path_context_reader.py": {
        "tensorflow": {
            "decode_csv_98": {
                "variable": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": []
                },
                "records": {
                    "value": "row_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "self.csv_record_defaults",
                    "type": "Attribute",
                    "possible_values": []
                },
                "field_delim": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                },
                "use_quote_delim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "contexts_str",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "row_parts[1:self.config.MAX_CONTEXTS + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "string_split_190": {
                "variable": {
                    "value": "split_contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "source": {
                    "value": "contexts_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(row_parts[1:self.config.MAX_CONTEXTS + 1], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "sep": {
                    "value": ",",
                    "type": "str",
                    "possible_values": []
                },
                "skip_empty": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseTensor_192": {
                "variable": {
                    "value": "sparse_split_contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "split_contexts.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "split_contexts.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self.config.MAX_CONTEXTS, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "dense_split_contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.sparse.to_dense(sp_input=sparse_split_contexts, default_value=self.vocabs.token_vocab.special_words.PAD)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.MAX_CONTEXTS, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_198": {
                "variable": {
                    "value": "path_source_token_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(dense_split_contexts, begin=[0, 0], size=[self.config.MAX_CONTEXTS, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "variable": {
                    "value": "path_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(dense_split_contexts, begin=[0, 1], size=[self.config.MAX_CONTEXTS, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "variable": {
                    "value": "path_target_token_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(dense_split_contexts, begin=[0, 2], size=[self.config.MAX_CONTEXTS, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_214": {
                "variable": {
                    "value": "context_valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reduce(tf.logical_or, valid_word_mask_per_context_part)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CsvDataset_122": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "self.config.data_path(is_evaluating=self.estimator_action.is_evaluate)",
                    "type": "Call",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "self.csv_record_defaults",
                    "type": "Attribute",
                    "possible_values": []
                },
                "field_delim": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                },
                "use_quote_delim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "self.config.CSV_BUFFER_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_173": {
                "variable": {
                    "value": "word_is_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "row_parts.target_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.target_vocab.word_to_index[self.vocabs.target_vocab.special_words.OOV]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_175": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "word_is_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(row_parts.target_index, self.vocabs.target_vocab.word_to_index[self.vocabs.target_vocab.special_words.OOV])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "any_contexts_is_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce(tf.logical_or, any_word_valid_mask_per_context_part)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_162": {
                "x": {
                    "value": "tf.reduce_max(row_parts.path_source_token_indices, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.token_vocab.word_to_index[self.vocabs.token_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_164": {
                "x": {
                    "value": "tf.reduce_max(row_parts.path_target_token_indices, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.token_vocab.word_to_index[self.vocabs.token_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_166": {
                "x": {
                    "value": "tf.reduce_max(row_parts.path_indices, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.path_vocab.word_to_index[self.vocabs.path_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_dense_195": {
                "sp_input": {
                    "value": "sparse_split_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.SparseTensor(indices=split_contexts.indices, values=split_contexts.values, dense_shape=[self.config.MAX_CONTEXTS, 3])",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "self.vocabs.token_vocab.special_words.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_199": {
                "input_": {
                    "value": "dense_split_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(sp_input=sparse_split_contexts, default_value=self.vocabs.token_vocab.special_words.PAD), shape=[self.config.MAX_CONTEXTS, 3])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.config.MAX_CONTEXTS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_201": {
                "input_": {
                    "value": "dense_split_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(sp_input=sparse_split_contexts, default_value=self.vocabs.token_vocab.special_words.PAD), shape=[self.config.MAX_CONTEXTS, 3])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.config.MAX_CONTEXTS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_203": {
                "input_": {
                    "value": "dense_split_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.sparse.to_dense(sp_input=sparse_split_contexts, default_value=self.vocabs.token_vocab.special_words.PAD), shape=[self.config.MAX_CONTEXTS, 3])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.config.MAX_CONTEXTS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_211": {
                "x": {
                    "value": "path_source_token_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocabs.token_vocab.lookup_index(path_source_token_strings)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vocabs.token_vocab.word_to_index[self.vocabs.token_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_212": {
                "x": {
                    "value": "path_target_token_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocabs.token_vocab.lookup_index(path_target_token_strings)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vocabs.token_vocab.word_to_index[self.vocabs.token_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "not_equal_213": {
                "x": {
                    "value": "path_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocabs.path_vocab.lookup_index(path_strings)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.vocabs.path_vocab.word_to_index[self.vocabs.path_vocab.special_words.PAD]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_162": {
                "input_tensor": {
                    "value": "row_parts.path_source_token_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_164": {
                "input_tensor": {
                    "value": "row_parts.path_target_token_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_166": {
                "input_tensor": {
                    "value": "row_parts.path_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_csv_129": {
                "records": {
                    "value": "tf.reshape(tf.cast(input_line, tf.string), ())",
                    "type": "Call",
                    "possible_values": []
                },
                "record_defaults": {
                    "value": "self.csv_record_defaults",
                    "type": "Attribute",
                    "possible_values": []
                },
                "field_delim": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                },
                "use_quote_delim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "tensor": {
                    "value": "tf.cast(input_line, tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_130": {
                "x": {
                    "value": "input_line",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/tensorflow_model.py": {
        "tensorflow": {
            "disable_eager_execution_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "make_initializable_iterator_52": {
                "variable": {
                    "value": "input_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_reader.get_dataset()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_57": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.MAX_TO_KEEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_237": {
                "variable": {
                    "value": "source_word_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tokens_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Token], shape=(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Token], shape=(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "source_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_238": {
                "variable": {
                    "value": "path_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "paths_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Path], shape=(self.vocabs.path_vocab.size, self.config.PATH_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Path], shape=(self.vocabs.path_vocab.size, self.config.PATH_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "path_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_239": {
                "variable": {
                    "value": "target_word_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tokens_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Token], shape=(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Token], shape=(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "context_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[source_word_embed, path_embed, target_word_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_247": {
                "variable": {
                    "value": "flat_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([source_word_embed, path_embed, target_word_embed], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_embed, rate=1 - self.config.DROPOUT_KEEP_RATE)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.context_vector_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "transform_param",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "TRANSFORM",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.context_vector_size, self.config.CODE_VECTOR_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_251": {
                "variable": {
                    "value": "flat_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(flat_embed, transform_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "contexts_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embed, [-1, self.config.context_vector_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(flat_embed, transform_param))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "attention_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('ATTENTION', shape=(self.config.CODE_VECTOR_SIZE, 1), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable('ATTENTION', shape=(self.config.context_vector_size, 1), dtype=tf.float32, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "batched_contexts_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "contexts_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flat_embed, attention_param)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.MAX_CONTEXTS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_256": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "batched_contexts_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(contexts_weights, [-1, self.config.MAX_CONTEXTS, 1])",
                            "Call"
                        ],
                        [
                            "batched_contexts_weights + mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "variable": {
                    "value": "batched_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embed, [-1, self.config.context_vector_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(flat_embed, transform_param))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.config.MAX_CONTEXTS, self.config.CODE_VECTOR_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_262": {
                "variable": {
                    "value": "code_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(batched_embed, attention_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "code_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(batched_embed, attention_weights), axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(batch_code_vectors, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(targets_vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_298": {
                "variable": {
                    "value": "topk_candidates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(code_vectors, targets_vocab)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.minimum(self.config.TOP_K_WORDS_CONSIDERED_DURING_PREDICTION, self.vocabs.target_vocab.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "make_initializable_iterator_120": {
                "variable": {
                    "value": "input_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.eval_reader.get_dataset()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "tokens_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Token]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_213": {
                "variable": {
                    "value": "attention_param",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ATTENTION",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.CODE_VECTOR_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_216": {
                "variable": {
                    "value": "paths_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Path]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.path_vocab.size, self.config.PATH_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "code_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(batched_embed, attention_weights), axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(batch_code_vectors, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(targets_vocab)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_226": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(input_tensors.target_index)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_245": {
                "variable": {
                    "value": "context_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([source_word_embed, path_embed, target_word_embed], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_embed, rate=1 - self.config.DROPOUT_KEEP_RATE)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.config.DROPOUT_KEEP_RATE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_268": {
                "variable": {
                    "value": "tokens_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Token]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.token_vocab.size, self.config.TOKEN_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_276": {
                "variable": {
                    "value": "attention_param",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ATTENTION",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.context_vector_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "paths_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.vocab_type_to_tf_variable_name_mapping[VocabType.Path]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.vocabs.path_vocab.size, self.config.PATH_EMBEDDINGS_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_284": {
                "variable": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "targets_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, initializer=tf.compat.v1.initializers.variance_scaling(scale=1.0, mode='fan_out', distribution='uniform'))",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(self.vocab_type_to_tf_variable_name_mapping[VocabType.Target], shape=(self.vocabs.target_vocab.size, self.config.TARGET_EMBEDDINGS_SIZE), dtype=tf.float32, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(targets_vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "top_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_candidates.values",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(top_scores)",
                            "Call"
                        ],
                        [
                            "np.squeeze(batch_top_scores, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "self.predict_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_324": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_382": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_tf_variable_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_type_to_tf_variable_name_mapping[vocab_type]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Saver_383": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_251": {
                "a": {
                    "value": "flat_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embed, [-1, self.config.context_vector_size])",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(flat_embed, transform_param))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "transform_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('TRANSFORM', shape=(self.config.context_vector_size, self.config.CODE_VECTOR_SIZE), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_262": {
                "x": {
                    "value": "batched_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_embed, shape=[-1, self.config.MAX_CONTEXTS, self.config.CODE_VECTOR_SIZE])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(batched_contexts_weights, axis=1)",
                            "Call"
                        ],
                        [
                            "np.squeeze(batch_attention_weights, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.get_should_reuse_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "group_426": {
                "*inputs": {
                    "value": "tf.compat.v1.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.compat.v1.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.reshape(input_tensors.target_index, [-1]), logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_298": {
                "x": {
                    "value": "self.config.TOP_K_WORDS_CONSIDERED_DURING_PREDICTION",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.vocabs.target_vocab.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "input_tensors.target_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_227": {
                "labels": {
                    "value": "tf.reshape(input_tensors.target_index, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(code_vectors, targets_vocab, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "input_tensors.target_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code2vec/vocabularies.py": {
        "tensorflow": {
            "StaticHashTable_110": {
                "initializer": {
                    "value": "tf.lookup.KeyValueTensorInitializer(list(word_to_index.keys()), list(word_to_index.values()), key_dtype=tf.string, value_dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.constant(default_value, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StaticHashTable_118": {
                "initializer": {
                    "value": "tf.lookup.KeyValueTensorInitializer(list(index_to_word.keys()), list(index_to_word.values()), key_dtype=tf.int32, value_dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.constant(default_value, dtype=tf.string)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_111": {
                "keys": {
                    "value": "list(word_to_index.keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "list(word_to_index.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_119": {
                "keys": {
                    "value": "list(index_to_word.keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "list(index_to_word.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value_dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_113": {
                "value": {
                    "value": "default_value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_121": {
                "value": {
                    "value": "default_value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/neurovec.py": {
        "tensorflow": {
            "Session_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_236": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Name"
                        ]
                    ]
                }
            }
        }
    }
}