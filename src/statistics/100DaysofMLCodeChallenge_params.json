{
    "Classification/Decision_Tree_Classification/decision_tree_classification.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/K-Nearest_Neighbors(K-NN)/knn.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/Kernel_SVM/kernal_svm.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SVC_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/Logistic_Regression/logistic_regression.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/Naive_Bayes/naive_bayes.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GaussianNB_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/Random_Forest_Classification/random_forest_classification.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/Support_Vector_Machine(SVM)/svm.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SVC_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Clustering/Hierarchical-Clustering/hc.py": {
        "sklearn": {
            "AgglomerativeClustering_35": {
                "variable": {
                    "value": "hc",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "5",
                    "possible_values": []
                },
                "affinity": {
                    "value": "euclidean",
                    "possible_values": []
                },
                "linkage": {
                    "value": "ward",
                    "possible_values": []
                }
            }
        }
    },
    "Clustering/K-Means_Clustering/kmeans.py": {
        "sklearn": {
            "KMeans_39": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "5",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            },
            "KMeans_29": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ],
                            "Call"
                        ]
                    ]
                },
                "init": {
                    "value": "k-means++",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "Data-Preprocessing/categorical_data.py": {
        "sklearn": {
            "LabelEncoder_22": {
                "variable": {
                    "value": "labelencoder_X",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "OneHotEncoder_24": {
                "variable": {
                    "value": "onehotencoder",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "LabelEncoder_27": {
                "variable": {
                    "value": "labelencoder_y",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Data-Preprocessing/data_preprocessing_template.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, :-1].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc_X",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "StandardScaler_22": {
                "variable": {
                    "value": "sc_y",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Data-Preprocessing/missing_data.py": {
        "sklearn": {}
    },
    "Deep-Learning/Artificial-Neural-Networks(ANN)/ann.py": {
        "sklearn": {
            "LabelEncoder_26": {
                "variable": {
                    "value": "labelencoder_X_1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LabelEncoder_28": {
                "variable": {
                    "value": "labelencoder_X_2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "OneHotEncoder_30": {
                "variable": {
                    "value": "onehotencoder",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, 3:13].values",
                            "Attribute"
                        ],
                        [
                            "onehotencoder.fit_transform(X).toarray()",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_40": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "confusion_matrix_77": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/ann.py": {
        "sklearn": {
            "LabelEncoder_26": {
                "variable": {
                    "value": "labelencoder_X_1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LabelEncoder_28": {
                "variable": {
                    "value": "labelencoder_X_2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "OneHotEncoder_30": {
                "variable": {
                    "value": "onehotencoder",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, 3:13].values",
                            "Attribute"
                        ],
                        [
                            "onehotencoder.fit_transform(X).toarray()",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_40": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "confusion_matrix_76": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/mega_case_study.py": {
        "sklearn": {
            "MinMaxScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            },
            "StandardScaler_66": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/som.py": {
        "sklearn": {
            "MinMaxScaler_15": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "Deep-Learning/Recurrent_Neural_Networks(RNN)/rnn.py": {
        "sklearn": {
            "MinMaxScaler_18": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "Deep-Learning/Self-Organizing-Maps (SOM)/som.py": {
        "sklearn": {
            "MinMaxScaler_15": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "Dimensionality-Reduction/Kernel_PCA/kernel_pca.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "KernelPCA_25": {
                "variable": {
                    "value": "kpca",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "possible_values": []
                }
            },
            "LogisticRegression_31": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_39": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Dimensionality-Reduction/Linear_Discriminant_Analysis(LDA)/lda.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, 0:13].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LogisticRegression_31": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_39": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Dimensionality-Reduction/Principal_Component_Analysis(PCA)/pca.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, 0:13].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "PCA_25": {
                "variable": {
                    "value": "pca",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LogisticRegression_32": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_40": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/grid_search.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SVC_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_score_37": {
                "variable": {
                    "value": "accuracies",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "possible_values": [
                        [
                            "SVC(kernel='rbf', random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "sc.fit_transform(X_train)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_train",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "GridSearchCV_45": {
                "variable": {
                    "value": "grid_search",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "possible_values": [
                        [
                            "SVC(kernel='rbf', random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "parameters",
                    "possible_values": [
                        [
                            "[{'C': [1, 10, 100, 1000], 'kernel': ['linear']}, {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]",
                            "List"
                        ]
                    ]
                },
                "scoring": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/k_fold_cross_validation.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, [2, 3]].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.25",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "StandardScaler_19": {
                "variable": {
                    "value": "sc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SVC_25": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_33": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_score_37": {
                "variable": {
                    "value": "accuracies",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "possible_values": [
                        [
                            "SVC(kernel='rbf', random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "sc.fit_transform(X_train)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_train",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "possible_values": []
                }
            }
        }
    },
    "Model-Selection-&-Boosting/XGBoost/xgboost.py": {
        "sklearn": {
            "LabelEncoder_17": {
                "variable": {
                    "value": "labelencoder_X_1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LabelEncoder_19": {
                "variable": {
                    "value": "labelencoder_X_2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "OneHotEncoder_21": {
                "variable": {
                    "value": "onehotencoder",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, 3:13].values",
                            "Attribute"
                        ],
                        [
                            "onehotencoder.fit_transform(X).toarray()",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "confusion_matrix_39": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_score_43": {
                "variable": {
                    "value": "accuracies",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "possible_values": [
                        [
                            "XGBClassifier()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X_train",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "possible_values": []
                }
            }
        }
    },
    "Natural-Language-Processing/natural_language_processing.py": {
        "sklearn": {
            "CountVectorizer_29": {
                "variable": {
                    "value": "cv",
                    "possible_values": []
                },
                "max_features": {
                    "value": "1500",
                    "possible_values": []
                }
            },
            "train_test_split_35": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "cv.fit_transform(corpus).toarray()",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GaussianNB_39": {
                "variable": {
                    "value": "classifier",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "confusion_matrix_47": {
                "variable": {
                    "value": "cm",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Regression/Decision-Tree-Regression/decision_tree_regression.py": {
        "sklearn": {
            "DecisionTreeRegressor_27": {
                "variable": {
                    "value": "regressor",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "Regression/Multiple-Linear-Regression/multiple_linear_regression.py": {
        "sklearn": {
            "LabelEncoder_15": {
                "variable": {
                    "value": "labelencoder",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "OneHotEncoder_17": {
                "variable": {
                    "value": "onehotencoder",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[3]",
                    "possible_values": []
                }
            },
            "train_test_split_25": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, :-1].values",
                            "Attribute"
                        ],
                        [
                            "onehotencoder.fit_transform(X).toarray()",
                            "Call"
                        ],
                        [
                            "X[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "np.append(arr=np.ones((50, 1)).astype(int), values=X, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LinearRegression_37": {
                "variable": {
                    "value": "regressor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Regression/Polynomial-Regression/polynomial_regression.py": {
        "sklearn": {
            "LinearRegression_25": {
                "variable": {
                    "value": "lin_reg",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "PolynomialFeatures_30": {
                "variable": {
                    "value": "poly_reg",
                    "possible_values": []
                },
                "degree": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "LinearRegression_33": {
                "variable": {
                    "value": "lin_reg_2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Regression/Random-Forest-Regression/random_forest_regression.py": {
        "sklearn": {
            "RandomForestRegressor_27": {
                "variable": {
                    "value": "regressor",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "300",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "Regression/Simple-Linear-Regression/simple_linear_regression.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays": {
                    "value": "X",
                    "possible_values": [
                        [
                            "dataset.iloc[:, :-1].values",
                            "Attribute"
                        ]
                    ]
                },
                "test_size": {
                    "value": "1 / 3",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LinearRegression_27": {
                "variable": {
                    "value": "regressor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Regression/Support-Vector-Regression(SVR)/svr.py": {
        "sklearn": {
            "StandardScaler_19": {
                "variable": {
                    "value": "sc_X",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "StandardScaler_20": {
                "variable": {
                    "value": "sc_y",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SVR_26": {
                "variable": {
                    "value": "regressor",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/GANs/dcgan_commented.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root='./data', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "G_37": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_41": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ConvTranspose2d(100, 512, 4, 1, 0, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "D_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_72": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(3, 64, 4, 2, 1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "BCELoss_98": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizerD",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizerG",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "in_channels": {
                    "value": "100",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/GANs/dcgan_nocomment.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root='./data', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "G_37": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_41": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ConvTranspose2d(100, 512, 4, 1, 0, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "D_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_72": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(3, 64, 4, 2, 1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "BCELoss_98": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizerD",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizerG",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_42": {
                "in_channels": {
                    "value": "100",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_45": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Tanh_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "input.size()[0]",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/data/voc0712.py": {
        "torch": {
            "VOCDetection_84": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.image_set": {
                    "value": "image_sets",
                    "possible_values": []
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_transform": {
                    "value": "target_transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.name": {
                    "value": "dataset_name",
                    "possible_values": [
                        [
                            "'VOC0712'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_206": {
                "tensors": {
                    "value": "imgs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "cv2.imread(self._imgpath % img_id)",
                            "Call"
                        ],
                        [
                            "img[:, :, (2, 1, 0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_141": {
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/layers/box_utils.py": {
        "torch": {
            "min_40": {
                "variable": {
                    "value": "max_xy",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "possible_values": []
                }
            },
            "max_42": {
                "variable": {
                    "value": "min_xy",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "inter",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mul_192": {
                "variable": {
                    "value": "area",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "possible_values": []
                }
            },
            "cat_11": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "(boxes[:, 2:] + boxes[:, :2]) / 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "boxes[:, 2:] - boxes[:, :2]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_219": {
                "variable": {
                    "value": "xx1",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_220": {
                "variable": {
                    "value": "yy1",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_221": {
                "variable": {
                    "value": "xx2",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_222": {
                "variable": {
                    "value": "yy2",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_228": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "index_select_232": {
                "variable": {
                    "value": "rem_areas",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_132": {
                "input": {
                    "value": "g_wh",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_167": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1, keepdim=True)",
                    "possible_values": []
                }
            },
            "index_select_214": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_215": {
                "input": {
                    "value": "y1",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_216": {
                "input": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_217": {
                "input": {
                    "value": "y2",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_167": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "exp_153": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "possible_values": []
                }
            },
            "exp_167": {
                "input": {
                    "value": "x - x_max",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/layers/functions/detection.py": {
        "torch": {
            "Detect_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.background_label": {
                    "value": "bkg_label",
                    "possible_values": []
                },
                "self.top_k": {
                    "value": "top_k",
                    "possible_values": []
                },
                "self.nms_thresh": {
                    "value": "nms_thresh",
                    "possible_values": []
                },
                "self.conf_thresh": {
                    "value": "conf_thresh",
                    "possible_values": []
                },
                "zeros_26": {
                    "variable": {
                        "value": "self.output",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out": {
                        "value": "self.num_classes",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "self.top_k",
                        "possible_values": []
                    },
                    "layout": {
                        "value": "5",
                        "possible_values": []
                    }
                }
            },
            "cat_65": {
                "variable": {
                    "value": "self.output[i, cl, :count]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[ids[:count]].unsqueeze(1), boxes[ids[:count]])",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/layers/functions/prior_box.py": {
        "torch": {
            "Tensor_86": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/layers/modules/l2norm.py": {
        "torch": {
            "L2Norm_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_channels": {
                    "value": "n_channels",
                    "possible_values": []
                },
                "Parameter_13": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(self.n_channels)",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/layers/modules/multibox_loss.py": {
        "torch": {
            "MultiBoxLoss_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_gpu": {
                    "value": "use_gpu",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "self.threshold": {
                    "value": "overlap_thresh",
                    "possible_values": []
                },
                "self.background_label": {
                    "value": "bkg_label",
                    "possible_values": []
                },
                "self.encode_target": {
                    "value": "encode_target",
                    "possible_values": []
                },
                "self.use_prior_for_matching": {
                    "value": "prior_for_matching",
                    "possible_values": []
                },
                "self.do_neg_mining": {
                    "value": "neg_mining",
                    "possible_values": []
                },
                "self.negpos_ratio": {
                    "value": "neg_pos",
                    "possible_values": []
                },
                "self.neg_overlap": {
                    "value": "neg_overlap",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "loc_t",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_88": {
                "variable": {
                    "value": "loss_l",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_p",
                    "possible_values": [
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_t",
                    "possible_values": [
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "num_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "possible_values": []
                }
            },
            "cross_entropy_109": {
                "variable": {
                    "value": "loss_c",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_p",
                    "possible_values": [
                        [
                            "conf_data[(pos_idx + neg_idx).gt(0)].view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_weighted",
                    "possible_values": [
                        [
                            "conf_t[(pos + neg).gt(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/object_detection_commented.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "frame_t",
                    "possible_values": [
                        [
                            "transform(frame)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "ssd300_mAP_77.43_v2.pth",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/object_detection_nocomment.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "frame_t",
                    "possible_values": [
                        [
                            "transform(frame)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "ssd300_mAP_77.43_v2.pth",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "Computer-Vision/Object-Detection/ssd.py": {
        "torch": {
            "SSD_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.phase": {
                    "value": "phase",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_37": {
                    "variable": {
                        "value": "self.vgg",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "base",
                        "possible_values": [
                            [
                                "{'300': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'C', 512, 512, 512, 'M', 512, 512, 512], '512': []}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "ModuleList_40": {
                    "variable": {
                        "value": "self.extras",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "extras",
                        "possible_values": [
                            [
                                "{'300': [256, 'S', 512, 128, 'S', 256, 128, 256, 128, 256], '512': []}",
                                "Dict"
                            ]
                        ]
                    }
                },
                "ModuleList_42": {
                    "variable": {
                        "value": "self.loc",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "head[0]",
                        "possible_values": []
                    }
                },
                "ModuleList_43": {
                    "variable": {
                        "value": "self.conf",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "head[1]",
                        "possible_values": []
                    }
                }
            },
            "MaxPool2d_138": {
                "variable": {
                    "value": "pool5",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "conv6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "conv7",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "loc",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in loc]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "conf",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_46": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "v(x)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "v.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "v.out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "base_file",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k + 1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "Deep-Learning/AutoEncoders/ae.py": {
        "torch": {
            "SAE_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_49": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "nb_movies",
                        "possible_values": [
                            [
                                "int(max(max(training_set[:, 1]), max(test_set[:, 1])))",
                                "Call"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "20",
                        "possible_values": []
                    }
                },
                "Linear_50": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "20",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "10",
                        "possible_values": []
                    }
                },
                "Linear_51": {
                    "variable": {
                        "value": "self.fc3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "10",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "20",
                        "possible_values": []
                    }
                },
                "Linear_52": {
                    "variable": {
                        "value": "self.fc4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "20",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "nb_movies",
                        "possible_values": [
                            [
                                "int(max(max(training_set[:, 1]), max(test_set[:, 1])))",
                                "Call"
                            ]
                        ]
                    }
                },
                "Sigmoid_53": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RMSprop_62": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "sae.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "target.data > 0",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "target.data > 0",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "target.data > 0",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "target.data > 0",
                    "possible_values": []
                }
            }
        }
    },
    "Deep-Learning/Boltzmann-Machines(BM)/rbm.py": {
        "torch": {
            "randn_58": {
                "variable": {
                    "value": "self.W",
                    "possible_values": []
                },
                "*size": {
                    "value": "nh",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "nv",
                    "possible_values": [
                        [
                            "len(training_set[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_59": {
                "variable": {
                    "value": "self.a",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "nh",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_60": {
                "variable": {
                    "value": "self.b",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "nv",
                    "possible_values": [
                        [
                            "len(training_set[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_62": {
                "variable": {
                    "value": "wx",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W.t()",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "p_h_given_v",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "wx + self.a.expand_as(wx)",
                            "BinOp"
                        ],
                        [
                            "wy + self.b.expand_as(wy)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_67": {
                "variable": {
                    "value": "wy",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.W",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "p_v_given_h",
                    "possible_values": []
                },
                "input": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "wx + self.a.expand_as(wx)",
                            "BinOp"
                        ],
                        [
                            "wy + self.b.expand_as(wy)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_73": {
                "input": {
                    "value": "v0 - vk",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "ph0 - phk",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "torch.abs(v0[v0 >= 0] - vk[v0 >= 0])",
                    "possible_values": []
                }
            },
            "mean_108": {
                "input": {
                    "value": "torch.abs(vt[vt >= 0] - v[vt >= 0])",
                    "possible_values": []
                }
            },
            "bernoulli_65": {
                "input": {
                    "value": "p_h_given_v",
                    "possible_values": [
                        [
                            "torch.sigmoid(activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_70": {
                "input": {
                    "value": "p_v_given_h",
                    "possible_values": [
                        [
                            "torch.sigmoid(activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_72": {
                "input": {
                    "value": "vk.t()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phk",
                    "possible_values": []
                }
            },
            "abs_95": {
                "input": {
                    "value": "v0[v0 >= 0] - vk[v0 >= 0]",
                    "possible_values": []
                }
            },
            "abs_108": {
                "input": {
                    "value": "vt[vt >= 0] - v[vt >= 0]",
                    "possible_values": []
                }
            }
        }
    }
}