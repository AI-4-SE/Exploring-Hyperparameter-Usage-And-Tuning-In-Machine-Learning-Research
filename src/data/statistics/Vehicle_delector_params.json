{
    "inference.py": {
        "tensorflow": {
            "Graph_33": {
                "variable": {
                    "value": "detection_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_35": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_36": {
                "name": {
                    "value": "PATH_TO_CKPT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'exported_graphs/frozen_inference_graph.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_39": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_54": {
                "graph": {
                    "value": "detection_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/anchor_generators/grid_anchor_generator.py": {
        "tensorflow": {
            "sqrt_162": {
                "variable": {
                    "value": "ratio_sqrts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_167": {
                "variable": {
                    "value": "y_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(grid_height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_169": {
                "variable": {
                    "value": "x_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(grid_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_centers_grid, x_centers_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[heights_grid, widths_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([y_centers_grid, x_centers_grid], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_centers, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([heights_grid, widths_grid], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bbox_sizes, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[256, 256]",
                            "List"
                        ],
                        [
                            "tf.constant(base_anchor_size, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_60": {
                "variable": {
                    "value": "anchor_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchor_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[16, 16]",
                            "List"
                        ],
                        [
                            "tf.constant(anchor_stride, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_63": {
                "variable": {
                    "value": "anchor_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchor_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0]",
                            "List"
                        ],
                        [
                            "tf.constant(anchor_offset, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "scales_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scales_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scales_grid, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "aspect_ratios_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "aspect_ratios_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(aspect_ratios_grid, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "values": {
                    "value": "[centers - 0.5 * sizes, centers + 0.5 * sizes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/anchor_generators/grid_anchor_generator_test.py": {
        "tensorflow": {
            "main_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/anchor_generators/multiple_grid_anchor_generator.py": {
        "tensorflow": {
            "constant_311": {
                "variable": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1.0, 1.0]",
                            "List"
                        ],
                        [
                            "tf.constant(base_anchor_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([256, 256], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[scale_height * self._base_anchor_size[0], scale_width * self._base_anchor_size[1]]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_183": {
                "variable": {
                    "value": "im_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(im_height)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_184": {
                "variable": {
                    "value": "im_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(im_width)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_211": {
                "variable": {
                    "value": "min_im_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(im_height)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "im_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(im_width)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_98": {
                "variable": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_241": {
                "shape": {
                    "value": "[num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "stddevs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "tensor": {
                    "value": "concatenated_anchors.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_187": {
                "x": {
                    "value": "pair[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_190": {
                "x": {
                    "value": "stride[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_191": {
                "x": {
                    "value": "stride[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_197": {
                "x": {
                    "value": "offset[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_198": {
                "x": {
                    "value": "offset[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/anchor_generators/multiple_grid_anchor_generator_test.py": {
        "tensorflow": {
            "constant_156": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_40": {
                "value": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[10, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_92": {
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_159": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_189": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_196": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_212": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_219": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "value": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/box_coders/faster_rcnn_box_coder.py": {
        "tensorflow": {
            "log_82": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_83": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_104": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(rel_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "a": {
                    "value": "tf.stack([ty, tx, th, tw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_90": {
                "values": {
                    "value": "[ty, tx, th, tw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_104": {
                "a": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_110": {
                "x": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(w / wa)",
                            "Call"
                        ],
                        [
                            "tw / self._scale_factors[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_111": {
                "x": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(h / ha)",
                            "Call"
                        ],
                        [
                            "th / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "tf.stack([ymin, xmin, ymax, xmax])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_118": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/box_coders/faster_rcnn_box_coder_test.py": {
        "tensorflow": {
            "main_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_32": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_45": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_46": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_59": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_72": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_84": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_85": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/box_coders/keypoint_box_coder.py": {
        "tensorflow": {
            "transpose_96": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(keypoints, [-1, self._num_keypoints * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_108": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_109": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "tiled_anchor_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([ycenter_a, xcenter_a])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_keypoints, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_113": {
                "variable": {
                    "value": "tiled_anchor_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([ha, wa])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_keypoints, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "tboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ty, tx, th, tw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_142": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(rel_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_163": {
                "variable": {
                    "value": "tiled_anchor_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([ycenter_a, xcenter_a])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_keypoints, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_165": {
                "variable": {
                    "value": "tiled_anchor_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([ha, wa])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._num_keypoints, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(keypoints)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._num_keypoints, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "self._keypoint_scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.tile([tf.to_float(scale_factors[0]), tf.to_float(scale_factors[1])], [num_keypoints])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "a": {
                    "value": "tf.concat([tboxes, tkeypoints], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.get_field(fields.BoxListFields.keypoints)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(keypoints, [-1, self._num_keypoints * 2]))",
                            "Call"
                        ],
                        [
                            "tkeypoints * tiled_anchor_sizes + tiled_anchor_centers",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.transpose(keypoints), [-1, self._num_keypoints, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._num_keypoints * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_112": {
                "values": {
                    "value": "[ycenter_a, xcenter_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_114": {
                "values": {
                    "value": "[ha, wa]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_123": {
                "input": {
                    "value": "self._keypoint_scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "[tboxes, tkeypoints]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_150": {
                "input": {
                    "value": "self._keypoint_scale_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_codes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_152": {
                "x": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(w / wa)",
                            "Call"
                        ],
                        [
                            "tw / self._scale_factors[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_153": {
                "x": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(h / ha)",
                            "Call"
                        ],
                        [
                            "th / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_161": {
                "a": {
                    "value": "tf.stack([ymin, xmin, ymax, xmax])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_164": {
                "values": {
                    "value": "[ycenter_a, xcenter_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_166": {
                "values": {
                    "value": "[ha, wa]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "a": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.get_field(fields.BoxListFields.keypoints)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(keypoints, [-1, self._num_keypoints * 2]))",
                            "Call"
                        ],
                        [
                            "tkeypoints * tiled_anchor_sizes + tiled_anchor_centers",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.transpose(keypoints), [-1, self._num_keypoints, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_69": {
                "input": {
                    "value": "[tf.to_float(scale_factors[0]), tf.to_float(scale_factors[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_keypoints]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_161": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_70": {
                "x": {
                    "value": "scale_factors[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/box_coders/keypoint_box_coder_test.py": {
        "tensorflow": {
            "main_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_42": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[10.0, 10.0], [10.0000001, 20.0]]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_43": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_65": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_66": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[10.0, 10.0], [10.0000001, 20.0]]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_67": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_89": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_113": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_129": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_130": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[15.0, 12.0], [10.0, 15.0]], [[0.5, 0.3], [0.2, 0.4]]]",
                            "List"
                        ],
                        [
                            "[[[10.0, 10.0], [10.0000001, 20.0]]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_131": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/box_coders/mean_stddev_box_coder_test.py": {
        "tensorflow": {
            "constant_30": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [-5.0, -5.0, -5.0, -3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "main_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_28": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.5]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/box_coders/square_box_coder.py": {
        "tensorflow": {
            "sqrt_84": {
                "variable": {
                    "value": "la",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ha * wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l / la",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_112": {
                "variable": {
                    "value": "la",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ha * wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_114": {
                "variable": {
                    "value": "(ty, tx, tl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(rel_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_99": {
                "a": {
                    "value": "tf.stack([ty, tx, tl])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_99": {
                "values": {
                    "value": "[ty, tx, tl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_114": {
                "a": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_119": {
                "x": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(l / la)",
                            "Call"
                        ],
                        [
                            "tl / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "a": {
                    "value": "tf.stack([ymin, xmin, ymax, xmax])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_126": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/box_coders/square_box_coder_test.py": {
        "tensorflow": {
            "main_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_33": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_34": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_47": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_48": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_60": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 10.0000001, 20.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ],
                        [
                            "coder.decode(rel_codes, anchors)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_61": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_75": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_88": {
                "value": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ],
                        [
                            "[[15.0, 12.0, 30.0, 18.0], [0.1, 0.0, 0.7, 0.9]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(anchors))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/builders/anchor_generator_builder_test.py": {
        "tensorflow": {
            "main_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/box_coder_builder_test.py": {
        "tensorflow": {
            "main_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/box_predictor_builder_test.py": {
        "tensorflow": {
            "main_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/hyperparams_builder.py": {
        "tensorflow": {
            "truncated_normal_initializer_134": {
                "mean": {
                    "value": "initializer.truncated_normal_initializer.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initializer.truncated_normal_initializer.stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/hyperparams_builder_test.py": {
        "tensorflow": {
            "main_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_329": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_scope_arguments['weights_initializer']",
                            "Subscript"
                        ],
                        [
                            "conv_scope_arguments['weights_initializer']",
                            "Subscript"
                        ],
                        [
                            "conv_scope_arguments['weights_initializer']",
                            "Subscript"
                        ],
                        [
                            "conv_scope_arguments['weights_initializer']",
                            "Subscript"
                        ],
                        [
                            "conv_scope_arguments['weights_initializer']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_137": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1.0, -1, 4.0, 2.0])",
                            "Call"
                        ],
                        [
                            "np.array([1.0, -1, 4.0, 2.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_160": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1.0, -1, 4.0, 2.0])",
                            "Call"
                        ],
                        [
                            "np.array([1.0, -1, 4.0, 2.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/image_resizer_builder.py": {
        "tensorflow": {}
    },
    "object_detection/builders/image_resizer_builder_test.py": {
        "tensorflow": {
            "to_float_30": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(input_shape, minval=0, maxval=255, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/input_reader_builder.py": {
        "tensorflow": {}
    },
    "object_detection/builders/input_reader_builder_test.py": {
        "tensorflow": {
            "TFRecordWriter_35": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.get_temp_dir(), 'tfrecord')",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_41": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_pb2.Features(feature={'image/encoded': feature_pb2.Feature(bytes_list=feature_pb2.BytesList(value=[encoded_jpeg])), 'image/format': feature_pb2.Feature(bytes_list=feature_pb2.BytesList(value=['jpeg'.encode('utf-8')])), 'image/height': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[4])), 'image/width': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[5])), 'image/object/bbox/xmin': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[0.0])), 'image/object/bbox/xmax': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[1.0])), 'image/object/bbox/ymin': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[0.0])), 'image/object/bbox/ymax': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[1.0])), 'image/object/class/label': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[2])), 'image/object/mask': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=flat_mask))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Supervisor_82": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.get_temp_dir()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Supervisor_114": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.get_temp_dir()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "encode_jpeg_40": {
                "variable": {
                    "value": "encoded_jpeg",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.constant(image_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_41": {
                "feature": {
                    "value": "{'image/encoded': feature_pb2.Feature(bytes_list=feature_pb2.BytesList(value=[encoded_jpeg])), 'image/format': feature_pb2.Feature(bytes_list=feature_pb2.BytesList(value=['jpeg'.encode('utf-8')])), 'image/height': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[4])), 'image/width': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[5])), 'image/object/bbox/xmin': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[0.0])), 'image/object/bbox/xmax': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[1.0])), 'image/object/bbox/ymin': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[0.0])), 'image/object/bbox/ymax': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=[1.0])), 'image/object/class/label': feature_pb2.Feature(int64_list=feature_pb2.Int64List(value=[2])), 'image/object/mask': feature_pb2.Feature(float_list=feature_pb2.FloatList(value=flat_mask))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_40": {
                "value": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_42": {
                "bytes_list": {
                    "value": "feature_pb2.BytesList(value=[encoded_jpeg])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_44": {
                "bytes_list": {
                    "value": "feature_pb2.BytesList(value=['jpeg'.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_46": {
                "int64_list": {
                    "value": "feature_pb2.Int64List(value=[4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_48": {
                "int64_list": {
                    "value": "feature_pb2.Int64List(value=[5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_50": {
                "float_list": {
                    "value": "feature_pb2.FloatList(value=[0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "float_list": {
                    "value": "feature_pb2.FloatList(value=[1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_54": {
                "float_list": {
                    "value": "feature_pb2.FloatList(value=[0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_56": {
                "float_list": {
                    "value": "feature_pb2.FloatList(value=[1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_58": {
                "int64_list": {
                    "value": "feature_pb2.Int64List(value=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_60": {
                "float_list": {
                    "value": "feature_pb2.FloatList(value=flat_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_43": {
                "value": {
                    "value": "[encoded_jpeg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_45": {
                "value": {
                    "value": "['jpeg'.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_47": {
                "value": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_49": {
                "value": {
                    "value": "[5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_51": {
                "value": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_53": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_55": {
                "value": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_57": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_59": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_61": {
                "value": {
                    "value": "flat_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * 5 * [1.0]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/builders/losses_builder_test.py": {
        "tensorflow": {
            "constant_96": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_97": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_98": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_244": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 1.0, 0.0], [0.0, 0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_245": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_246": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/matcher_builder_test.py": {
        "tensorflow": {
            "main_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/model_builder_test.py": {
        "tensorflow": {
            "main_741": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/optimizer_builder.py": {
        "tensorflow": {
            "RMSPropOptimizer_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "_create_learning_rate(config.learning_rate, global_summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "decay": {
                    "value": "config.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum_optimizer_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "_create_learning_rate(config.learning_rate, global_summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum_optimizer_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "_create_learning_rate(config.learning_rate, global_summaries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exponential_decay_88": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "config.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "config.staircase",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_118": {
                "name": {
                    "value": "Learning_Rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "config.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(config.initial_learning_rate, tf.train.get_or_create_global_step(), config.decay_steps, config.decay_factor, staircase=config.staircase)",
                            "Call"
                        ],
                        [
                            "learning_schedules.manual_stepping(tf.train.get_or_create_global_step(), learning_rate_step_boundaries, learning_rate_sequence)",
                            "Call"
                        ],
                        [
                            "learning_schedules.cosine_decay_with_warmup(tf.train.get_or_create_global_step(), config.learning_rate_base, config.total_steps, config.warmup_learning_rate, config.warmup_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/optimizer_builder_test.py": {
        "tensorflow": {
            "main_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/post_processing_builder.py": {
        "tensorflow": {
            "divide_94": {
                "variable": {
                    "value": "scaled_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "logit_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale_logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/post_processing_builder_test.py": {
        "tensorflow": {
            "constant_53": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/preprocessor_builder.py": {
        "tensorflow": {}
    },
    "object_detection/builders/preprocessor_builder_test.py": {
        "tensorflow": {
            "main_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/builders/region_similarity_calculator_builder_test.py": {
        "tensorflow": {
            "main_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/anchor_generator.py": {
        "tensorflow": {
            "assert_equal_142": {
                "x": {
                    "value": "expected_num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "expected_num_anchors + num_anchors_per_location * feature_map_shape[0] * feature_map_shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "anchors.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "self.name_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_103": {
                "control_inputs": {
                    "value": "[self._assert_correct_number_of_anchors(anchors, feature_map_shape_list)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_106": {
                "input": {
                    "value": "anchors.get()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/balanced_positive_negative_sampler.py": {
        "tensorflow": {
            "logical_not_81": {
                "variable": {
                    "value": "negative_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_82": {
                "variable": {
                    "value": "positive_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_83": {
                "variable": {
                    "value": "negative_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "negative_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(labels)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(negative_idx, indicator)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_91": {
                "variable": {
                    "value": "sampled_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sampled_pos_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.subsample_indicator(positive_idx, max_num_pos)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sampled_neg_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.subsample_indicator(negative_idx, max_num_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "tf.cast(sampled_pos_idx, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "sampled_pos_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.subsample_indicator(positive_idx, max_num_pos)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/balanced_positive_negative_sampler_test.py": {
        "tensorflow": {
            "constant_28": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(300) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "numpy_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(300)",
                            "Call"
                        ],
                        [
                            "numpy_labels - 200 > 0",
                            "Compare"
                        ],
                        [
                            "np.arange(100)",
                            "Call"
                        ],
                        [
                            "numpy_labels - 80 >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_48": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "numpy_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy_labels < 90",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_51": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "numpy_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(300)",
                            "Call"
                        ],
                        [
                            "numpy_labels - 200 > 0",
                            "Compare"
                        ],
                        [
                            "np.arange(100)",
                            "Call"
                        ],
                        [
                            "numpy_labels - 80 >= 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_66": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[True, False, False]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True, False, True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True, False, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[True, False, True]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/batcher.py": {
        "tensorflow": {
            "batch_91": {
                "variable": {
                    "value": "batched_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict",
                            "variable"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_queue_capacity",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_batch_queue_threads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_116": {
                "variable": {
                    "value": "unbatched_tensor_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_130": {
                "variable": {
                    "value": "tensor_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensors[key, batch_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.zeros_like(shapes[key, batch_id])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "shapes[key, batch_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "shapes[key, batch_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/batcher_test.py": {
        "tensorflow": {
            "main_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_34": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(4), [1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([counter, tf.constant(1)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(counter * counter)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([counter, counter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(counter * counter)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([counter, counter])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_32": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "tensor": {
                    "value": "tf.range(4)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_35": {
                "values": {
                    "value": "[counter, tf.constant(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_68": {
                "values": {
                    "value": "[counter, counter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "tf.range(1, 13)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_131": {
                "values": {
                    "value": "[counter, counter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_coder.py": {
        "tensorflow": {
            "stack_147": {
                "variable": {
                    "value": "decoded_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_coder.decode(boxes, anchors).get() for boxes in tf.unstack(encoded_boxes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "Encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "Decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_149": {
                "value": {
                    "value": "encoded_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_coder_test.py": {
        "tensorflow": {
            "constant_40": {
                "variable": {
                    "value": "mock_anchor_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0.1, 0.2, 0.3], [0.2, 0.4, 0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "encoded_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_boxes_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mock_box_coder.encode(box_list.BoxList(tf.constant(boxes)), mock_anchors) for boxes in expected_boxes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "main_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_49": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_list.py": {
        "tensorflow": {
            "unstack_169": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(box_corners)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_183": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "self.data['boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_167": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_182": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_169": {
                "a": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_185": {
                "values": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_list_ops.py": {
        "tensorflow": {
            "to_float_937": {
                "variable": {
                    "value": "match_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(iou_, iou_thresh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_938": {
                "variable": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "match_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(iou_, iou_thresh))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Assert_942": {
                "variable": {
                    "value": "match_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_all(tf.greater(num_matches, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Each box in selected_boxes must match with at least one box in pool_boxes.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_947": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool_boxes.get_field('scores')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Assert_948": {
                "variable": {
                    "value": "scores_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_all(tf.greater_equal(scores, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Scores must be non negative.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_71": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_91": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_121": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_123": {
                "variable": {
                    "value": "(win_y_min, win_x_min, win_y_max, win_x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_124": {
                "variable": {
                    "value": "y_min_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(y_min, win_y_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_y_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_125": {
                "variable": {
                    "value": "y_max_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(y_max, win_y_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_y_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_126": {
                "variable": {
                    "value": "x_min_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(x_min, win_x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_x_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_127": {
                "variable": {
                    "value": "x_max_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(x_max, win_x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_x_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_160": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_162": {
                "variable": {
                    "value": "(win_y_min, win_x_min, win_y_max, win_x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "coordinate_violations",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.less(y_min, win_y_min), tf.less(x_min, win_x_min), tf.greater(y_max, win_y_max), tf.greater(x_max, win_x_max)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.logical_not(tf.reduce_any(coordinate_violations, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_191": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_193": {
                "variable": {
                    "value": "(win_y_min, win_x_min, win_y_max, win_x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "coordinate_violations",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.greater_equal(y_min, win_y_max), tf.greater_equal(x_min, win_x_max), tf.less_equal(y_max, win_y_min), tf.less_equal(x_max, win_x_min)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.logical_not(tf.reduce_any(coordinate_violations, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_215": {
                "variable": {
                    "value": "(y_min1, x_min1, y_max1, x_max1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(y_min2, x_min2, y_max2, x_max2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_219": {
                "variable": {
                    "value": "all_pairs_min_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_max1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_220": {
                "variable": {
                    "value": "all_pairs_max_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_min1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_221": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_ymax - all_pairs_max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_222": {
                "variable": {
                    "value": "all_pairs_min_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_max1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_223": {
                "variable": {
                    "value": "all_pairs_max_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_min1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_224": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_xmax - all_pairs_max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_240": {
                "variable": {
                    "value": "(y_min1, x_min1, y_max1, x_max1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_242": {
                "variable": {
                    "value": "(y_min2, x_min2, y_max2, x_max2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_244": {
                "variable": {
                    "value": "min_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_max1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_max2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_245": {
                "variable": {
                    "value": "max_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_min1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_min2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_246": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "min_ymax - max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_247": {
                "variable": {
                    "value": "min_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_max1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x_max2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_248": {
                "variable": {
                    "value": "max_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_min1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x_min2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_249": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "min_xmax - max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_313": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area(boxlist2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_338": {
                "variable": {
                    "value": "ioa_",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ioa_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ioa(boxlist2, boxlist1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(ioa_, reduction_indices=[0])",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_339": {
                "variable": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ioa_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ioa(boxlist2, boxlist1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(ioa_, reduction_indices=[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(min_overlap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_340": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(keep_bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_358": {
                "variable": {
                    "value": "is_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(width, min_side)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(height, min_side)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_415": {
                "variable": {
                    "value": "sqnorm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(boxlist1.get())",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_416": {
                "variable": {
                    "value": "sqnorm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(boxlist2.get())",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_417": {
                "variable": {
                    "value": "innerprod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "size_581": {
                "variable": {
                    "value": "num_entries",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "field_to_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field(field)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_582": {
                "variable": {
                    "value": "length_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(num_boxes, num_entries)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Incorrect field size: actual vs expected.', num_entries, num_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_622": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_623": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_649": {
                "variable": {
                    "value": "gather_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.equal(filter_field, value))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_685": {
                "variable": {
                    "value": "high_score_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.where(tf.greater(scores, thresh)), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "non_max_suppression_718": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "scores": {
                    "value": "boxlist.get_field('scores')",
                    "type": "Call",
                    "possible_values": []
                },
                "max_output_size": {
                    "value": "max_output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_763": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_764": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_802": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_803": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_953": {
                "variable": {
                    "value": "sum_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "match_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(iou_, iou_thresh))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field('scores')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pool_boxes.get_field('scores'), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_134": {
                "variable": {
                    "value": "nonzero_area_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.where(tf.greater(areas, 0.0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_214": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "intersect_heights * intersect_widths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_264": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_270": {
                "condition": {
                    "value": "tf.equal(intersections, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(intersections)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.truediv(intersections, unions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_291": {
                "condition": {
                    "value": "tf.equal(intersections, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(intersections)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.truediv(intersections, unions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truediv_314": {
                "x": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area(clipped)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(area(boxlist2), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_336": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_383": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_414": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_445": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_456": {
                "variable": {
                    "value": "subfieldlist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxlist.get_field(field)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_484": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_495": {
                "variable": {
                    "value": "subfieldlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxlist.get_field(field)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_522": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_548": {
                "variable": {
                    "value": "concatenated_field",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxlist.get_field(field) for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_572": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_616": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_618": {
                "variable": {
                    "value": "(height, width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_624": {
                "input": {
                    "value": "tf.image.draw_bounding_boxes(image, corners)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_643": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_674": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_711": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_762": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_767": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_768": {
                "variable": {
                    "value": "max_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(max_val, 1.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['max value is lower than 1.01: ', max_val]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_801": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_807": {
                "variable": {
                    "value": "box_maximum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_808": {
                "variable": {
                    "value": "max_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(maximum_normalized_coordinate, box_maximum)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['maximum box coordinate value is larger than %f: ' % maximum_normalized_coordinate, box_maximum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_937": {
                "x": {
                    "value": "iou_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou(selected_boxes, pool_boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "iou_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_943": {
                "input_tensor": {
                    "value": "tf.greater(num_matches, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_949": {
                "input_tensor": {
                    "value": "tf.greater_equal(scores, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_952": {
                "control_inputs": {
                    "value": "[scores_assert, match_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_954": {
                "tensor": {
                    "value": "sum_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(match_indicator, scores)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_956": {
                "a": {
                    "value": "match_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(iou_, iou_thresh))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pool_boxes.get() * scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_977": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "x_max - x_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_98": {
                "values": {
                    "value": "[y_min, x_min, y_max, x_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_124": {
                "x": {
                    "value": "y_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_scale * y_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_y_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_125": {
                "x": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_scale * y_max",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_y_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_126": {
                "x": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_127": {
                "x": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_max",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "[y_min_clipped, x_min_clipped, y_max_clipped, x_max_clipped]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_168": {
                "condition": {
                    "value": "tf.logical_not(tf.reduce_any(coordinate_violations, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_199": {
                "condition": {
                    "value": "tf.logical_not(tf.reduce_any(coordinate_violations, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_219": {
                "a": {
                    "value": "y_max2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "y_min2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "a": {
                    "value": "x_max2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "a": {
                    "value": "x_min2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_271": {
                "x": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_272": {
                "input": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_272": {
                "x": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(areas1, 1) + tf.expand_dims(areas2, 0) - intersections",
                            "BinOp"
                        ],
                        [
                            "areas1 + areas2 - intersections",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_292": {
                "x": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_293": {
                "input": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_293": {
                "x": {
                    "value": "intersections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "matched_intersection(boxlist1, boxlist2)",
                            "Call"
                        ],
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(areas1, 1) + tf.expand_dims(areas2, 0) - intersections",
                            "BinOp"
                        ],
                        [
                            "areas1 + areas2 - intersections",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_339": {
                "value": {
                    "value": "min_overlap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_340": {
                "condition": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(ioa_, tf.constant(min_overlap))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_358": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_side",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_359": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_side",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_360": {
                "tensor": {
                    "value": "tf.where(is_valid)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_415": {
                "x": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_416": {
                "x": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_450": {
                "tensor": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_489": {
                "params": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_531": {
                "values": {
                    "value": "[boxlist.get() for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_583": {
                "x": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.num_boxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(field_to_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_586": {
                "control_inputs": {
                    "value": "[length_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_590": {
                "variable": {
                    "value": "(_, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "field_to_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field(field)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.num_boxes()",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_624": {
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(boxlist.get(), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_649": {
                "condition": {
                    "value": "tf.equal(filter_field, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_685": {
                "tensor": {
                    "value": "tf.where(tf.greater(scores, thresh))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_771": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_813": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_943": {
                "x": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(match_indicator, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_949": {
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field('scores')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pool_boxes.get_field('scores'), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "tensor": {
                    "value": "tf.where(tf.greater(areas, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_164": {
                "x": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_165": {
                "x": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_max",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_168": {
                "x": {
                    "value": "tf.reduce_any(coordinate_violations, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_195": {
                "x": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_equal_196": {
                "x": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_scale * x_max",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_199": {
                "x": {
                    "value": "tf.reduce_any(coordinate_violations, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "areas2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area(boxlist2)",
                            "Call"
                        ],
                        [
                            "area(boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_360": {
                "condition": {
                    "value": "is_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.greater_equal(width, min_side), tf.greater_equal(height, min_side))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_419": {
                "a": {
                    "value": "sqnorm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(boxlist2.get()), 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_589": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_618": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_649": {
                "x": {
                    "value": "filter_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field(field)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_686": {
                "condition": {
                    "value": "tf.greater(scores, thresh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_768": {
                "x": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(boxlist.get())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_770": {
                "control_inputs": {
                    "value": "[max_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_809": {
                "x": {
                    "value": "maximum_normalized_coordinate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.01",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "box_maximum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(boxlist.get())",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_812": {
                "control_inputs": {
                    "value": "[max_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "tf.greater(areas, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_any_168": {
                "input_tensor": {
                    "value": "coordinate_violations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.less(y_min, win_y_min), tf.less(x_min, win_x_min), tf.greater(y_max, win_y_max), tf.greater(x_max, win_x_max)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.greater_equal(y_min, win_y_max), tf.greater_equal(x_min, win_x_max), tf.less_equal(y_max, win_y_min), tf.less_equal(x_max, win_x_min)], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_199": {
                "input_tensor": {
                    "value": "coordinate_violations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.less(y_min, win_y_min), tf.less(x_min, win_x_min), tf.greater(y_max, win_y_max), tf.greater(x_max, win_x_max)], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.greater_equal(y_min, win_y_max), tf.greater_equal(x_min, win_x_max), tf.less_equal(y_max, win_y_min), tf.less_equal(x_max, win_x_min)], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_620": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_621": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_686": {
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist.get_field('scores')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pool_boxes.get_field('scores'), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_135": {
                "x": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area(clipped)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(area(boxlist2), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_list_ops_test.py": {
        "tensorflow": {
            "constant_29": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 10.0, 20.0], [1.0, 2.0, 3.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 10.0, 20.0], [1.0, 2.0, 3.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 100, 200], [50, 120, 100, 140]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 200",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 9, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5.0, 5.0, 6.0, 6.0], [-1.0, -2.0, 4.0, 5.0], [2.0, 3.0, 5.0, 9.0], [0.0, 0.0, 9.0, 14.0], [-100.0, -100.0, 300.0, 600.0], [-10.0, -10.0, -9.0, -9.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_88": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 9, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5.0, 5.0, 6.0, 6.0], [-1.0, -2.0, 4.0, 5.0], [2.0, 3.0, 5.0, 9.0], [0.0, 0.0, 9.0, 14.0], [-100.0, -100.0, 300.0, 600.0], [-10.0, -10.0, -9.0, -9.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 9, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5.0, 5.0, 6.0, 6.0], [-1.0, -2.0, 4.0, 5.0], [2.0, 3.0, 5.0, 9.0], [0.0, 0.0, 9.0, 14.0], [-10.0, -10.0, -9.0, -9.0], [-100.0, -100.0, 300.0, 600.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_132": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 9, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_133": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[5.0, 5.0, 6.0, 6.0], [-1.0, -2.0, 4.0, 5.0], [2.0, 3.0, 5.0, 9.0], [0.0, 0.0, 9.0, 14.0], [-10.0, -10.0, -9.0, -9.0], [-100.0, -100.0, 300.0, 600.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_157": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_158": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_169": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_180": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_181": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_193": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_203": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_204": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_220": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_238": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_263": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0], [3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_277": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0], [3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0], [2.0, 3.0, 1.5, 7.0], [2.0, 3.0, 5.0, 1.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.25, 0.5, 0.75, 0.75], [0.5, 0.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_294": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.25, 0.25, 0.75, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_297": {
                "variable": {
                    "value": "expected_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0.5, 1.0, 1.0], [0.5, -0.5, 1.5, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_306": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_307": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_323": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_325": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 1.0, 0.0], [-4.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_337": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_339": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True, False, True, False, True]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_348": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_350": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[True, False, True, False, True]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_351": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1], [0.3], [0.5], [0.7], [0.9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_365": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_367": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_376": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_377": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_378": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1], [0.3], [0.5], [0.7], [0.9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_392": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_393": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_394": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1], [0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_402": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_404": {
                "variable": {
                    "value": "indices_float32",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_408": {
                "variable": {
                    "value": "indices_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 2, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_416": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 0.3, 0.7, 0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.greater(weights, 0.4))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_436": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[exp_corners[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_462": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[exp_corners[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_478": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4 * [0.0], 4 * [0.5], 4 * [1.0], 4 * [2.0], 4 * [3.0], 4 * [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_480": {
                "variable": {
                    "value": "misc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.95, 0.9], [0.5, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_481": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.1, 0.2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_498": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(6, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_499": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 5, 3], [0, 0, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_503": {
                "variable": {
                    "value": "image_and_boxes_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.reduce_sum(image_and_boxes, 2), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_516": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_538": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_610": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0], [1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_611": {
                "variable": {
                    "value": "scores1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_612": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 3, 1, 6], [2, 4, 3, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_620": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0], [1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_621": {
                "variable": {
                    "value": "scores1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_622": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 3, 1, 6], [2, 4, 3, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_623": {
                "variable": {
                    "value": "scores2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0], [2.1, 3.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_632": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0], [1, 2, 3, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_633": {
                "variable": {
                    "value": "scores1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_634": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 3, 1, 6], [2, 4, 3, 8], [1, 0, 5, 10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_636": {
                "variable": {
                    "value": "scores2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.1, 5.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_660": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_678": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_699": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_719": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1], [0, -0.1, 1, 0.9], [0, 10, 1, 11], [0, 10.1, 1, 11.1], [0, 100, 1, 101]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_740": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_754": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10 * [[0, 0, 1, 1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_768": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0, 0.1, 1, 1.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_786": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 100, 100], [25, 25, 75, 75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_788": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 100, 100, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_800": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_802": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 100, 100, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_812": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_814": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 100, 100, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_827": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 100, 100], [25, 25, 75, 75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_829": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 100, 100, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_844": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 202, 202, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_862": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 202, 202, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_962": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_605": {
                "variable": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "[[1], [2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_140": {
                "value": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "shape": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_246": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "shape": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_417": {
                "condition": {
                    "value": "tf.greater(weights, 0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_438": {
                "value": {
                    "value": "[exp_scores[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_440": {
                "value": {
                    "value": "[exp_weights[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_464": {
                "value": {
                    "value": "[exp_scores[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_466": {
                "value": {
                    "value": "[exp_weights[i] for i in shuffle]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_504": {
                "x": {
                    "value": "tf.reduce_sum(image_and_boxes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_523": {
                "value": {
                    "value": "[1, 2, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_545": {
                "value": {
                    "value": "[0.1, 0.75, 0.9, 0.5, 0.5, 0.8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_556": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5], [0.6, 0.6, 0.8, 0.8], [0.2, 0.2, 0.3, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_558": {
                "value": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_559": {
                "value": {
                    "value": "[0.75, 0.65, 0.3, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_577": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_578": {
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_579": {
                "value": {
                    "value": "[0.75, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_667": {
                "value": {
                    "value": "[0.9, 0.75, 0.6, 0.95, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_685": {
                "value": {
                    "value": "[0.9, 0.75, 0.6, 0.95, 0.5, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_706": {
                "value": {
                    "value": "[0.9, 0.75, 0.6, 0.95, 0.5, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_726": {
                "value": {
                    "value": "[0.9, 0.75, 0.6, 0.95, 0.5, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_742": {
                "value": {
                    "value": "[0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_756": {
                "value": {
                    "value": "10 * [0.9]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_773": {
                "value": {
                    "value": "tensor1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1], [4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_774": {
                "value": {
                    "value": "tensor2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 1], [2, 2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_775": {
                "value": {
                    "value": "[[0, 0, 10, 10], [1, 3, 5, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_846": {
                "value": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0, 100, 100], [25, 25, 75, 75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 100, 100], [25, 25, 75, 75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(size=(100, 4))",
                            "Call"
                        ],
                        [
                            "np.round(np.sort(coordinates) * 200)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(size=(100, 4))",
                            "Call"
                        ],
                        [
                            "np.sort(coordinates)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_864": {
                "value": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0, 100, 100], [25, 25, 75, 75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 100, 100], [25, 25, 75, 75]], tf.float32)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(size=(100, 4))",
                            "Call"
                        ],
                        [
                            "np.round(np.sort(coordinates) * 200)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(size=(100, 4))",
                            "Call"
                        ],
                        [
                            "np.sort(coordinates)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_881": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.6, 0.6, 0.8, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_882": {
                "value": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_884": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5], [0.6, 0.6, 0.8, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_886": {
                "value": {
                    "value": "[0.75, 0.25, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_901": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_902": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_903": {
                "value": {
                    "value": "[-0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_912": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_913": {
                "value": {
                    "value": "[[0.6, 0.6, 0.8, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_914": {
                "value": {
                    "value": "[0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_924": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5], [0.6, 0.6, 0.8, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_926": {
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_927": {
                "value": {
                    "value": "[0.75, 0.25, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_943": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5], [0.6, 0.6, 0.8, 0.8], [0.2, 0.2, 0.3, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_945": {
                "value": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_946": {
                "value": {
                    "value": "[0.75, 0.25, 0.3, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_417": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.1], [0.3], [0.5], [0.7], [0.9]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1], [0.3], [0.5], [0.7], [0.9]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1], [0.3]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.5, 0.3, 0.7, 0.1, 0.9], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.1, 0.2], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_504": {
                "input_tensor": {
                    "value": "image_and_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_list_ops.visualize_boxes_in_image(image, boxes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_791": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_805": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_817": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_818": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_832": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_833": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_848": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_849": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_851": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_852": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_866": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_867": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_869": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_870": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 100, 100, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ],
                        [
                            "tf.ones((128, 202, 202, 3))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/box_list_test.py": {
        "tensorflow": {
            "constant_27": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [1, 1, 2, 3], [3, 4, 5, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1], [1, 1, 2, 3], [3, 4, 5, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.greater([1, 0, 1], 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0, 1, 1], [1, 1, 2, 3], [3, 4, 5, 5]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1], [1, 1, 2, 3], [3, 4, 5, 5]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.gather(data, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater([1, 0, 1], 0)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_66": {
                "variable": {
                    "value": "data0",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1], [3, 4, 5, 5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "data1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1], [1, 1, 2], [3, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1], [1, 1, 2], [3, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_list.BoxList(data)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(data)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(tf.constant(box_corners))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(placeholder)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_46": {
                "condition": {
                    "value": "tf.greater([1, 0, 1], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_58": {
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_list.BoxList(data)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(data)",
                            "Call"
                        ],
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ],
                        [
                            "box_list.BoxList(tf.constant(boxes))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(tf.constant(box_corners))",
                            "Call"
                        ],
                        [
                            "box_list.BoxList(placeholder)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_79": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[10.0, 10.0, 20.0, 15.0], [0.2, 0.1, 0.5, 0.4]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_90": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_91": {
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_92": {
                "value": {
                    "value": "[0.75, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "[0.75, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "[[0.1, 0.1, 0.4, 0.4], [0.1, 0.1, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_127": {
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "[0.75, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_46": {
                "x": {
                    "value": "[1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_predictor.py": {
        "tensorflow": {
            "reduce_mean_378": {
                "variable": {
                    "value": "spatial_averaged_image_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image_features",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "AvgPool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(location_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_encodings, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [batch_size * num_boxes, 1, self.num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes * self._box_code_size, activation_fn=None, scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [-1, 1, self._num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * self._box_code_size, [self._kernel_size, self._kernel_size], scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, self._num_classes, self._box_code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(class_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_predictions_with_background, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size * num_boxes, 1, total_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes + 1, activation_fn=None, scope='ClassPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [-1, 1, self._num_classes + 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * num_class_slots, [self._kernel_size, self._kernel_size], scope='ClassPredictor', biases_initializer=tf.constant_initializer(self._class_prediction_bias_init))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(class_predictions_with_background)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, self._num_classes + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_551": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(location_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_encodings, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [batch_size * num_boxes, 1, self.num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes * self._box_code_size, activation_fn=None, scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [-1, 1, self._num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * self._box_code_size, [self._kernel_size, self._kernel_size], scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_557": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(class_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_predictions_with_background, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size * num_boxes, 1, total_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes + 1, activation_fn=None, scope='ClassPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [-1, 1, self._num_classes + 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * num_class_slots, [self._kernel_size, self._kernel_size], scope='ClassPredictor', biases_initializer=tf.constant_initializer(self._class_prediction_bias_init))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(class_predictions_with_background)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "ones_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "proposals_shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_201": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(start=0, limit=proposals_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(location_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_encodings, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [batch_size * num_boxes, 1, self.num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes * self._box_code_size, activation_fn=None, scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [-1, 1, self._num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * self._box_code_size, [self._kernel_size, self._kernel_size], scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size]))",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(location_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_encodings, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [batch_size * num_boxes, 1, self.num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes * self._box_code_size, activation_fn=None, scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, [-1, 1, self._num_classes, self._box_code_size])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * self._box_code_size, [self._kernel_size, self._kernel_size], scope='BoxEncodingPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_encodings, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num_boxes, 1, self.num_classes, self._box_code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(class_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_predictions_with_background, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size * num_boxes, 1, total_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes + 1, activation_fn=None, scope='ClassPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [-1, 1, self._num_classes + 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * num_class_slots, [self._kernel_size, self._kernel_size], scope='ClassPredictor', biases_initializer=tf.constant_initializer(self._class_prediction_bias_init))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(class_predictions_with_background)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]))",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(class_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_predictions_with_background, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size * num_boxes, 1, total_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes + 1, activation_fn=None, scope='ClassPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [-1, 1, self._num_classes + 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * num_class_slots, [self._kernel_size, self._kernel_size], scope='ClassPredictor', biases_initializer=tf.constant_initializer(self._class_prediction_bias_init))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(class_predictions_with_background)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * num_boxes, 1, total_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_195": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_199": {
                "variable": {
                    "value": "proposals_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "tensor": {
                    "value": "ones_mat * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_409": {
                "variable": {
                    "value": "upsampled_features",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image_features",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[self._mask_height, self._mask_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_421": {
                "variable": {
                    "value": "instance_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(mask_predictions, perm=[0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "MaskPredictor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_526": {
                "msg": {
                    "value": "'depth of additional conv before box predictor: {}'.format(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_552": {
                "values": {
                    "value": "[combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, 1, self._box_code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_559": {
                "values": {
                    "value": "[combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_202": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "proposals_shape[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "proposals.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_546": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(class_feature_map, boxes=tf.reshape(proposal_boxes, [-1, self._box_code_size]), box_ind=get_box_indices(proposal_boxes), crop_size=self._crop_size, num_spatial_bins=self._num_spatial_bins, global_pool=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_predictions_with_background, squeeze_dims=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size * num_boxes, 1, total_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(flattened_image_features, self._num_classes + 1, activation_fn=None, scope='ClassPredictor')",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [-1, 1, self._num_classes + 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_predictions_per_location * num_class_slots, [self._kernel_size, self._kernel_size], scope='ClassPredictor', biases_initializer=tf.constant_initializer(self._class_prediction_bias_init))",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(class_predictions_with_background)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, tf.stack([combined_feature_map_shape[0], combined_feature_map_shape[1] * combined_feature_map_shape[2] * num_predictions_per_location, num_class_slots]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_218": {
                "tensor": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._box_code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "tensor": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._box_code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_421": {
                "a": {
                    "value": "mask_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upsampled_features, num_outputs=self.num_classes, activation_fn=None, kernel_size=[3, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_543": {
                "value": {
                    "value": "self._class_prediction_bias_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/box_predictor_test.py": {
        "tensorflow": {
            "global_variables_initializer_62": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_165": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_214": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_243": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_276": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "image_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, None, None, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_306": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_170": {
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_171": {
                "input": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_219": {
                "input": {
                    "value": "objectness_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_248": {
                "input": {
                    "value": "objectness_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_281": {
                "input": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_314": {
                "input": {
                    "value": "objectness_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ],
                        [
                            "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/keypoint_ops.py": {
        "tensorflow": {
            "cast_39": {
                "variable": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_60": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_61": {
                "variable": {
                    "value": "(win_y_min, win_x_min, win_y_max, win_x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_62": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(y, win_y_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_y_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(x, win_x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "win_x_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_85": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_86": {
                "variable": {
                    "value": "(win_y_min, win_x_min, win_y_max, win_x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_88": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(y >= win_y_min, y <= win_y_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_and(x >= win_x_min, x <= win_x_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_92": {
                "variable": {
                    "value": "new_y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(y >= win_y_min, y <= win_y_max), tf.logical_and(x >= win_x_min, x <= win_x_max))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(y, win_y_max), win_y_min)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.nan * tf.ones_like(y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_93": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(y >= win_y_min, y <= win_y_max), tf.logical_and(x >= win_x_min, x <= win_x_max))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(x, win_x_max), win_x_min)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.nan * tf.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_y, new_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_154": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_187": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(height, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_226": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flip_permutation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_227": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_229": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v, u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints * [[[y_scale, x_scale]]]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([y, x], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([new_y, new_x], 2)",
                            "Call"
                        ],
                        [
                            "scale(keypoints - [window[0], window[1]], 1.0 / win_height, 1.0 / win_width)",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_257": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_258": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flip_permutation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_259": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v, u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_262": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints * [[[y_scale, x_scale]]]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([y, x], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([new_y, new_x], 2)",
                            "Call"
                        ],
                        [
                            "scale(keypoints - [window[0], window[1]], 1.0 / win_height, 1.0 / win_width)",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_277": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_278": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints[:, :, ::-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v, u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_281": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints * [[[y_scale, x_scale]]]",
                            "BinOp"
                        ],
                        [
                            "tf.concat([y, x], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([new_y, new_x], 2)",
                            "Call"
                        ],
                        [
                            "scale(keypoints - [window[0], window[1]], 1.0 / win_height, 1.0 / win_width)",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_38": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_152": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_157": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_158": {
                "variable": {
                    "value": "max_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(max_val, 1.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['max value is lower than 1.01: ', max_val]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_192": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_193": {
                "variable": {
                    "value": "max_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(1.01, max_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['maximum keypoint coordinate value is larger than 1.01: ', max_val]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_224": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_256": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_276": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_62": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(y, win_y_max), win_y_min)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "win_y_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_63": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(x, win_x_max), win_x_min)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "win_x_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_and_89": {
                "x": {
                    "value": "y >= win_y_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "y <= win_y_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_90": {
                "x": {
                    "value": "x >= win_x_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "x <= win_x_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "identity_161": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_197": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ],
                        [
                            "tf.cast(width, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(width)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_92": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(y, win_y_max), win_y_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(x, win_x_max), win_x_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_158": {
                "x": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(keypoints)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(keypoints)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "[max_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_193": {
                "x": {
                    "value": "1.01",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(keypoints)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(keypoints)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_196": {
                "control_inputs": {
                    "value": "[max_assert]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/keypoint_ops_test.py": {
        "tensorflow": {
            "constant_27": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 0.0], [100.0, 200.0]], [[50.0, 120.0], [100.0, 140.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "y_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 200",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, 0.0], [1.0, 1.0]], [[0.5, 0.6], [1.0, 0.7]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.25, 0.25, 0.75, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.25], [0.75, 0.75]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.25, 0.25, 0.75, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[np.nan, np.nan], [np.nan, np.nan]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_81": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.25, 0.25, 0.75, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0.5], [1.0, 1.0]], [[0.5, -0.5], [1.5, 1.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_94": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[10.0, 30.0], [30.0, 45.0]], [[20.0, 0.0], [40.0, 60.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_100": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.25, 0.5], [0.75, 0.75]], [[0.5, 0.0], [1.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[10.0, 30.0], [30.0, 45.0]], [[20.0, 0.0], [40.0, 60.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_138": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[10.0, 30.0], [30.0, 45.0]], [[20.0, 0.0], [40.0, 60.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_150": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_156": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.9], [0.3, 0.7], [0.2, 0.8]], [[0.4, 0.6], [0.6, 0.4], [0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_167": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_173": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.1], [0.7, 0.3], [0.8, 0.2]], [[0.6, 0.4], [0.4, 0.6], [0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_184": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.6], [0.5, 0.6], [0.6, 0.7]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "expected_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.1], [0.8, 0.2], [0.7, 0.3]], [[0.4, 0.4], [0.4, 0.5], [0.3, 0.6]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/losses.py": {
        "tensorflow": {
            "abs_158": {
                "variable": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_159": {
                "variable": {
                    "value": "abs_diff_lt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_228": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_234": {
                "variable": {
                    "value": "per_entry_cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_280": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_286": {
                "variable": {
                    "value": "per_entry_cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "prediction_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_335": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._logit_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale_logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_337": {
                "variable": {
                    "value": "per_row_cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(target_tensor, [-1, num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(prediction_tensor, [-1, num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_402": {
                "variable": {
                    "value": "per_entry_cross_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "bootstrap_target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._alpha * target_tensor + (1.0 - self._alpha) * tf.sigmoid(prediction_tensor)",
                            "BinOp"
                        ],
                        [
                            "self._alpha * target_tensor + (1.0 - self._alpha) * tf.cast(tf.sigmoid(prediction_tensor) > 0.5, tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_515": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(location_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_516": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(cls_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_556": {
                "variable": {
                    "value": "location_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(mined_location_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_557": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(mined_cls_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_609": {
                "variable": {
                    "value": "positives_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "match.matched_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_610": {
                "variable": {
                    "value": "negatives_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "match.unmatched_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_611": {
                "variable": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_int32(positives_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_612": {
                "variable": {
                    "value": "max_negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_negatives_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_int32(max_negatives_per_positive * tf.to_float(num_positives))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_equal_615": {
                "variable": {
                    "value": "topk_negatives_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cumsum(tf.to_int32(negatives_indicator))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(min_negatives_per_image, tf.to_int32(max_negatives_per_positive * tf.to_float(num_positives)))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_617": {
                "variable": {
                    "value": "subsampled_selection_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_or(positives_indicator, topk_negatives_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "square_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.square(weighted_diff)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "anchorwise_smooth_l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.where(abs_diff_lt_1, 0.5 * tf.square(abs_diff), abs_diff - 0.5), 2) * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.reshape(weights, [-1]) * per_anchor_iou_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "per_entry_cross_ent * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_293": {
                "variable": {
                    "value": "modulating_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - p_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_302": {
                "input_tensor": {
                    "value": "focal_cross_entropy_loss * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_342": {
                "input_tensor": {
                    "value": "per_row_cross_ent * tf.reshape(weights, [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_406": {
                "input_tensor": {
                    "value": "per_entry_cross_ent * tf.expand_dims(weights, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "non_max_suppression_543": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detection_boxlist.get()",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "image_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_losses[ind]",
                            "Subscript"
                        ],
                        [
                            "location_losses[ind]",
                            "Subscript"
                        ],
                        [
                            "image_losses + location_losses[ind] * self._loc_loss_weight",
                            "BinOp"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "num_hard_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hard_examples",
                            "Attribute"
                        ],
                        [
                            "detection_boxlist.num_boxes()",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "self._iou_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_566": {
                "variable": {
                    "value": "avg_num_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(self._num_positives_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_567": {
                "variable": {
                    "value": "avg_num_negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(self._num_negatives_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_68": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(target_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_120": {
                "x": {
                    "value": "weighted_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prediction_tensor - target_tensor) * tf.expand_dims(weights, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "input_tensor": {
                    "value": "square_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.square(weighted_diff)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "tf.where(abs_diff_lt_1, 0.5 * tf.square(abs_diff), abs_diff - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "tensor": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "tensor": {
                    "value": "ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "input_tensor": {
                    "value": "per_entry_cross_ent * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "tensor": {
                    "value": "ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_301": {
                "input_tensor": {
                    "value": "focal_cross_entropy_loss * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_405": {
                "input_tensor": {
                    "value": "per_entry_cross_ent * tf.expand_dims(weights, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_556": {
                "values": {
                    "value": "mined_location_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_557": {
                "values": {
                    "value": "mined_cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_568": {
                "name": {
                    "value": "HardExampleMiner/NumPositives",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "avg_num_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.to_float(self._num_positives_list))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_569": {
                "name": {
                    "value": "HardExampleMiner/NumNegatives",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "avg_num_negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.to_float(self._num_negatives_list))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_611": {
                "x": {
                    "value": "positives_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(match.matched_column_indicator(), indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_613": {
                "x": {
                    "value": "max_negatives_per_positive * tf.to_float(num_positives)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_616": {
                "x": {
                    "value": "tf.to_int32(negatives_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_618": {
                "x": {
                    "value": "positives_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(match.matched_column_indicator(), indices)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "topk_negatives_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.cumsum(tf.to_int32(negatives_indicator)), max_negatives)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_619": {
                "input": {
                    "value": "subsampled_selection_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(positives_indicator, topk_negatives_indicator))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_620": {
                "tensor": {
                    "value": "tf.gather(indices, subsampled_selection_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_161": {
                "condition": {
                    "value": "abs_diff_lt_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(abs_diff, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * tf.square(abs_diff)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "abs_diff - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "tensor": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "tensor": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "per_row_cross_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=tf.reshape(target_tensor, [-1, num_classes]), logits=tf.reshape(prediction_tensor, [-1, num_classes]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_406": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_553": {
                "input_tensor": {
                    "value": "tf.gather(location_losses[ind], selected_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_555": {
                "input_tensor": {
                    "value": "tf.gather(cls_losses[ind], selected_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_566": {
                "x": {
                    "value": "self._num_positives_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_567": {
                "x": {
                    "value": "self._num_negatives_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_616": {
                "x": {
                    "value": "negatives_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(match.unmatched_column_indicator(), indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_620": {
                "params": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "subsampled_selection_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(positives_indicator, topk_negatives_indicator))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_68": {
                "x": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.is_nan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_341": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_397": {
                "x": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_400": {
                "x": {
                    "value": "tf.sigmoid(prediction_tensor) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_405": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ],
                        [
                            "weights * tf.reshape(ops.indices_to_dense_vector(class_indices, tf.shape(prediction_tensor)[2]), [1, 1, -1])",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(weights, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_553": {
                "params": {
                    "value": "location_losses[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_locations, image_losses, num_hard_examples, self._iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_555": {
                "params": {
                    "value": "cls_losses[ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_locations, image_losses, num_hard_examples, self._iou_threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_614": {
                "x": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.to_int32(positives_indicator))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_161": {
                "x": {
                    "value": "abs_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_232": {
                "input": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_284": {
                "input": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_401": {
                "x": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(prediction_tensor, self._logit_scale, name='scale_logit')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/losses_test.py": {
        "tensorflow": {
            "ones_33": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_71": {
                "variable": {
                    "value": "expected_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "prediction_tensor - target_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_81": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([batch_size, num_anchors, code_size / 2]), tf.ones([batch_size, num_anchors, code_size / 2]) * np.nan]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[2.5, 0, 0.4, 0], [0, 0, 0, 0], [0, 2.5, 0, 0.4]], [[3.5, 0, 0, 0], [0, 0.4, 0, 0.9], [0, 0, 1.5, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_anchors, code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_110": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2, 1, 1], [0, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.5, 0, 2.4, 1], [0, 0, 1, 1], [0, 0, 0.5, 0.25]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_127": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.5, 0, 2.4, 1], [0, 0, 1, 1], [50, 50, 500.5, 100.25]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_142": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [100, 0, -100], [-100, -100, 100]], [[-100, 0, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_150": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_158": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_169": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [100, 0, -100], [-100, -100, 100]], [[-100, 0, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_177": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_185": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100, 100], [100, -100, -100, -100], [100, 0, -100, 100], [-100, -100, 100, -100]], [[-100, 0, 100, 100], [-100, 100, -100, 100], [100, 100, 100, 100], [0, 0, -1, 100]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_205": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0, 0], [1, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]], [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 0], [1, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_216": {
                "variable": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[_logit(0.97)], [_logit(0.9)], [_logit(0.73)], [_logit(0.27)], [_logit(0.09)], [_logit(0.03)]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_241": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1], [1], [1], [0], [0], [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_247": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_264": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[_logit(0.55)], [_logit(0.52)], [_logit(0.5)], [_logit(0.48)], [_logit(0.45)]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1], [1], [1], [0], [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_274": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_291": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[_logit(0.55)], [_logit(0.52)], [_logit(0.5)], [_logit(0.48)], [_logit(0.45)]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_296": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1], [1], [1], [0], [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_301": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_318": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[_logit(0.55)], [_logit(0.52)], [_logit(0.5)], [_logit(0.48)], [_logit(0.45)]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_323": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1], [1], [1], [0], [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_328": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_347": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[_logit(0.55)], [_logit(0.52)], [_logit(0.5)], [_logit(0.48)], [_logit(0.45)]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_352": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1], [1], [1], [0], [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_357": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_376": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [100, 0, -100], [-100, -100, 100]], [[-100, 0, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_384": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_392": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_408": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [100, 0, -100], [-100, -100, 100]], [[-100, 0, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_416": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_424": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_449": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_457": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_474": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_490": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_511": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [0, 0, -100], [-100, -100, 100]], [[-100, 0, 0], [-100, 100, -100], [-100, 100, -100], [100, -100, -100]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_519": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [0, 1, 0], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_527": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0.5, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_538": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [0, 0, -100], [-100, -100, 100]], [[-100, 0, 0], [-100, 100, -100], [-100, 100, -100], [100, -100, -100]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_546": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [0, 1, 0], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_554": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0.5, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_569": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [0, 0, -100], [-100, -100, 100]], [[-100, 0, 0], [-100, 100, -100], [-100, 100, -100], [100, -100, -100]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_577": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [0, 1, 0], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_585": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_602": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, 0], [100, -100, -100], [100, -100, -100], [-100, -100, 100]], [[-100, -100, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_610": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_618": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_620": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_630": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, 0], [100, -100, -100], [100, -100, -100], [-100, -100, 100]], [[-100, -100, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_638": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_646": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_648": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_658": {
                "variable": {
                    "value": "prediction_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-100, 100, -100], [100, -100, -100], [100, 0, -100], [-100, -100, 100]], [[-100, 0, 100], [-100, 100, -100], [100, 100, 100], [0, 0, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_666": {
                "variable": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1]], [[0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_674": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 1], [1, 1, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_676": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_691": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 90, 80, 0], [0, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_693": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 10, 50, 110], [9, 6, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_695": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_719": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 90, 80, 0], [0, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_721": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 10, 50, 110], [9, 6, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_723": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_746": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 90, 80, 0], [0, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_748": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 10, 50, 110], [9, 6, 3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_750": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.9, 0.9], [0.9, 0.9, 0.99, 0.99], [0.1, 0.1, 0.9, 0.9], [0.1, 0.1, 0.9, 0.9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_773": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 90, 80, 0, 1, 2, 3, 10, 20, 100, 20, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_775": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 100, 0, 90, 70, 0, 60, 0, 17, 13, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_777": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.5, 0.1], [0.0, 0.0, 0.6, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.8, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 1.0, 0.1], [0.0, 0.0, 1.1, 0.1], [0.0, 0.0, 0.2, 0.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_789": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, -1, 0, -1, -1, 1, -1, -1, -1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_823": {
                "variable": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 90, 80, 0, 1, 2, 3, 10, 20, 100, 20, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_825": {
                "variable": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 100, 0, 90, 70, 0, 60, 0, 17, 13, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_827": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.5, 0.1], [0.0, 0.0, 0.6, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 0.8, 0.1], [0.0, 0.0, 0.2, 0.1], [0.0, 0.0, 1.0, 0.1], [0.0, 0.0, 1.1, 0.1], [0.0, 0.0, 0.2, 0.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_839": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[-1] * 12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "main_875": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[batch_size, num_anchors, code_size / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_84": {
                "shape": {
                    "value": "[batch_size, num_anchors, code_size / 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/matcher.py": {
        "tensorflow": {
            "greater_equal_92": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_96": {
                "input": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_114": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_118": {
                "input": {
                    "value": "self.unmatched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_137": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_141": {
                "input": {
                    "value": "self.ignored_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_169": {
                "x": {
                    "value": "tf.reshape(t, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_84": {
                "condition": {
                    "value": "tf.greater(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_106": {
                "condition": {
                    "value": "tf.equal(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_128": {
                "condition": {
                    "value": "self.ignored_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_151": {
                "condition": {
                    "value": "tf.greater(0, self._match_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_166": {
                "params": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_193": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_84": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_106": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_151": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/matcher_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_116": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 1, -1, 0, -1, 5, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/minibatch_sampler.py": {
        "tensorflow": {
            "where_80": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(indicator)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_84": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.size(indices), num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_85": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(indicator)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.reshape(num_samples, [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_90": {
                "x": {
                    "value": "selected_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.indices_to_dense_vector(selected_indices, tf.shape(indicator)[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_84": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(indicator)",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.size(indices), num_samples)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/minibatch_sampler_test.py": {
        "tensorflow": {
            "constant_28": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_63": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ],
                        [
                            "[True, False, True, False, True, True, False]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "indicator_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/post_processing.py": {
        "tensorflow": {
            "Assert_108": {
                "variable": {
                    "value": "length_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(num_boxes, num_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Incorrect scores field length: actual vs expected.', num_scores, num_boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_114": {
                "variable": {
                    "value": "per_class_boxes_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_370": {
                "variable": {
                    "value": "batch_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_single_image_nms_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "[boxes, scores, masks] + list(additional_fields.values()) + [num_valid_boxes]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_nmsed_outputs * [tf.float32] + [tf.int32]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_116": {
                "variable": {
                    "value": "per_class_masks_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(masks_shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_142": {
                "variable": {
                    "value": "max_selection_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_size_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "boxlist_filtered.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "non_max_suppression_144": {
                "variable": {
                    "value": "selected_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxlist_filtered.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "scores": {
                    "value": "boxlist_filtered.get_field(fields.BoxListFields.scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_output_size": {
                    "value": "max_selection_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(max_size_per_class, boxlist_filtered.num_boxes())",
                            "Call"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "iou_thresh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_158": {
                "variable": {
                    "value": "max_total_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_total_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(max_total_size, sorted_boxes.num_boxes())",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "sorted_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_266": {
                "variable": {
                    "value": "masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, num_anchors, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "masks_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_size, num_anchors, 1, 0, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_319": {
                "variable": {
                    "value": "per_image_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(per_image_boxes, 3 * [0], tf.stack([per_image_num_valid_boxes, -1, -1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, q, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "per_image_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(per_image_scores, [0, 0], tf.stack([per_image_num_valid_boxes, -1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "per_image_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(per_image_masks, 4 * [0], tf.stack([per_image_num_valid_boxes, -1, -1, -1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, q, per_image_masks.shape[2].value, per_image_masks.shape[3].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_105": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_109": {
                "x": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(boxes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "num_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(scores)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "class_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scores, [0, class_idx], tf.stack([num_scores, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "[length_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_254": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_256": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_261": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_320": {
                "input_": {
                    "value": "per_image_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.slice(per_image_boxes, 3 * [0], tf.stack([per_image_num_valid_boxes, -1, -1])), [-1, q, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "3 * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([per_image_num_valid_boxes, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_323": {
                "input_": {
                    "value": "per_image_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.slice(per_image_scores, [0, 0], tf.stack([per_image_num_valid_boxes, -1])), [-1, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([per_image_num_valid_boxes, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_327": {
                "input_": {
                    "value": "per_image_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[2]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.slice(per_image_masks, 4 * [0], tf.stack([per_image_num_valid_boxes, -1, -1, -1])), [-1, q, per_image_masks.shape[2].value, per_image_masks.shape[3].value])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "4 * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([per_image_num_valid_boxes, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_335": {
                "variable": {
                    "value": "per_image_additional_fields[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(per_image_additional_fields[key], additional_field_dim * [0], tf.stack([per_image_num_valid_boxes] + (additional_field_dim - 1) * [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + [dim.value for dim in additional_field_shape[1:]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_124": {
                "input_": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, class_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([num_scores, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "input": {
                    "value": "nms_result.get_field(fields.BoxListFields.scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_321": {
                "values": {
                    "value": "[per_image_num_valid_boxes, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_324": {
                "values": {
                    "value": "[per_image_num_valid_boxes, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_328": {
                "values": {
                    "value": "[per_image_num_valid_boxes, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_124": {
                "values": {
                    "value": "[num_scores, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_336": {
                "input_": {
                    "value": "per_image_additional_fields[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "additional_field_dim * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([per_image_num_valid_boxes] + (additional_field_dim - 1) * [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_338": {
                "values": {
                    "value": "[per_image_num_valid_boxes] + (additional_field_dim - 1) * [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/post_processing_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9], [0.75], [0.6], [0.95], [0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(8), [8, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_keypoints, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_104": {
                "variable": {
                    "value": "exp_nms_keypoints_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.constant([3, 0, 6, 5], dtype=tf.float32), [4, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_keypoints, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_131": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_140": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "keypoint_heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_boxes, heatmap_height, heatmap_width, num_keypoints]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_202": {
                "variable": {
                    "value": "coarse_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 1.1, 1.1], [0.1, 0.2, 1.1, 1.2], [0.1, -0.2, 1.1, 1.0], [0.1, 10.1, 1.1, 11.1], [0.1, 10.2, 1.1, 11.2], [0.1, 100.1, 1.1, 101.1], [0.1, 1000.1, 1.1, 1002.1], [0.1, 1000.1, 1.1, 1002.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_249": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_257": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_264": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(8), [8, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_classes, mask_height, mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_277": {
                "variable": {
                    "value": "exp_nms_masks_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.constant([3, 0, 6, 5], dtype=tf.float32), [4, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, mask_height, mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_302": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 10, 10]], [[1, 1, 11, 11]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_304": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9], [0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_305": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 4, 8, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_326": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 10, 10]], [[1, 1, 11, 11]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_328": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9], [0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_329": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[5, 4, 8, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_350": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_358": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_383": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_391": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_417": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_425": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9], [0.75], [0.6], [0.95], [0.5], [0.3], [0.01], [0.01]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_440": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]], [[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_449": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_475": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]], [[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_484": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0], [0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_518": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_527": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0]], [[0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_575": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_584": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0]], [[0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_588": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[[0, 1], [2, 3]], [[1, 2], [3, 4]]], [[[2, 3], [4, 5]], [[3, 4], [5, 6]]], [[[4, 5], [6, 7]], [[5, 6], [7, 8]]], [[[6, 7], [8, 9]], [[7, 8], [9, 10]]]], [[[[8, 9], [10, 11]], [[9, 10], [11, 12]]], [[[10, 11], [12, 13]], [[11, 12], [13, 14]]], [[[12, 13], [14, 15]], [[13, 14], [15, 16]]], [[[14, 15], [16, 17]], [[15, 16], [17, 18]]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_649": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_658": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0]], [[0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_734": {
                "variable": {
                    "value": "boxes_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_735": {
                "variable": {
                    "value": "scores_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_736": {
                "variable": {
                    "value": "masks_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_812": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_821": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0]], [[0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_825": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[[0, 1], [2, 3]], [[1, 2], [3, 4]]], [[[2, 3], [4, 5]], [[3, 4], [5, 6]]], [[[4, 5], [6, 7]], [[5, 6], [7, 8]]], [[[6, 7], [8, 9]], [[7, 8], [9, 10]]]], [[[[8, 9], [10, 11]], [[9, 10], [11, 12]]], [[[10, 11], [12, 13]], [[11, 12], [13, 14]]], [[[12, 13], [14, 15]], [[13, 14], [15, 16]]], [[[14, 15], [16, 17]], [[15, 16], [17, 18]]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_834": {
                "variable": {
                    "value": "num_valid_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_881": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_890": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.9, 0.01], [0.75, 0.05], [0.6, 0.01], [0.95, 0]], [[0.5, 0.01], [0.3, 0.01], [0.01, 0.85], [0.01, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_906": {
                "variable": {
                    "value": "num_valid_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_959": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "tf.range(8)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[8, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "tensor": {
                    "value": "tf.constant([3, 0, 6, 5], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 10, 10]], [[1, 1, 11, 11]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 10, 10]], [[1, 1, 11, 11]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1]], [[0, 0.1, 1, 1.1]], [[0, -0.1, 1, 0.9]], [[0, 10, 1, 11]], [[0, 10.1, 1, 11.1]], [[0, 100, 1, 101]], [[0, 1000, 1, 1002]], [[0, 1000, 1, 1002.1]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]], [[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]], [[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]])",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[0, 0, 1, 1], [0, 0, 4, 5]], [[0, 0.1, 1, 1.1], [0, 0.1, 2, 1.1]], [[0, -0.1, 1, 0.9], [0, -0.1, 1, 0.9]], [[0, 10, 1, 11], [0, 10, 1, 11]]], [[[0, 10.1, 1, 11.1], [0, 10.1, 1, 11.1]], [[0, 100, 1, 101], [0, 100, 1, 101]], [[0, 1000, 1, 1002], [0, 999, 2, 1004]], [[0, 1000, 1, 1002.1], [0, 999, 2, 1002.7]]]], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_265": {
                "tensor": {
                    "value": "tf.range(8)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[8, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "tensor": {
                    "value": "tf.constant([3, 0, 6, 5], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_663": {
                "value": {
                    "value": "[[[[6, 7], [8, 9]], [[0, 1], [2, 3]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[13, 14], [15, 16]], [[8, 9], [10, 11]], [[10, 11], [12, 13]], [[0, 0], [0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_895": {
                "value": {
                    "value": "[[[[6, 7], [8, 9]], [[0, 1], [2, 3]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[13, 14], [15, 16]], [[8, 9], [10, 11]], [[10, 11], [12, 13]], [[0, 0], [0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "value": {
                    "value": "[3, 0, 6, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_278": {
                "value": {
                    "value": "[3, 0, 6, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/prefetcher.py": {
        "tensorflow": {
            "PaddingFIFOQueue_51": {
                "variable": {
                    "value": "prefetch_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t.dtype for t in tensor_dict.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "shapes": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t.get_shape() for t in tensor_dict.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "names": {
                    "value": "names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(tensor_dict.keys())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefetch_queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_queue_runner_56": {
                "qr": {
                    "value": "tf.train.queue_runner.QueueRunner(prefetch_queue, [enqueue_op])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_58": {
                "name": {
                    "value": "'queue/%s/fraction_of_%d_full' % (prefetch_queue.name, capacity)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.to_float(prefetch_queue.size()) * (1.0 / capacity)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "QueueRunner_56": {
                "queue": {
                    "value": "prefetch_queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.PaddingFIFOQueue(capacity, dtypes=dtypes, shapes=shapes, names=names, name='prefetch_queue')",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_60": {
                "x": {
                    "value": "prefetch_queue.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/prefetcher_test.py": {
        "tensorflow": {
            "main_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "initial_value": {
                    "value": "image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Variable_70": {
                "initial_value": {
                    "value": "image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Variable_74": {
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/preprocessor.py": {
        "tensorflow": {
            "split_219": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_220": {
                "variable": {
                    "value": "flipped_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_221": {
                "variable": {
                    "value": "flipped_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_222": {
                "variable": {
                    "value": "flipped_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, flipped_xmin, ymax, flipped_xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_238": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_239": {
                "variable": {
                    "value": "flipped_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_240": {
                "variable": {
                    "value": "flipped_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "flipped_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flipped_ymin, xmin, flipped_ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_257": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_258": {
                "variable": {
                    "value": "rotated_ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_259": {
                "variable": {
                    "value": "rotated_ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rotated_ymin, rotated_xmin, rotated_ymax, rotated_xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_306": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1124": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_1130": {
                "variable": {
                    "value": "max_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image_height * 2, image_width * 2])",
                            "Call"
                        ],
                        [
                            "tf.maximum(max_image_size, tf.stack([image_height, image_width]))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.to_float(tf.stack([image_height, image_width])) * max_padded_size_ratio)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.stack([image_height, image_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1135": {
                "variable": {
                    "value": "min_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image_height, image_width])",
                            "Call"
                        ],
                        [
                            "tf.maximum(min_image_size, tf.stack([image_height, image_width]))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.to_float(tf.stack([image_height, image_width])) * min_padded_size_ratio)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.stack([image_height, image_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_1138": {
                "variable": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "max_image_size[0] > min_image_size[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _random_integer(min_image_size[0], max_image_size[0], seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_image_size[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_1143": {
                "variable": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "max_image_size[1] > min_image_size[1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _random_integer(min_image_size[1], max_image_size[1], seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_image_size[1]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_1148": {
                "variable": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "target_height > image_height",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _random_integer(0, target_height - image_height, seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_1153": {
                "variable": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "target_width > image_width",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _random_integer(0, target_width - image_width, seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_1158": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_height > image_height, lambda : _random_integer(0, target_height - image_height, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_height - target_height + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_width > image_width, lambda : _random_integer(0, target_width - image_width, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_width - target_width + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1166": {
                "variable": {
                    "value": "image_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_1167": {
                "variable": {
                    "value": "image_ones_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(image)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_height > image_height, lambda : _random_integer(0, target_height - image_height, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_height - target_height + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_width > image_width, lambda : _random_integer(0, target_width - image_width, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_width - target_width + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1177": {
                "variable": {
                    "value": "new_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([-offset_height, -offset_width, target_height - offset_height, target_width - offset_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1253": {
                "variable": {
                    "value": "image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_1270": {
                "variable": {
                    "value": "min_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.stack([image_height, image_width])) * min_padded_size_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1273": {
                "variable": {
                    "value": "max_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.stack([image_height, image_width])) * max_padded_size_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1682": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1683": {
                "variable": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1684": {
                "variable": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_1685": {
                "variable": {
                    "value": "orig_min_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1687": {
                "variable": {
                    "value": "min_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "min_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(min_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_1693": {
                "variable": {
                    "value": "large_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1694": {
                "variable": {
                    "value": "large_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1695": {
                "variable": {
                    "value": "large_size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[large_height, large_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_141": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "subtract_142": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "original_minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(original_minval)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_143": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "(target_maxval - target_minval) / (original_maxval - original_minval)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_145": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "target_minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(target_minval)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_188": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_or(label_scores > threshold, tf.is_nan(label_scores))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "retained_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_192": {
                "variable": {
                    "value": "retained_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, num_classes, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_193": {
                "variable": {
                    "value": "retained_label_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_357": {
                "variable": {
                    "value": "image_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_367": {
                "variable": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_370": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "flip_up_down_444": {
                "variable": {
                    "value": "image_flipped",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_454": {
                "variable": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_457": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rot90_528": {
                "variable": {
                    "value": "image_rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_535": {
                "variable": {
                    "value": "do_a_rot90_random",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_538": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_rot90_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _rot90_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "multiply_589": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "color_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(image), minval=minval, maxval=maxval, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_590": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_618": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_625": {
                "variable": {
                    "value": "image_newysize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(image_height), size_coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_627": {
                "variable": {
                    "value": "image_newxsize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(image_width), size_coef)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_653": {
                "variable": {
                    "value": "image_gray1",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grayscale_to_rgb_654": {
                "variable": {
                    "value": "image_gray3",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image_gray1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_661": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(do_gray_random, probability)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _image_to_gray(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "random_brightness_683": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "max_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_684": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_705": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "min_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "Method Argument"
                        ],
                        [
                            "0.8",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "max_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_706": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_724": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "max_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_725": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_746": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "min_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "Method Argument"
                        ],
                        [
                            "0.8",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "max_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "1.25",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_747": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_783": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_817": {
                "variable": {
                    "value": "box_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box[0, 0, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box[0, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "subtract_818": {
                "variable": {
                    "value": "box_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box[0, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box[0, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_819": {
                "variable": {
                    "value": "hw_coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_height, box_width, box_height, box_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_820": {
                "variable": {
                    "value": "hw_rand_coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hw_coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([box_height, box_width, box_height, box_width])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rand_numbers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1, 1, 4], minval=-ratio, maxval=ratio, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_821": {
                "variable": {
                    "value": "jittered_box",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "hw_rand_coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(hw_coefs, rand_numbers)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_822": {
                "variable": {
                    "value": "jittered_box",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "jittered_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(box, hw_rand_coefs)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(jittered_box, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_827": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_828": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_829": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_831": {
                "variable": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: random_jitter_box(x, ratio, seed)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_834": {
                "variable": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.map_fn(lambda x: random_jitter_box(x, ratio, seed), boxes, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(distorted_boxes, boxes_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_896": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_899": {
                "variable": {
                    "value": "boxes_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.clip_by_value(boxes, clip_value_min=0.0, clip_value_max=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_903": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "image.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "boxes_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.clip_by_value(boxes, clip_value_min=0.0, clip_value_max=1.0), 1)",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "(0.0",
                            "Method Argument"
                        ],
                        [
                            "(0.1",
                            "Method Argument"
                        ],
                        [
                            "(0.0",
                            "Method Argument"
                        ],
                        [
                            "(0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((aspect_ratio, aspect_ratio),) * len(area_range)",
                            "BinOp"
                        ],
                        [
                            "(0.75",
                            "Method Argument"
                        ],
                        [
                            "(0.75",
                            "Method Argument"
                        ],
                        [
                            "(0.75",
                            "Method Argument"
                        ],
                        [
                            "((0.5",
                            "Method Argument"
                        ],
                        [
                            "((0.5",
                            "Method Argument"
                        ],
                        [
                            "((0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.1",
                            "Method Argument"
                        ],
                        [
                            "(0.1",
                            "Method Argument"
                        ],
                        [
                            "(0.1",
                            "Method Argument"
                        ],
                        [
                            "((0.1",
                            "Method Argument"
                        ],
                        [
                            "((0.1",
                            "Method Argument"
                        ],
                        [
                            "((0.1",
                            "Method Argument"
                        ],
                        [
                            "((0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_914": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "im_box_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "im_box_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_918": {
                "variable": {
                    "value": "im_box_rank2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.to_float(offset_height) / tf.to_float(orig_height), tf.to_float(offset_width) / tf.to_float(orig_width), tf.to_float(offset_height + target_height) / tf.to_float(orig_height), tf.to_float(offset_width + target_width) / tf.to_float(orig_width)])",
                            "Call"
                        ],
                        [
                            "tf.stack([0.0, 0.0, target_height / image_height, target_width / image_width])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_920": {
                "variable": {
                    "value": "im_box_rank1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.to_float(offset_height) / tf.to_float(orig_height), tf.to_float(offset_width) / tf.to_float(orig_width), tf.to_float(offset_height + target_height) / tf.to_float(orig_height), tf.to_float(offset_width + target_width) / tf.to_float(orig_width)])",
                            "Call"
                        ],
                        [
                            "tf.stack([0.0, 0.0, target_height / image_height, target_width / image_width])",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_943": {
                "variable": {
                    "value": "new_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "new_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_boxlist.get()",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(new_boxes, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "new_boxlist.get()",
                            "Call"
                        ],
                        [
                            "new_boxlist.get()",
                            "Call"
                        ],
                        [
                            "new_boxlist.get()",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_1066": {
                "variable": {
                    "value": "do_a_crop_random",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "do_a_crop_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.greater(do_a_crop_random, random_coef)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "random_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "(0.15",
                            "Method Argument"
                        ],
                        [
                            "(0.15",
                            "Method Argument"
                        ],
                        [
                            "(0.15",
                            "Method Argument"
                        ],
                        [
                            "(0.15",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_1077": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_crop_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.greater(do_a_crop_random, random_coef)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "strict_random_crop_image_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tuple(outputs)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_1122": {
                "variable": {
                    "value": "pad_color",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1129": {
                "variable": {
                    "value": "max_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_height * 2, image_width * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1134": {
                "variable": {
                    "value": "min_image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1182": {
                "x": {
                    "value": "tf.stack([image_height, image_width, image_height, image_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1355": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_1359": {
                "variable": {
                    "value": "new_aspect_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "aspect_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_1363": {
                "variable": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "orig_aspect_ratio >= new_aspect_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : orig_height",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "target_height_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_1369": {
                "variable": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "orig_aspect_ratio <= new_aspect_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : orig_width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "target_width_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_1377": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_height > image_height, lambda : _random_integer(0, target_height - image_height, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_height - target_height + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(target_width > image_width, lambda : _random_integer(0, target_width - image_width, seed), lambda : tf.constant(0, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "_random_integer(0, orig_width - target_width + 1, seed)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1380": {
                "variable": {
                    "value": "im_box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.to_float(offset_height) / tf.to_float(orig_height), tf.to_float(offset_width) / tf.to_float(orig_width), tf.to_float(offset_height + target_height) / tf.to_float(orig_height), tf.to_float(offset_width + target_width) / tf.to_float(orig_width)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1488": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1489": {
                "variable": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1490": {
                "variable": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_1492": {
                "variable": {
                    "value": "new_aspect_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "aspect_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_1493": {
                "variable": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "image_aspect_ratio <= new_aspect_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : image_height",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image_width / new_aspect_ratio",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_1497": {
                "variable": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "image_aspect_ratio >= new_aspect_ratio",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : image_width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image_height * new_aspect_ratio",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "maximum_1502": {
                "variable": {
                    "value": "min_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_padded_size_ratio[0] * image_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1504": {
                "variable": {
                    "value": "min_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_padded_size_ratio[1] * image_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1506": {
                "variable": {
                    "value": "max_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_padded_size_ratio[0] * image_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1508": {
                "variable": {
                    "value": "max_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_padded_size_ratio[1] * image_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1511": {
                "variable": {
                    "value": "min_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_height / target_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "min_width / target_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_1512": {
                "variable": {
                    "value": "max_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_height / target_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "max_width / target_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_1518": {
                "variable": {
                    "value": "new_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.to_int32(target_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.to_int32(target_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1521": {
                "variable": {
                    "value": "im_box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.0, 0.0, target_height / image_height, target_width / image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1582": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_1585": {
                "variable": {
                    "value": "box_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.minimum(tf.to_float(image_height), tf.to_float(image_width)), size_to_image_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1593": {
                "variable": {
                    "value": "y_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalized_y_min * tf.to_float(image_height)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1594": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalized_x_min * tf.to_float(image_width)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1595": {
                "variable": {
                    "value": "black_box",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[box_size, box_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_1598": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - tf.image.pad_to_bounding_box(black_box, y_min, x_min, image_height, image_width)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1622": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_1677": {
                "value": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "small_size",
                            "variable"
                        ],
                        [
                            "tf.cond(tf.to_float(tf.reduce_max(large_size)) > max_dimension, lambda : small_size, lambda : large_size)",
                            "Call"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "_compute_new_static_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "_compute_new_dynamic_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "tf.constant([new_height, new_width], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1699": {
                "variable": {
                    "value": "orig_max_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1700": {
                "variable": {
                    "value": "max_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "max_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_1706": {
                "variable": {
                    "value": "small_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1707": {
                "variable": {
                    "value": "small_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1708": {
                "variable": {
                    "value": "small_size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[small_height, small_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1709": {
                "variable": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.to_float(tf.reduce_max(large_size)) > max_dimension",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : small_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : large_size",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "minimum_1806": {
                "variable": {
                    "value": "min_image_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_size[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_1807": {
                "variable": {
                    "value": "min_target_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_image_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(image_height, image_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(min_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_1810": {
                "variable": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_height) * target_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1811": {
                "variable": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_width) * target_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "resize_bilinear_1812": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_1816": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1935": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, num_classes, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_1949": {
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_2528": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_2559": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_70": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(rand_sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "NormalizeImage",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "RetainBoxesAboveThreshold",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, labels, label_scores]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_197": {
                "variable": {
                    "value": "retained_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_201": {
                "variable": {
                    "value": "retained_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_vertical(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : keypoint_ops.rot90(keypoints), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.logical_or(label_scores > threshold, tf.is_nan(label_scores)))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_364": {
                "name": {
                    "value": "RandomHorizontalFlip",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_375": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_boxes_left_right(boxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : boxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_381": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_masks_left_right(masks)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : masks",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_388": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : keypoint_ops.flip_horizontal(keypoints, 0.5, permutation)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : keypoints",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_451": {
                "name": {
                    "value": "RandomVerticalFlip",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_462": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_boxes_up_down(boxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : boxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_468": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_masks_up_down(masks)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : masks",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_475": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : keypoint_ops.flip_vertical(keypoints, 0.5, permutation)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : keypoints",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_531": {
                "name": {
                    "value": "RandomRotation90",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_544": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_rot90_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _rot90_boxes(boxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : boxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_550": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_rot90_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _rot90_masks(masks)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : masks",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_556": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_rot90_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : keypoint_ops.rot90(keypoints)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : keypoints",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_582": {
                "name": {
                    "value": "RandomPixelValueScale",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_616": {
                "name": {
                    "value": "RandomImageScale",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_633": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_newysize, image_newxsize]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_657": {
                "name": {
                    "value": "RandomRGBtoGray",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_682": {
                "name": {
                    "value": "RandomAdjustBrightness",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_704": {
                "name": {
                    "value": "RandomAdjustContrast",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_723": {
                "name": {
                    "value": "RandomAdjustHue",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_745": {
                "name": {
                    "value": "RandomAdjustSaturation",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_768": {
                "name": {
                    "value": "RandomDistortColor",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_770": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_771": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_772": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_773": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_825": {
                "name": {
                    "value": "RandomJitterBoxes",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_895": {
                "name": {
                    "value": "RandomCropImage",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_953": {
                "variable": {
                    "value": "masks_of_boxes_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "inside_window_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_954": {
                "variable": {
                    "value": "masks_of_boxes_completely_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "masks_of_boxes_inside_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(masks, inside_window_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_958": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "masks_of_boxes_completely_inside_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(masks_of_boxes_inside_window, keep_ids)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "masks_box_begin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, im_box_begin[0], im_box_begin[1]]",
                            "List"
                        ],
                        [
                            "tf.stack([0, offset_height, offset_width])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "masks_box_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, im_box_size[0], im_box_size[1]]",
                            "List"
                        ],
                        [
                            "tf.stack([-1, target_height, target_width])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_964": {
                "variable": {
                    "value": "keypoints_of_boxes_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_vertical(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : keypoint_ops.rot90(keypoints), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "inside_window_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_965": {
                "variable": {
                    "value": "keypoints_of_boxes_completely_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints_of_boxes_inside_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(keypoints, inside_window_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_1131": {
                "values": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1136": {
                "values": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1178": {
                "values": {
                    "value": "[-offset_height, -offset_width, target_height - offset_height, target_width - offset_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1183": {
                "values": {
                    "value": "[image_height, image_width, image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1354": {
                "name": {
                    "value": "RandomCropToAspectRatio",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1415": {
                "variable": {
                    "value": "masks_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_1416": {
                "variable": {
                    "value": "masks_box_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0, offset_height, offset_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1417": {
                "variable": {
                    "value": "masks_box_size",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-1, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1418": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "masks_inside_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(masks, keep_ids)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "masks_box_begin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, im_box_begin[0], im_box_begin[1]]",
                            "List"
                        ],
                        [
                            "tf.stack([0, offset_height, offset_width])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "masks_box_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, im_box_size[0], im_box_size[1]]",
                            "List"
                        ],
                        [
                            "tf.stack([-1, target_height, target_width])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1422": {
                "variable": {
                    "value": "keypoints_inside_window",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_ops.flip_vertical(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : keypoint_ops.rot90(keypoints), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_1487": {
                "name": {
                    "value": "RandomPadToAspectRatio",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1534": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_1535": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.to_int32(target_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.to_int32(target_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1538": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1601": {
                "name": {
                    "value": "RandomBlackPatchInImage",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1605": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(random_prob, probability)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : add_black_patch_to_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_1621": {
                "name": {
                    "value": "ImageToFloat",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_1693": {
                "x": {
                    "value": "orig_height * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_1694": {
                "x": {
                    "value": "orig_width * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_1759": {
                "name": {
                    "value": "ResizeToRange",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, min_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1769": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_1770": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "small_size",
                            "variable"
                        ],
                        [
                            "tf.cond(tf.to_float(tf.reduce_max(large_size)) > max_dimension, lambda : small_size, lambda : large_size)",
                            "Call"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "_compute_new_static_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "_compute_new_dynamic_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "tf.constant([new_height, new_width], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1772": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_1803": {
                "name": {
                    "value": "ResizeGivenMinDimension",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, min_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_1818": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(masks, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_1847": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1848": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_1865": {
                "name": {
                    "value": "ResizeImage",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, new_height, new_width, method, align_corners]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1875": {
                "variable": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_1887": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "num_instances > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "resize_masks_branch",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "reshape_masks_branch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_1906": {
                "name": {
                    "value": "SubtractChannelMean",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, means]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1931": {
                "name": {
                    "value": "OneHotEncoding",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_1936": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, num_classes, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_99": {
                "inputs": {
                    "value": "tuples[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_or_189": {
                "x": {
                    "value": "label_scores > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.is_nan(label_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_584": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_626": {
                "x": {
                    "value": "tf.to_float(image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "size_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=min_scale_ratio, maxval=max_scale_ratio, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_628": {
                "x": {
                    "value": "tf.to_float(image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "size_coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=min_scale_ratio, maxval=max_scale_ratio, dtype=tf.float32, seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_662": {
                "x": {
                    "value": "do_gray_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_brightness_775": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_776": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_777": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_778": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_900": {
                "t": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_up_down(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_boxes(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(boxes, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_1151": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1156": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1271": {
                "x": {
                    "value": "tf.stack([image_height, image_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1274": {
                "x": {
                    "value": "tf.stack([image_height, image_width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1358": {
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1361": {
                "x": {
                    "value": "tf.round(tf.to_float(orig_width) / new_aspect_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1367": {
                "x": {
                    "value": "tf.round(tf.to_float(orig_height) * new_aspect_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1393": {
                "input": {
                    "value": "im_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.to_float(offset_height) / tf.to_float(orig_height), tf.to_float(offset_width) / tf.to_float(orig_width), tf.to_float(offset_height + target_height) / tf.to_float(orig_height), tf.to_float(offset_width + target_width) / tf.to_float(orig_width)])",
                            "Call"
                        ],
                        [
                            "tf.stack([0.0, 0.0, target_height / image_height, target_width / image_width])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1404": {
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_1519": {
                "x": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_1586": {
                "x": {
                    "value": "tf.minimum(tf.to_float(image_height), tf.to_float(image_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "size_to_image_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_1596": {
                "image": {
                    "value": "black_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([box_size, box_size, 3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "y_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(normalized_y_min * tf.to_float(image_height))",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(normalized_x_min * tf.to_float(image_width))",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_size[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target_width": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_1706": {
                "x": {
                    "value": "orig_height * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_1707": {
                "x": {
                    "value": "orig_width * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1804": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1805": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1808": {
                "x": {
                    "value": "min_image_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(image_height, image_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1813": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, original_minval)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, (target_maxval - target_minval) / (original_maxval - original_minval))",
                            "Call"
                        ],
                        [
                            "tf.add(image, target_minval)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_image(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, color_coef)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(do_gray_random, probability), lambda : image, lambda : _image_to_gray(image))",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, min_delta, max_delta)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.greater(random_prob, probability), lambda : image, lambda : add_black_patch_to_image(image))",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, mask)",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(tf.expand_dims(image, axis=0), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(images, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1877": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_1878": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "small_size",
                            "variable"
                        ],
                        [
                            "tf.cond(tf.to_float(tf.reduce_max(large_size)) > max_dimension, lambda : small_size, lambda : large_size)",
                            "Call"
                        ],
                        [
                            "large_size",
                            "variable"
                        ],
                        [
                            "_compute_new_static_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "_compute_new_dynamic_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "tf.constant([new_height, new_width], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1880": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(masks_of_boxes_completely_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(masks_inside_window, masks_box_begin, masks_box_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, -1)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, tf.to_int32(target_height), tf.to_int32(target_width))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(new_masks, new_size, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masks, [0, new_size[0], new_size[1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "crop_result[i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1884": {
                "variable": {
                    "value": "new_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[0, new_size[0], new_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_189": {
                "x": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_626": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_size[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_628": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_1271": {
                "values": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1274": {
                "values": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_1361": {
                "x": {
                    "value": "tf.to_float(orig_width) / new_aspect_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_1367": {
                "x": {
                    "value": "tf.to_float(orig_height) * new_aspect_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1536": {
                "x": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[0] > min_image_size[0], lambda : _random_integer(min_image_size[0], max_image_size[0], seed), lambda : max_image_size[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio >= new_aspect_ratio, lambda : orig_height, target_height_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio <= new_aspect_ratio, lambda : image_height, lambda : image_width / new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1537": {
                "x": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(max_image_size[1] > min_image_size[1], lambda : _random_integer(min_image_size[1], max_image_size[1], seed), lambda : max_image_size[1])",
                            "Call"
                        ],
                        [
                            "tf.cond(orig_aspect_ratio <= new_aspect_ratio, lambda : orig_width, target_width_fn)",
                            "Call"
                        ],
                        [
                            "tf.cond(image_aspect_ratio >= new_aspect_ratio, lambda : image_width, lambda : image_height * new_aspect_ratio)",
                            "Call"
                        ],
                        [
                            "scale * target_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * target_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1587": {
                "x": {
                    "value": "tf.to_float(image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(image_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1593": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_size[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1594": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_1606": {
                "x": {
                    "value": "random_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=0.0, maxval=1.0, dtype=tf.float32, seed=random_seed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_1710": {
                "x": {
                    "value": "tf.reduce_max(large_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1810": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_size[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1811": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_1819": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1822": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1874": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(masks, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_up_down(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_rot90_random, lambda : _rot90_masks(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(masks, [image_newysize, image_newxsize], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(masks, axis=3), size=[target_height, target_width], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cond(num_instances > 0, resize_masks_branch, reshape_masks_branch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_93": {
                "x": {
                    "value": "rand_sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_cases)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1381": {
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1382": {
                "x": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1383": {
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1384": {
                "x": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1587": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_size[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_max_1710": {
                "input_tensor": {
                    "value": "large_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[large_height, large_width]",
                            "List"
                        ],
                        [
                            "tf.stack([large_height, large_width])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1361": {
                "x": {
                    "value": "orig_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1367": {
                "x": {
                    "value": "orig_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_71": {
                "x": {
                    "value": "rand_sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_cases)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/preprocessor_test.py": {
        "tensorflow": {
            "fill_35": {
                "variable": {
                    "value": "ch255",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 100, 200, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(255, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_36": {
                "variable": {
                    "value": "ch128",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 100, 200, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(128, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_37": {
                "variable": {
                    "value": "ch0",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 100, 200, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(0, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "imr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ch255, ch0, ch0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ch255, ch255, ch0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "imb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ch255, ch0, ch255]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "imw",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ch128, ch128, ch128]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "imu",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[imr, img]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "imd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[imb, imw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[imu, imd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_64": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_117": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_126": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_130": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_138": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_142": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_154": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_158": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_162": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_174": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_178": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_189": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_190": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_193": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_194": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_197": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_202": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_205": {
                "variable": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_206": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "variable": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_213": {
                "variable": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_214": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_r, images_g, images_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_218": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_223": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_452": {
                "variable": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedBoxesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_453": {
                "variable": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_454": {
                "variable": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_455": {
                "variable": {
                    "value": "boxes_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_457": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_458": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_459": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_460": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_482": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_483": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_484": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_485": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_539": {
                "variable": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedBoxesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_540": {
                "variable": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_541": {
                "variable": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_542": {
                "variable": {
                    "value": "boxes_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_544": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_545": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_546": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_547": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_569": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_570": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_571": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_572": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_626": {
                "variable": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedBoxesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedBoxesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_627": {
                "variable": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ],
                        [
                            "boxes",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_628": {
                "variable": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "boxes_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(boxes, boxes_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_629": {
                "variable": {
                    "value": "boxes_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(boxes_diff1, boxes_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_631": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_632": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_633": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_634": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_656": {
                "variable": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterLeftRightFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterUpDownFlip()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterRot90()",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_657": {
                "variable": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "images",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_658": {
                "variable": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ],
                        [
                            "tf.squared_difference(images, images_expected2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_659": {
                "variable": {
                    "value": "images_diff_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ],
                        [
                            "tf.multiply(images_diff1, images_diff2)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_710": {
                "variable": {
                    "value": "values_greater",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(images) * 0.9 / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_equal_711": {
                "variable": {
                    "value": "values_less",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(images) * 1.1 / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fill_712": {
                "variable": {
                    "value": "values_true",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 4, 4, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_725": {
                "variable": {
                    "value": "images_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_726": {
                "variable": {
                    "value": "images_scaled_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_745": {
                "variable": {
                    "value": "(images_gray_r, images_gray_g, images_gray_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "images_gray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_747": {
                "variable": {
                    "value": "(images_r, images_g, images_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squared_difference_749": {
                "variable": {
                    "value": "images_r_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_751": {
                "variable": {
                    "value": "images_r_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_gray_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_753": {
                "variable": {
                    "value": "images_r_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_r_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_r), tf.to_float(images_gray_r))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_r_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_gray_r), tf.to_float(images_gray_g))",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_754": {
                "variable": {
                    "value": "images_g_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_g)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_756": {
                "variable": {
                    "value": "images_g_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_gray_g)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_758": {
                "variable": {
                    "value": "images_g_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_g_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_g), tf.to_float(images_gray_g))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_g_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_gray_g), tf.to_float(images_gray_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_759": {
                "variable": {
                    "value": "images_b_diff1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_761": {
                "variable": {
                    "value": "images_b_diff2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(images_gray_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.to_float(images_gray_r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_763": {
                "variable": {
                    "value": "images_b_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_b_diff1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_b), tf.to_float(images_gray_b))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "images_b_diff2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squared_difference(tf.to_float(images_gray_b), tf.to_float(images_gray_r))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_764": {
                "variable": {
                    "value": "image_zero1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_785": {
                "variable": {
                    "value": "image_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_786": {
                "variable": {
                    "value": "image_bright_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_bright",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_805": {
                "variable": {
                    "value": "image_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_806": {
                "variable": {
                    "value": "image_contrast_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_825": {
                "variable": {
                    "value": "image_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_826": {
                "variable": {
                    "value": "image_hue_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_hue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_842": {
                "variable": {
                    "value": "images_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_846": {
                "variable": {
                    "value": "images_distorted_color_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_distorted_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_856": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_860": {
                "variable": {
                    "value": "distorted_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_889": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_890": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_891": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_892": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_925": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_926": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_927": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_928": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_962": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_963": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_964": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_965": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1009": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1010": {
                "variable": {
                    "value": "distorted_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1011": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1012": {
                "variable": {
                    "value": "distorted_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_1039": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1042": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 7, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1653": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1654": {
                "variable": {
                    "value": "padded_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1655": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1656": {
                "variable": {
                    "value": "padded_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1701": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1702": {
                "variable": {
                    "value": "padded_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1703": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1704": {
                "variable": {
                    "value": "padded_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1742": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1743": {
                "variable": {
                    "value": "cropped_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cropped_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1744": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1745": {
                "variable": {
                    "value": "cropped_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cropped_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1777": {
                "variable": {
                    "value": "boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1778": {
                "variable": {
                    "value": "padded_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1779": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1780": {
                "variable": {
                    "value": "padded_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "padded_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1807": {
                "variable": {
                    "value": "images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1808": {
                "variable": {
                    "value": "blacked_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blacked_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blacked_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1831": {
                "variable": {
                    "value": "resized_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resized_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_1832": {
                "variable": {
                    "value": "expected_images_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 75, 150, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_2098": {
                "variable": {
                    "value": "in_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "in_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.1, 0.2, 0.4, 0.6], [0.5, 0.3, 0.9, 0.7]]",
                            "List"
                        ],
                        [
                            "tf.constant(in_boxes)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2170": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2171": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_2172": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2173": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_2206": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2207": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_2208": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2209": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_2259": {
                "variable": {
                    "value": "images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2260": {
                "variable": {
                    "value": "distorted_images_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_2261": {
                "variable": {
                    "value": "boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.25, 0.75, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[-0.1, 0.25, 0.75, 1], [0.25, 0.5, 0.75, 1.1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.25, 0.0, 0.75, 0.5]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 1.0, 1.0], [0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 0.75, 0.75], [0.0, 0.25, 0.5, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createEmptyTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxesOutOfImage()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.1, 0.1, 0.8, 0.3], [0.2, 0.4, 0.75, 0.75], [0.3, 0.1, 0.4, 0.7]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ],
                        [
                            "self.createTestBoxes()",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_2262": {
                "variable": {
                    "value": "distorted_boxes_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distorted_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ],
                        [
                            "distorted_tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "main_2288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "[1.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "[0.5, np.nan]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 255.0], [0.0, 0.0, 255.0], [0.0, 0.0, 255.0]], [[0.0, 255.0, 255.0], [0.0, 255.0, 255.0], [0.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [255.0, 255.0, 255.0]], [[0.0, 0.0, 0.0], [255.0, 255.0, 255.0], [255.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_93": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsInsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsOutsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsInsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsOutsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsInsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsOutsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 255.0], [0.0, 0.0, 255.0], [0.0, 0.0, 255.0]], [[0.0, 255.0, 255.0], [0.0, 255.0, 255.0], [0.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [255.0, 255.0, 255.0]], [[0.0, 0.0, 0.0], [255.0, 255.0, 255.0], [255.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_250": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 255.0], [0.0, 0.0, 255.0], [0.0, 0.0, 255.0]], [[0.0, 255.0, 255.0], [0.0, 255.0, 255.0], [0.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [255.0, 255.0, 255.0]], [[0.0, 0.0, 0.0], [255.0, 255.0, 255.0], [255.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_260": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 255.0], [0.0, 0.0, 255.0], [0.0, 0.0, 255.0]], [[0.0, 255.0, 255.0], [0.0, 255.0, 255.0], [0.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [255.0, 255.0, 255.0]], [[0.0, 0.0, 0.0], [255.0, 255.0, 255.0], [255.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_263": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_266": {
                "value": {
                    "value": "[[0.0, 0.25, 0.75, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 255.0], [0.0, 0.0, 255.0], [0.0, 0.0, 255.0]], [[0.0, 255.0, 255.0], [0.0, 255.0, 255.0], [0.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]], [[255.0, 255.0, 0.0], [255.0, 255.0, 0.0], [255.0, 255.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [255.0, 255.0, 255.0]], [[0.0, 0.0, 0.0], [255.0, 255.0, 255.0], [255.0, 255.0, 255.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[255.0, 0.0, 0.0], [255.0, 0.0, 0.0], [255.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_282": {
                "value": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]], [[0.4, 0.4], [0.5, 0.5], [0.6, 0.6]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]], [[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[0.1, 0.1], [0.2, 0.2], [0.3, 0.3]]])",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_keypoints]",
                            "Subscript"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsInsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypointsOutsideCrop()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ],
                        [
                            "self.createTestKeypoints()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_285": {
                "value": {
                    "value": "[np.nan]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_288": {
                "value": {
                    "value": "[[0.25, 0.5, 0.75, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_291": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1068": {
                "variable": {
                    "value": "expected_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.178947, 0.07173, 0.75789469, 0.66244733], [0.28421, 0.0, 0.38947365, 0.57805908]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1071": {
                "variable": {
                    "value": "expected_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[7, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1469": {
                "variable": {
                    "value": "mock_random_integer.return_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1512": {
                "variable": {
                    "value": "mock_random_integer.return_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1858": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1859": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1885": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1886": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_1915": {
                "variable": {
                    "value": "in_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_1918": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_1960": {
                "variable": {
                    "value": "in_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_1961": {
                "variable": {
                    "value": "in_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_1965": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1966": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1996": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1997": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_2021": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_2039": {
                "variable": {
                    "value": "in_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_2040": {
                "variable": {
                    "value": "in_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_2044": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2045": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_2074": {
                "variable": {
                    "value": "out_image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ],
                        [
                            "preprocessor.resize_to_range(in_image, min_dimension=min_dim, max_dimension=max_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2075": {
                "variable": {
                    "value": "out_masks_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_2129": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(240, 320, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_2141": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 4, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_749": {
                "x": {
                    "value": "images_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 128, 128], [0, 0, 128, 128], [0, 128, 128, 128], [192, 192, 128, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [-1, -1, 0, 0], [-1, 0, 0, 0], [0.5, 0.5, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.1, 0.1], [0.6, 0.6, 0.1, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, -0.1, -0.1], [0.4, 0.4, -0.1, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0], [-1, 0, 0, 0], [-1, -1, 0, 0], [0, 0, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0, 0], [0, 0, 0, 0], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_r, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_750": {
                "x": {
                    "value": "images_gray_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_751": {
                "x": {
                    "value": "images_gray_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_752": {
                "x": {
                    "value": "images_gray_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_754": {
                "x": {
                    "value": "images_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[0, 0, 128, 128], [0, 0, 128, 128], [0, 128, 192, 192], [192, 192, 128, 192]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, 0, 0], [-1, -1, 0, 0], [-1, 0, 0.5, 0.5], [0.5, 0.5, 0, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.9, -0.9, 0.1, 0.1], [-0.9, -0.9, 0.1, 0.1], [-0.9, 0.1, 0.6, 0.6], [0.6, 0.6, 0.1, 0.6]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, -1, -0.1, -0.1], [-1, -1, -0.1, -0.1], [-1, -0.1, 0.4, 0.4], [0.4, 0.4, -0.1, 0.4]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, -1, -1], [0, 0, -1, -1], [0.5, 0.5, 0, -1], [0.5, 0, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0, 0.5], [-1, 0, 0.5, 0.5], [-1, -1, 0, 0], [-1, -1, 0, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, 0.5], [0, 0, 0.5, 0], [-1, -1, 0, 0.5], [-1, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_g, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_755": {
                "x": {
                    "value": "images_gray_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_756": {
                "x": {
                    "value": "images_gray_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_757": {
                "x": {
                    "value": "images_gray_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_759": {
                "x": {
                    "value": "images_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[[128, 128, 192, 0], [0, 0, 128, 192], [0, 128, 128, 0], [192, 192, 192, 128]]], dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0, 0, 0.5, -1], [-1, -1, 0, 0.5], [-1, 0, 0, -1], [0.5, 0.5, 0.5, 0]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.1, 0.1, 0.6, -0.9], [-0.9, -0.9, 0.1, 0.6], [-0.9, 0.1, 0.1, -0.9], [0.6, 0.6, 0.6, 0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-0.1, -0.1, 0.4, -1], [-1, -1, -0.1, 0.4], [-1, -0.1, -0.1, -1], [0.4, 0.4, 0.4, -0.1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, 0, 0], [0.5, 0, -1, -1], [-1, 0, 0, -1], [0, 0.5, 0.5, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[0.5, 0.5, 0.5, 0], [-1, 0, 0, -1], [-1, -1, 0, 0.5], [0, 0, 0.5, -1]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[-1, 0.5, -1, 0], [0.5, 0, 0, 0.5], [0, -1, 0, 0.5], [0, -1, -1, 0.5]]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(images_b, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_760": {
                "x": {
                    "value": "images_gray_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_761": {
                "x": {
                    "value": "images_gray_b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_762": {
                "x": {
                    "value": "images_gray_r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_707": {
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_708": {
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "tf.concat([images_r, images_g, images_b], 3)",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.expectedImagesAfterNormalization()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([1, image_height, image_width, 3])",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createColorfulTestImage()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ],
                        [
                            "self.createTestImages()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1056": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1057": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1058": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1091": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1092": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1093": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1121": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1122": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1123": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1148": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1149": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1150": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1198": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1199": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1200": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1249": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1250": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1251": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1309": {
                "value": {
                    "value": "[6, 143, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1310": {
                "value": {
                    "value": "[190, 237, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1311": {
                "value": {
                    "value": "[[[0.03, 0.3575, 0.98, 0.95]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/region_similarity_calculator.py": {
        "tensorflow": {
            "name_scope_50": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/region_similarity_calculator_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_39": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 1.0, 0.0], [-4.0, 0.0, 0.0, 3.0], [0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "corners1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "corners2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0], [0.0, 0.0, 20.0, 20.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/core/target_assigner.py": {
        "tensorflow": {
            "stack_450": {
                "variable": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cls_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_451": {
                "variable": {
                    "value": "batch_cls_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cls_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_452": {
                "variable": {
                    "value": "batch_reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "reg_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_453": {
                "variable": {
                    "value": "batch_reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "reg_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "assert_equal_143": {
                "variable": {
                    "value": "unmatched_shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(groundtruth_labels)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(self._unmatched_cls_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "Unmatched class target shape incompatible with groundtruth labels shape!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_147": {
                "variable": {
                    "value": "labels_and_box_shapes_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(groundtruth_labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "groundtruth_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "Groundtruth boxes and labels have incompatible shapes!",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_211": {
                "variable": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._default_regression_target()",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([tf.size(unmatched_ignored_anchor_indices), 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dynamic_stitch_214": {
                "variable": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[matched_anchor_indices, unmatched_ignored_anchor_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[matched_reg_targets, unmatched_ignored_reg_targets]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_256": {
                "variable": {
                    "value": "matched_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "matched_gt_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match.matched_row_indices()",
                            "Call"
                        ],
                        [
                            "match.matched_row_indices()",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_259": {
                "variable": {
                    "value": "unmatched_ignored_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self._unmatched_cls_target, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([tf.size(unmatched_ignored_anchor_indices)] + ones)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dynamic_stitch_263": {
                "variable": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[matched_anchor_indices, unmatched_ignored_anchor_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[matched_cls_targets, unmatched_ignored_cls_targets]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_283": {
                "variable": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match.matched_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_309": {
                "variable": {
                    "value": "matched_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match.matched_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_310": {
                "variable": {
                    "value": "ignore_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match.ignored_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_88": {
                "variable": {
                    "value": "self._unmatched_cls_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_140": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.expand_dims(groundtruth_boxes.num_boxes(), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "[self._box_coder.code_size * [0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "[unmatched_shape_assert, labels_and_box_shapes_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_213": {
                "values": {
                    "value": "[tf.size(unmatched_ignored_anchor_indices), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_260": {
                "input": {
                    "value": "self._unmatched_cls_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_261": {
                "values": {
                    "value": "[tf.size(unmatched_ignored_anchor_indices)] + ones",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "input": {
                    "value": "groundtruth_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_213": {
                "input": {
                    "value": "unmatched_ignored_anchor_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match.unmatched_or_ignored_column_indices()",
                            "Call"
                        ],
                        [
                            "match.unmatched_or_ignored_column_indices()",
                            "Call"
                        ]
                    ]
                }
            },
            "size_261": {
                "input": {
                    "value": "unmatched_ignored_anchor_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match.unmatched_or_ignored_column_indices()",
                            "Call"
                        ],
                        [
                            "match.unmatched_or_ignored_column_indices()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/core/target_assigner_test.py": {
        "tensorflow": {
            "constant_37": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_40": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0.0, 0.5, 0.9, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_128": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_133": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0], [0.75, 0, 1.0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_137": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_186": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0], [0.75, 0, 1.0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_205": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0], [0.75, 0, 1.0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_230": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1], [1, 0]], [[1, 0], [0, 1]], [[0, 1], [1, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_279": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_284": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0], [0.75, 0, 1.0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_288": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "box_corners_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_293": {
                "variable": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "box_corners_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0, 0.0, 0.0, 0.0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_296": {
                "variable": {
                    "value": "groundtruth_labels_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_297": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "groundtruth_labels_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0, 0]], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_339": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 0.8], [0, 0.5, 0.5, 1.0], [0.75, 0, 1.0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_343": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4 * [4 * [0.1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_353": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_369": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_374": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_375": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_384": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1], [1, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_407": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1] + num_classes * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_418": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros(target_dimensions)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_436": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0.25, 0.25], [0, 0.25, 1, 1], [0, 0.1, 0.5, 0.5], [0.75, 0.75, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_440": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_491": {
                "variable": {
                    "value": "class_targets1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_492": {
                "variable": {
                    "value": "class_targets2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 1], [0, 0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_497": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0.25, 0.25], [0, 0.25, 1, 1], [0, 0.1, 0.5, 0.5], [0.75, 0.75, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_501": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_559": {
                "variable": {
                    "value": "class_targets1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 1], [1, 1, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_561": {
                "variable": {
                    "value": "class_targets2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 1, 1], [1, 1, 0]], [[0, 0, 1], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_568": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0.25, 0.25], [0, 0.25, 1, 1], [0, 0.1, 0.5, 0.5], [0.75, 0.75, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_572": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_631": {
                "variable": {
                    "value": "box_coords_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_632": {
                "variable": {
                    "value": "box_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "box_coords_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros((1, 4), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_636": {
                "variable": {
                    "value": "prior_means",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0.25, 0.25], [0, 0.25, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_638": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.1, 0.1, 0.1], [0.1, 0.1, 0.1, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_653": {
                "variable": {
                    "value": "gt_class_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(0, num_classes + pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_687": {
                "variable": {
                    "value": "prior_stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_717": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_45": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_96": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_144": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_203": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_237": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_351": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_382": {
                "value": {
                    "value": "box_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "tf.slice(box_corners_expanded, [0, 0], [0, 4])",
                            "Call"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.0, 0.0, 0.5, 0.8], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ],
                        [
                            "[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.9, 0.9], [0.75, 0, 0.95, 0.27]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_427": {
                "value": {
                    "value": "[[0.0, 0.0, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_428": {
                "value": {
                    "value": "[[0, 0.25123152, 1, 1], [0.015789, 0.0985, 0.55789, 0.3842]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_482": {
                "value": {
                    "value": "[[0.0, 0.0, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_484": {
                "value": {
                    "value": "[[0, 0.25123152, 1, 1], [0.015789, 0.0985, 0.55789, 0.3842]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_551": {
                "value": {
                    "value": "[[0.0, 0.0, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_553": {
                "value": {
                    "value": "[[0, 0.25123152, 1, 1], [0.015789, 0.0985, 0.55789, 0.3842]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_684": {
                "value": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 1.0, 1.0]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_686": {
                "value": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 1.0, 1.0]]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_696": {
                "value": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 1.0, 1.0]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/data_decoders/tf_example_decoder.py": {
        "tensorflow": {
            "reshape_155": {
                "variable": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_example_string_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_162": {
                "variable": {
                    "value": "tensor_dict[is_crowd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor_dict[is_crowd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "to_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([-1, height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.greater(masks, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "to_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([-1, height, width]), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "VarLenFeature_110": {
                "variable": {
                    "value": "self.keys_to_features[image/object/mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys_to_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(masks)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(tf.greater(masks, 0.0)), to_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_52": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_54": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_56": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_58": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_62": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_64": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "VarLenFeature_67": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_69": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_71": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_73": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_75": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_77": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_79": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_81": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_83": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_85": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_181": {
                "values": {
                    "value": "[-1, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_185": {
                "x": {
                    "value": "tf.greater(masks, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_185": {
                "x": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys_to_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(masks)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_float(tf.greater(masks, 0.0)), to_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/data_decoders/tf_example_decoder_test.py": {
        "tensorflow": {
            "Example_63": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_83": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_102": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_126": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_152": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_175": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_196": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_219": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_242": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_284": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_335": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_49": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_57": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "encode_jpeg_31": {
                "variable": {
                    "value": "image_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.constant(image_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_jpeg_41": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.constant(image_encoded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_56": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_90": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_109": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_136": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_159": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_182": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_203": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_226": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_250": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_294": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_344": {
                "value": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ],
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)})).SerializeToString()",
                            "Call"
                        ]
                    ]
                }
            },
            "encode_png_33": {
                "variable": {
                    "value": "image_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.constant(image_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_png_43": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.constant(image_encoded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_49": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_52": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_57": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_56": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_63": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/source_id': self._BytesFeature('image_id')}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_83": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/key/sha256': self._BytesFeature('abc'), 'image/filename': self._BytesFeature('filename')}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_102": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_png), 'image/format': self._BytesFeature('png'), 'image/source_id': self._BytesFeature('image_id')}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_126": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/bbox/ymin': self._FloatFeature(bbox_ymins), 'image/object/bbox/xmin': self._FloatFeature(bbox_xmins), 'image/object/bbox/ymax': self._FloatFeature(bbox_ymaxs), 'image/object/bbox/xmax': self._FloatFeature(bbox_xmaxs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_152": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/class/label': self._Int64Feature(bbox_classes)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_175": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/area': self._FloatFeature(object_area)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_196": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/is_crowd': self._Int64Feature(object_is_crowd)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_219": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/difficult': self._Int64Feature(object_difficult)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_242": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/object/group_of': self._Int64Feature(object_group_of)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_284": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Features_335": {
                "feature": {
                    "value": "{'image/encoded': self._BytesFeature(encoded_jpeg), 'image/format': self._BytesFeature('jpeg'), 'image/height': self._Int64Feature([image_height]), 'image/width': self._Int64Feature([image_width]), 'image/object/mask': self._FloatFeature(instance_masks_flattened), 'image/object/class/label': self._Int64Feature(object_classes)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(image_height, image_width, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(image_height, image_width, 3)).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_41": {
                "value": {
                    "value": "image_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.encode_jpeg(tf.constant(image_tensor)).eval()",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf.constant(image_tensor)).eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_33": {
                "value": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(4, 5, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(image_height, image_width, 3)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.random.randint(255, size=(image_height, image_width, 3)).astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_43": {
                "value": {
                    "value": "image_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.encode_jpeg(tf.constant(image_tensor)).eval()",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf.constant(image_tensor)).eval()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/dataset_tools/create_data.py": {
        "tensorflow": {
            "Example_209": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_233": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "run_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_105": {
                "name": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_subdirectory, data['filename'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_209": {
                "feature": {
                    "value": "feature_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/format': dataset_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmins), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymins), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs), 'image/object/class/text': dataset_util.bytes_list_feature(classes_text), 'image/object/class/label': dataset_util.int64_list_feature(classes), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.int64_list_feature(truncated), 'image/object/view': dataset_util.bytes_list_feature(poses)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "GFile_244": {
                "name": {
                    "value": "xml_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, 'xmls', example + '.xml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_kitti_tf_record.py": {
        "tensorflow": {
            "DEFINE_string_51": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of root directory for the data. Folder structure is assumed to be:<data_dir>/training/label_2 (annotations) and<data_dir>/data_object_image_2/training/image_2(images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "output_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to which TFRecord fileswill be written. The TFRecord with the training setwill be located at: <output_path>_train.tfrecord.And the TFRecord with the validation set will belocated at: <output_path>_val.tfrecord",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_list_61": {
                "name": {
                    "value": "classes_to_use",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "['car', 'pedestrian', 'dontcare']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "Which classes of bounding boxes to use. Adding thedontcare class will remove all bboxs in the dontcareregions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "label_map_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "data/kitti_label_map.pbtxt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to label map proto.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "validation_set_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images tobe used as a validation set.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_107": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "'%s_train.tfrecord' % output_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_109": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "'%s_val.tfrecord' % output_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Example_168": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/source_id': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_png), 'image/format': dataset_util.bytes_feature('png'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin_norm), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax_norm), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin_norm), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax_norm), 'image/object/class/text': dataset_util.bytes_list_feature([x.encode('utf8') for x in annotations['type']]), 'image/object/class/label': dataset_util.int64_list_feature([label_map_dict[x] for x in annotations['type']]), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.float_list_feature(annotations['truncated']), 'image/object/alpha': dataset_util.float_list_feature(annotations['alpha']), 'image/object/3d_bbox/height': dataset_util.float_list_feature(annotations['3d_bbox_height']), 'image/object/3d_bbox/width': dataset_util.float_list_feature(annotations['3d_bbox_width']), 'image/object/3d_bbox/length': dataset_util.float_list_feature(annotations['3d_bbox_length']), 'image/object/3d_bbox/x': dataset_util.float_list_feature(annotations['3d_bbox_x']), 'image/object/3d_bbox/y': dataset_util.float_list_feature(annotations['3d_bbox_y']), 'image/object/3d_bbox/z': dataset_util.float_list_feature(annotations['3d_bbox_z']), 'image/object/3d_bbox/rot_y': dataset_util.float_list_feature(annotations['3d_bbox_rot_y'])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ListDirectory_112": {
                "dirname": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'data_object_image_2', 'training', 'image_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_150": {
                "name": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_dir, img_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_168": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/source_id': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_png), 'image/format': dataset_util.bytes_feature('png'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin_norm), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax_norm), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin_norm), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax_norm), 'image/object/class/text': dataset_util.bytes_list_feature([x.encode('utf8') for x in annotations['type']]), 'image/object/class/label': dataset_util.int64_list_feature([label_map_dict[x] for x in annotations['type']]), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.float_list_feature(annotations['truncated']), 'image/object/alpha': dataset_util.float_list_feature(annotations['alpha']), 'image/object/3d_bbox/height': dataset_util.float_list_feature(annotations['3d_bbox_height']), 'image/object/3d_bbox/width': dataset_util.float_list_feature(annotations['3d_bbox_width']), 'image/object/3d_bbox/length': dataset_util.float_list_feature(annotations['3d_bbox_length']), 'image/object/3d_bbox/x': dataset_util.float_list_feature(annotations['3d_bbox_x']), 'image/object/3d_bbox/y': dataset_util.float_list_feature(annotations['3d_bbox_y']), 'image/object/3d_bbox/z': dataset_util.float_list_feature(annotations['3d_bbox_z']), 'image/object/3d_bbox/rot_y': dataset_util.float_list_feature(annotations['3d_bbox_rot_y'])}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_kitti_tf_record_test.py": {
        "tensorflow": {
            "main_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_oid_tf_record.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "input_annotations_csv",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to CSV containing image bounding box annotations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "input_images_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory containing the image pixels downloaded from the OpenImages GitHub repository.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "input_label_map",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the label map proto",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "output_tf_record_path_prefix",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the output TFRecord. The shard index and the number of shards will be appended for each output shard.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "num_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of TFRecord shards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_73": {
                "variable": {
                    "value": "all_images",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(FLAGS.input_images_directory, '*.jpg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_61": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_79": {
                "x": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Found %d images...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_every_n_87": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "Processed %d images...",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "*args": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_pascal_tf_record.py": {
        "tensorflow": {
            "Example_123": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/format': dataset_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/text': dataset_util.bytes_list_feature(classes_text), 'image/object/class/label': dataset_util.int64_list_feature(classes), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.int64_list_feature(truncated), 'image/object/view': dataset_util.bytes_list_feature(poses)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_157": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_87": {
                "name": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_directory, img_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_123": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/format': dataset_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/text': dataset_util.bytes_list_feature(classes_text), 'image/object/class/label': dataset_util.int64_list_feature(classes), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.int64_list_feature(truncated), 'image/object/view': dataset_util.bytes_list_feature(poses)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GFile_171": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, example + '.xml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_pascal_tf_record_test.py": {
        "tensorflow": {
            "main_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/create_pet_tf_record.py": {
        "tensorflow": {
            "Example_190": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_211": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "run_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_100": {
                "name": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_subdirectory, data['filename'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_108": {
                "name": {
                    "value": "mask_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, 'trimaps', example + '.png')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_190": {
                "feature": {
                    "value": "feature_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/key/sha256': dataset_util.bytes_feature(key.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/format': dataset_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmins), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymins), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs), 'image/object/class/text': dataset_util.bytes_list_feature(classes_text), 'image/object/class/label': dataset_util.int64_list_feature(classes), 'image/object/difficult': dataset_util.int64_list_feature(difficult_obj), 'image/object/truncated': dataset_util.int64_list_feature(truncated), 'image/object/view': dataset_util.bytes_list_feature(poses)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "GFile_221": {
                "name": {
                    "value": "xml_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, 'xmls', example + '.xml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/oid_tfrecord_creation.py": {
        "tensorflow": {
            "Example_89": {
                "features": {
                    "value": "tf.train.Features(feature=feature_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_89": {
                "feature": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{standard_fields.TfExampleFields.object_bbox_ymin: dataset_util.float_list_feature(filtered_data_frame.YMin.as_matrix()), standard_fields.TfExampleFields.object_bbox_xmin: dataset_util.float_list_feature(filtered_data_frame.XMin.as_matrix()), standard_fields.TfExampleFields.object_bbox_ymax: dataset_util.float_list_feature(filtered_data_frame.YMax.as_matrix()), standard_fields.TfExampleFields.object_bbox_xmax: dataset_util.float_list_feature(filtered_data_frame.XMax.as_matrix()), standard_fields.TfExampleFields.object_class_text: dataset_util.bytes_list_feature(filtered_data_frame.LabelName.as_matrix()), standard_fields.TfExampleFields.object_class_label: dataset_util.int64_list_feature(filtered_data_frame.LabelName.map(lambda x: label_map[x]).as_matrix()), standard_fields.TfExampleFields.filename: dataset_util.bytes_feature('{}.jpg'.format(image_id)), standard_fields.TfExampleFields.source_id: dataset_util.bytes_feature(image_id), standard_fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(encoded_image)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordWriter_110": {
                "path": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/dataset_tools/oid_tfrecord_creation_test.py": {
        "tensorflow": {
            "main_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_198": {
                "path": {
                    "value": "tf_record_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}-{:05d}-of-00010'.format(os.path.join(tf.test.get_temp_dir(), 'test.tfrec'), idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_temp_dir_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/eval.py": {
        "tensorflow": {
            "set_verbosity_57": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_85": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Copy_89": {
                "oldpath": {
                    "value": "FLAGS.pipeline_config_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "newpath": {
                    "value": "os.path.join(FLAGS.eval_dir, 'pipeline.config')",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Copy_100": {
                "oldpath": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "newpath": {
                    "value": "os.path.join(FLAGS.eval_dir, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/eval_util.py": {
        "tensorflow": {
            "FileWriter_43": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_157": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, image=tf.Summary.Image(encoded_image_string=vis_utils.encode_image_array_as_png_str(image)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_164": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_231": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "master",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_465": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(result_dict['original_image'], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_45": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=key, simple_value=metrics[key])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "latest_checkpoint_240": {
                "variable": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dirs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_241": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_366": {
                "variable": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dirs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_475": {
                "variable": {
                    "value": "detection_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "detection_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_dict['detection_scores']",
                            "Subscript"
                        ],
                        [
                            "detections[detection_fields.detection_scores][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_245": {
                "graph_or_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_graph_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "eval.pbtxt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_step_286": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(master, graph=tf.get_default_graph())",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_490": {
                "variable": {
                    "value": "detection_masks_reframed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(detection_masks_reframed, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_513": {
                "variable": {
                    "value": "groundtruth_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "groundtruth_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groundtruth[input_data_fields.groundtruth_classes]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(groundtruth_classes, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_int64_478": {
                "x": {
                    "value": "detections[detection_fields.detection_classes][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_global_step_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_491": {
                "x": {
                    "value": "detection_masks_reframed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.reframe_box_masks_to_image_masks(detection_masks, detection_boxes, image_shape[1], image_shape[2])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(detection_masks_reframed, 0.5))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/evaluator.py": {
        "tensorflow": {
            "expand_dims_58": {
                "variable": {
                    "value": "original_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_dict[fields.InputDataFields.image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_183": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_184": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_189": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ],
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_step_170": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_187": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_192": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "original_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_dict[fields.InputDataFields.image], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_global_step_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/export_inference_graph.py": {
        "tensorflow": {
            "mark_flag_as_required_96": {
                "flag_name": {
                    "value": "pipeline_config_path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_97": {
                "flag_name": {
                    "value": "trained_checkpoint_prefix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mark_flag_as_required_98": {
                "flag_name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_104": {
                "name": {
                    "value": "FLAGS.pipeline_config_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/exporter.py": {
        "tensorflow": {
            "placeholder_143": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(None, None, None, 3)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "image_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "batch_tf_example_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tf_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "batch_image_str_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded_image_string_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_237": {
                "variable": {
                    "value": "outputs[detection_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "postprocessed_tensors.get('detection_boxes')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "detection_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_238": {
                "variable": {
                    "value": "outputs[detection_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "postprocessed_tensors.get('detection_scores')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "detection_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_239": {
                "variable": {
                    "value": "outputs[detection_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "postprocessed_tensors.get('detection_classes') + label_id_offset",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "detection_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_240": {
                "variable": {
                    "value": "outputs[num_detections]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_detections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "postprocessed_tensors.get('num_detections')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "num_detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_350": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_368": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_81": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(rewrite_options=rewrite_options, infer_shapes=True)",
                            "Call"
                        ],
                        [
                            "tf.GraphOptions()",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_130": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "decode_image_180": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "encoded_image_string_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_242": {
                "variable": {
                    "value": "outputs[detection_masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "postprocessed_tensors.get('detection_masks')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "detection_masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_334": {
                "dirname": {
                    "value": "output_directory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "checkpoint_exists_52": {
                "checkpoint_prefix": {
                    "value": "input_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_67": {
                "graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GraphOptions_76": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "rewrite_options": {
                    "value": "rewrite_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewriter_config_pb2.RewriterConfig(optimize_tensor_layout=rewriter_config_pb2.RewriterConfig.ON)",
                            "Call"
                        ]
                    ]
                },
                "infer_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_80": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_105": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output_node_names.split(',')",
                    "type": "Call",
                    "possible_values": []
                },
                "variable_names_blacklist": {
                    "value": "variable_names_blacklist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_names_blacklist.split(',') if variable_names_blacklist else None",
                            "IfExp"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_133": {
                "variable": {
                    "value": "read_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "ema_variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_averages.variables_to_restore()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_135": {
                "variable": {
                    "value": "write_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_162": {
                "fn": {
                    "value": "decode",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "batch_tf_example_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, shape=[None], name='tf_example')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_fn_185": {
                "fn": {
                    "value": "decode",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "batch_image_str_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.string, shape=[None], name='encoded_image_string_tensor')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_to_collection_244": {
                "name": {
                    "value": "output_collection_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'inference_op'",
                            "Method Argument"
                        ],
                        [
                            "'inference_op'",
                            "Method Argument"
                        ],
                        [
                            "'inference_op'",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "outputs[output_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_to_collection_246": {
                "name": {
                    "value": "output_collection_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'inference_op'",
                            "Method Argument"
                        ],
                        [
                            "'inference_op'",
                            "Method Argument"
                        ],
                        [
                            "'inference_op'",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "outputs['detection_masks']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GFile_257": {
                "name": {
                    "value": "frozen_graph_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "build_signature_def_294": {
                "variable": {
                    "value": "detection_signature",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tensor_info_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'inputs': tf.saved_model.utils.build_tensor_info(inputs)}",
                            "Dict"
                        ]
                    ]
                },
                "outputs": {
                    "value": "tensor_info_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "method_name": {
                    "value": "signature_constants.PREDICT_METHOD_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_316": {
                "graph_def": {
                    "value": "inference_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_318": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "saver_def": {
                    "value": "input_saver_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver.as_saver_def()",
                            "Call"
                        ]
                    ]
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(graph_options=graph_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "saver_def": {
                    "value": "input_saver_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver.as_saver_def()",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_88": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "input_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Session_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_283": {
                "graph_def": {
                    "value": "frozen_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "freeze_graph_with_def_protos(input_graph_def=tf.get_default_graph().as_graph_def(), input_saver_def=input_saver_def, input_checkpoint=checkpoint_to_use, output_node_names=output_node_names, restore_op_name='save/restore_all', filename_tensor_name='save/Const:0', clear_devices=True, optimize_graph=optimize_graph, initializer_nodes='')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "build_tensor_info_291": {
                "variable": {
                    "value": "tensor_info_outputs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "build_tensor_info_288": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(input_tensors)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/exporter_test.py": {
        "tensorflow": {
            "Graph_74": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_91": {
                "variable": {
                    "value": "od_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_105": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': _bytes_feature(encoded_image), 'image/format': _bytes_feature('jpg'), 'image/source_id': _bytes_feature('image_id')})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_213": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_356": {
                "variable": {
                    "value": "od_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_40": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_93": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "encode_jpeg_102": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.constant(image_array)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mock_model.preprocess(tf.placeholder(tf.float32, shape=[None, None, None, 3]))",
                            "Call"
                        ],
                        [
                            "fake_model.preprocess(tf.placeholder(dtype=tf.float32, shape=[None, None, None, 3]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_46": {
                "control_inputs": {
                    "value": "prediction_dict.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "postprocessed_tensors[detection_masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.arange(64).reshape([2, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_104": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_156": {
                "variable": {
                    "value": "meta_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "saved_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "encode_jpeg_359": {
                "variable": {
                    "value": "encoded_string",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_array_np",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Graph_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_521": {
                "variable": {
                    "value": "meta_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "saved_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_576": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_578": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta_graph_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_48": {
                "value": {
                    "value": "[[[0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 0.8, 0.8]], [[0.5, 0.5, 1.0, 1.0], [0.0, 0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "[[0.7, 0.6], [0.9, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_56": {
                "value": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_82": {
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GFile_94": {
                "name": {
                    "value": "inference_graph_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_directory, 'frozen_inference_graph.pb')",
                            "Call"
                        ]
                    ]
                }
            },
            "import_graph_def_97": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "encode_png_361": {
                "variable": {
                    "value": "encoded_string",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_array_np",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_104": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "list_variables_205": {
                "ckpt_dir_or_file": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "list_variables_258": {
                "ckpt_dir_or_file": {
                    "value": "output_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmp_dir, 'output')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_102": {
                "value": {
                    "value": "image_array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_105": {
                "feature": {
                    "value": "{'image/encoded': _bytes_feature(encoded_image), 'image/format': _bytes_feature('jpg'), 'image/source_id': _bytes_feature('image_id')}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/inference/detection_inference.py": {
        "tensorflow": {
            "string_input_producer_34": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecord_paths",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordReader_37": {
                "variable": {
                    "value": "tf_record_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_39": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{standard_fields.TfExampleFields.image_encoded: tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_image_46": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[standard_fields.TfExampleFields.image_encoded]",
                            "Subscript"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(encoded_image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image_tensor, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GraphDef_70": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_76": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "num_detections_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g.get_tensor_by_name('num_detections:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "num_detections_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_detections_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(g.get_tensor_by_name('num_detections:0'), 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(num_detections_tensor, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "detected_boxes_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g.get_tensor_by_name('detection_boxes:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "detected_scores_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g.get_tensor_by_name('detection_scores:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "detected_labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g.get_tensor_by_name('detection_classes:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_92": {
                "variable": {
                    "value": "detected_labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "detected_labels_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(g.get_tensor_by_name('detection_classes:0'), 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(detected_labels_tensor, tf.int64)",
                            "Call"
                        ],
                        [
                            "detected_labels_tensor[:num_detections_tensor]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_115": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_117": {
                "variable": {
                    "value": "(serialized_example, detected_boxes, detected_scores, detected_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_117": {
                "variable": {
                    "value": "(serialized_example, detected_boxes, detected_scores, detected_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "main": {
                    "value": "[serialized_example_tensor, detected_boxes_tensor, detected_scores_tensor, detected_labels_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_graph_def_73": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'image_tensor': image_tensor}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_43": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/inference/detection_inference_test.py": {
        "tensorflow": {
            "Example_46": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_56": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "in_image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "main_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_47": {
                "path": {
                    "value": "get_mock_tfrecord_path()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_temp_dir_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "num_detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[[[0, 0.8, 0.7, 1], [0.1, 0.2, 0.8, 0.9], [0.2, 0.3, 0.4, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "detection_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "[[0.1, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "detection_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_65": {
                "input": {
                    "value": "tf.constant([[1.0, 2.0, 3.0]]) * tf.reduce_sum(tf.cast(in_image_tensor, dtype=tf.float32))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "detection_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_46": {
                "feature": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'test_field': dataset_util.float_list_feature([1, 2, 3, 4]), standard_fields.TfExampleFields.image_encoded: dataset_util.bytes_feature(encoded_image)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "start_queue_runners_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "[[1.0, 2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.cast(in_image_tensor, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "in_image_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, shape=[1, None, None, 3], name='image_tensor')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/inference/infer_detections.py": {
        "tensorflow": {
            "DEFINE_string_41": {
                "name": {
                    "value": "input_tfrecord_paths",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "A comma separated list of paths to input TFRecords.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "output_tfrecord_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the output TFRecord.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "inference_graph",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the inference graph with embedded weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_57": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_68": {
                "msg": {
                    "value": "Reading input from %d files",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(input_tfrecord_paths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_71": {
                "msg": {
                    "value": "Reading graph and building model...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_76": {
                "msg": {
                    "value": "'Running inference and writing output to {}'.format(FLAGS.output_tfrecord_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "start_queue_runners_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_80": {
                "path": {
                    "value": "FLAGS.output_tfrecord_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_every_n_84": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "Processed %d images...",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "*args": {
                    "value": "counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itertools.count()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_92": {
                "msg": {
                    "value": "Finished processing records",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/matchers/argmax_matcher.py": {
        "tensorflow": {
            "cast_188": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(indicator, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_173": {
                "pred": {
                    "value": "tf.greater(tf.shape(similarity_matrix)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_match_when_rows_are_non_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_match_when_rows_are_empty",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_189": {
                "x": {
                    "value": "tf.multiply(x, 1 - indicator)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val * indicator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_136": {
                "variable": {
                    "value": "matched_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_137": {
                "variable": {
                    "value": "below_unmatched_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_139": {
                "variable": {
                    "value": "between_thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(matched_vals, self._unmatched_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(self._matched_threshold, matched_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "forced_matches_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(similarity_matrix, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_162": {
                "variable": {
                    "value": "row_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_163": {
                "variable": {
                    "value": "col_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_164": {
                "variable": {
                    "value": "forced_matches_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "row_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(similarity_matrix)[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "matches.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "setdiff1d_165": {
                "variable": {
                    "value": "(keep_matches_ids, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "col_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(similarity_matrix)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "forced_matches_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(similarity_matrix, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_166": {
                "variable": {
                    "value": "keep_matches_values",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 0)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -1)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -1)",
                            "Call"
                        ],
                        [
                            "tf.dynamic_stitch([forced_matches_ids, keep_matches_ids], [forced_matches_values, keep_matches_values])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "keep_matches_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dynamic_stitch_167": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[forced_matches_ids, keep_matches_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[forced_matches_values, keep_matches_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 0)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -1)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -1)",
                            "Call"
                        ],
                        [
                            "tf.dynamic_stitch([forced_matches_ids, keep_matches_ids], [forced_matches_values, keep_matches_values])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_174": {
                "x": {
                    "value": "tf.shape(similarity_matrix)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_189": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - indicator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_122": {
                "shape": {
                    "value": "[tf.shape(similarity_matrix)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_140": {
                "x": {
                    "value": "matched_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_141": {
                "x": {
                    "value": "self._matched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_159": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_174": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/matchers/argmax_matcher_test.py": {
        "tensorflow": {
            "constant_34": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_70": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_76": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_99": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_126": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_152": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_179": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [2, -1, 2, 0, 4], [3, 0, -1, 0, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 1, 3, 1], [-1, 0, -2, -2, -1], [3, 0, -1, 2, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_224": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([3, 4, 5, 1, 4, 3, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_225": {
                "variable": {
                    "value": "idxb",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "idxb_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_a > 3",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_226": {
                "variable": {
                    "value": "idxc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "idxc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_a < 3",
                            "Compare"
                        ]
                    ]
                }
            },
            "main_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_52": {
                "shape": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_228": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(input_a)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/matchers/bipartite_matcher.py": {
        "tensorflow": {
            "reshape_51": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(match_results, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(match_results, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(match_results, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(match_results, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/matchers/bipartite_matcher_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.5, 0.1, 0.8], [0.15, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.5, 0.1, 0.8], [0.15, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.5, 0.1, 0.8], [0.15, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.5, 0.1, 0.8], [0.15, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/faster_rcnn_meta_arch.py": {
        "tensorflow": {
            "constant_339": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1] + self._num_classes * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_537": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, image_shape[1], image_shape[2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_637": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_predictions[box_predictor.BOX_ENCODINGS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_639": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_683": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_687": {
                "variable": {
                    "value": "feature_map_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_features_to_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_extractor.extract_proposal_features(preprocessed_inputs, scope=self.first_stage_feature_extractor_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_803": {
                "variable": {
                    "value": "flattened_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[combined_shape[0] * combined_shape[1]] + combined_shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_902": {
                "variable": {
                    "value": "rpn_box_encodings_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_box_encodings_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(rpn_box_encodings_batch, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_905": {
                "variable": {
                    "value": "tiled_anchor_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(anchors, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[rpn_encodings_shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_909": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_912": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, image_shape[1], image_shape[2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_933": {
                "variable": {
                    "value": "proposal_boxes_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_937": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "normalized_proposal_boxes_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_list_ops.to_normalized_coordinates(box_list.BoxList(proposal_boxes_reshaped), image_shape[1], image_shape[2], check_range=False).get()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, proposal_boxes.shape[1].value, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_1106": {
                "variable": {
                    "value": "positive_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(cls_targets, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_1140": {
                "variable": {
                    "value": "cropped_regions",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "features_to_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "self._flatten_first_two_dimensions(proposal_boxes_normalized)",
                    "type": "Call",
                    "possible_values": []
                },
                "box_indices": {
                    "value": "get_box_inds(proposal_boxes_normalized)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "(self._initial_crop_size, self._initial_crop_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1188": {
                "variable": {
                    "value": "refined_box_encodings_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.BOX_ENCODINGS], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_num_proposals, self.num_classes, self._box_coder.code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1192": {
                "variable": {
                    "value": "class_predictions_with_background_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size, self.max_num_proposals, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_num_proposals, self.num_classes + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1201": {
                "variable": {
                    "value": "class_predictions_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(class_predictions_with_background_batch, [0, 0, 1], [-1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.max_num_proposals, self.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1205": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([0, 0, image_shape[1], image_shape[2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_1249": {
                "variable": {
                    "value": "tiled_anchor_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(anchor_boxes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_classes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_1598": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_1599": {
                "variable": {
                    "value": "tiled_num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(num_proposals, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, max_num_proposals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1601": {
                "variable": {
                    "value": "tiled_proposal_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(max_num_proposals), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_1669": {
                "variable": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_457": {
                "variable": {
                    "value": "resized_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._image_resizer_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "self._parallel_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_655": {
                "variable": {
                    "value": "mask_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_predictions[box_predictor.MASK_PREDICTIONS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_805": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "flattened_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([combined_shape[0] * combined_shape[1]] + combined_shape[2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_924": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_993": {
                "variable": {
                    "value": "sliced_static_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.Dimension(None), static_shape.dims[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_995": {
                "variable": {
                    "value": "single_image_proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "single_image_proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_proposal_boxes, [0, 0], [single_image_num_proposals, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[single_image_num_proposals, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1001": {
                "variable": {
                    "value": "single_image_proposal_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "single_image_proposal_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_proposal_scores, [0], [single_image_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[single_image_num_proposals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1105": {
                "x": {
                    "value": "tf.equal(tf.reduce_sum(cls_weights), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1135": {
                "variable": {
                    "value": "ones_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "proposals_shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1136": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(start=0, limit=proposals_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1211": {
                "variable": {
                    "value": "mask_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.MASK_PREDICTIONS], axis=1)",
                            "Call"
                        ],
                        [
                            "prediction_dict.get(box_predictor.MASK_PREDICTIONS)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(mask_predictions)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1212": {
                "variable": {
                    "value": "mask_predictions_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.MASK_PREDICTIONS], axis=1)",
                            "Call"
                        ],
                        [
                            "prediction_dict.get(box_predictor.MASK_PREDICTIONS)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(mask_predictions)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_num_proposals, self.num_classes, mask_height, mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1256": {
                "tensor": {
                    "value": "decoded_boxes.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([combined_shape[0], combined_shape[1], num_classes, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_1348": {
                "variable": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(batch_cls_targets, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1355": {
                "variable": {
                    "value": "batch_sampled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.map_fn(_minibatch_subsample_fn, [batch_cls_targets, batch_cls_weights], dtype=tf.bool, parallel_iterations=self._parallel_iterations, back_prop=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1363": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_sampled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.map_fn(_minibatch_subsample_fn, [batch_cls_targets, batch_cls_weights], dtype=tf.bool, parallel_iterations=self._parallel_iterations, back_prop=True))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1364": {
                "variable": {
                    "value": "batch_one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(batch_cls_targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_1366": {
                "variable": {
                    "value": "sampled_reg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_sampled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.map_fn(_minibatch_subsample_fn, [batch_cls_targets, batch_cls_weights], dtype=tf.bool, parallel_iterations=self._parallel_iterations, back_prop=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_reg_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_1374": {
                "variable": {
                    "value": "localization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(localization_losses, axis=1) / normalizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1376": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(objectness_losses, axis=1) / normalizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1455": {
                "variable": {
                    "value": "num_proposals_or_one",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.maximum(num_proposals, tf.ones_like(num_proposals)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1468": {
                "variable": {
                    "value": "flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * self.max_num_proposals, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_1471": {
                "variable": {
                    "value": "refined_box_encodings_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.BOX_ENCODINGS], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_1476": {
                "variable": {
                    "value": "one_hot_flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_cls_targets_with_background, [batch_size * self.max_num_proposals, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1478": {
                "variable": {
                    "value": "one_hot_flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "one_hot_flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(flat_cls_targets_with_background, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(one_hot_flat_cls_targets_with_background, flat_cls_targets_with_background.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "flat_cls_targets_with_background.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_1481": {
                "variable": {
                    "value": "refined_box_encodings_masked_by_class_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "refined_box_encodings_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(refined_box_encodings, [[0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.greater(one_hot_flat_cls_targets_with_background, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1484": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(class_predictions_with_background, [batch_size, self.max_num_proposals, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, self.max_num_proposals, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1487": {
                "variable": {
                    "value": "reshaped_refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "refined_box_encodings_masked_by_class_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(refined_box_encodings_with_background, tf.greater(one_hot_flat_cls_targets_with_background, 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_1498": {
                "variable": {
                    "value": "second_stage_loc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(second_stage_loc_losses, paddings_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1500": {
                "variable": {
                    "value": "second_stage_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(second_stage_cls_losses, paddings_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_1603": {
                "x": {
                    "value": "tiled_num_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(num_proposals, 1), [1, max_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tiled_proposal_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(max_num_proposals), 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1641": {
                "variable": {
                    "value": "single_image_loc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "single_image_loc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_loc_loss, [0], [single_image_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[single_image_num_proposals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1643": {
                "variable": {
                    "value": "single_image_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "single_image_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_cls_loss, [0], [single_image_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[single_image_num_proposals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[preprocessed_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[proposal_feature_maps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_456": {
                "name": {
                    "value": "Preprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_537": {
                "values": {
                    "value": "[0, 0, image_shape[1], image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_738": {
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_779": {
                "fn": {
                    "value": "partial(tf.gather, indices=keep_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "predictions_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "self._parallel_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_838": {
                "name": {
                    "value": "FirstStagePostprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_851": {
                "name": {
                    "value": "SecondStagePostprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_906": {
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors_boxlist.get()",
                            "Call"
                        ],
                        [
                            "self._first_stage_anchor_generator.generate([(feature_map_shape[1], feature_map_shape[2])])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_910": {
                "logits": {
                    "value": "rpn_objectness_predictions_with_background_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_912": {
                "values": {
                    "value": "[0, 0, image_shape[1], image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_915": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_916": {
                "input": {
                    "value": "rpn_objectness_softmax_without_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(rpn_objectness_predictions_with_background_batch)[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_987": {
                "value": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_988": {
                "value": {
                    "value": "proposal_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_989": {
                "value": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_1021": {
                "values": {
                    "value": "single_image_proposal_box_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1022": {
                "values": {
                    "value": "single_image_proposal_score_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1023": {
                "values": {
                    "value": "single_image_num_proposals_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "to_float_1056": {
                "x": {
                    "value": "tf.pad(one_hot_encoding, [[0, 0], [1, 0]], mode='CONSTANT')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_1105": {
                "x": {
                    "value": "tf.reduce_sum(cls_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1106": {
                "input": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1108": {
                "x": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_weights + tf.to_float(tf.equal(tf.reduce_sum(cls_weights), 0))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1134": {
                "variable": {
                    "value": "proposals_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1138": {
                "tensor": {
                    "value": "ones_mat * multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1202": {
                "input_": {
                    "value": "class_predictions_with_background_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(class_predictions_with_background, [-1, self.max_num_proposals, self.num_classes + 1])",
                            "Call"
                        ],
                        [
                            "self._second_stage_score_conversion_fn(class_predictions_with_background_batch)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1205": {
                "values": {
                    "value": "[0, 0, image_shape[1], image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1226": {
                "x": {
                    "value": "num_detections",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_1250": {
                "input": {
                    "value": "anchor_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1252": {
                "tensor": {
                    "value": "tiled_anchor_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(anchors, 0), [rpn_encodings_shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(anchor_boxes, 2), [1, 1, num_classes, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1254": {
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[box_predictor.BOX_ENCODINGS]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._box_coder.code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1257": {
                "values": {
                    "value": "[combined_shape[0], combined_shape[1], num_classes, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1284": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1343": {
                "name": {
                    "value": "RPNLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1447": {
                "name": {
                    "value": "BoxClassifierLoss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_1538": {
                "variable": {
                    "value": "prediction_masks_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prediction_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_1540": {
                "variable": {
                    "value": "prediction_masks_masked_by_class_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prediction_masks_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(prediction_masks, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.greater(one_hot_flat_cls_targets_with_background, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1545": {
                "variable": {
                    "value": "reshaped_prediction_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prediction_masks_masked_by_class_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(prediction_masks_with_background, tf.greater(one_hot_flat_cls_targets_with_background, 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, mask_height * mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1549": {
                "variable": {
                    "value": "batch_mask_targets_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mask_targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1550": {
                "variable": {
                    "value": "flat_gt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, batch_mask_targets_shape[2], batch_mask_targets_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_and_resize_1559": {
                "variable": {
                    "value": "flat_cropped_gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.expand_dims(flat_gt_masks, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "flat_normalized_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_list_ops.to_normalized_coordinates(box_list.BoxList(tf.reshape(proposal_boxes, [-1, 4])), image_shape[1], image_shape[2]).get()",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "tf.range(flat_normalized_proposals.shape[0].value)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[mask_height, mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1565": {
                "variable": {
                    "value": "batch_cropped_gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_cropped_gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(tf.expand_dims(flat_gt_masks, -1), flat_normalized_proposals, tf.range(flat_normalized_proposals.shape[0].value), [mask_height, mask_width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, mask_height * mask_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_1577": {
                "variable": {
                    "value": "second_stage_mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(second_stage_mask_losses, paddings_indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1600": {
                "input": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1602": {
                "input": {
                    "value": "tf.range(max_num_proposals)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_1635": {
                "value": {
                    "value": "second_stage_loc_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._second_stage_localization_loss(reshaped_refined_box_encodings, batch_reg_targets, weights=batch_reg_weights) / normalizer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unstack_1636": {
                "value": {
                    "value": "second_stage_cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._second_stage_classification_loss(class_predictions_with_background, batch_cls_targets_with_background, weights=batch_cls_weights) / normalizer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unstack_1637": {
                "value": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_1014": {
                "x": {
                    "value": "sampled_boxlist.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._second_stage_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_1057": {
                "tensor": {
                    "value": "one_hot_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_1105": {
                "input_tensor": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_weights + tf.to_float(tf.equal(tf.reduce_sum(cls_weights), 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_fn_1355": {
                "fn": {
                    "value": "_minibatch_subsample_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "[batch_cls_targets, batch_cls_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "self._parallel_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_int32_1365": {
                "x": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(batch_cls_targets, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1380": {
                "name": {
                    "value": "localization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1383": {
                "name": {
                    "value": "objectness_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1455": {
                "input": {
                    "value": "tf.maximum(num_proposals, tf.ones_like(num_proposals))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1457": {
                "input": {
                    "value": "num_proposals_or_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.expand_dims(tf.maximum(num_proposals, tf.ones_like(num_proposals)), 1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.max_num_proposals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_1483": {
                "x": {
                    "value": "one_hot_flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(flat_cls_targets_with_background, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(one_hot_flat_cls_targets_with_background, flat_cls_targets_with_background.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_1499": {
                "tensor": {
                    "value": "second_stage_loc_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._second_stage_localization_loss(reshaped_refined_box_encodings, batch_reg_targets, weights=batch_reg_weights) / normalizer",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "paddings_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._padded_batched_proposals_indicator(num_proposals, self.max_num_proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1501": {
                "tensor": {
                    "value": "second_stage_cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._second_stage_classification_loss(class_predictions_with_background, batch_cls_targets_with_background, weights=batch_cls_weights) / normalizer",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "paddings_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._padded_batched_proposals_indicator(num_proposals, self.max_num_proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1509": {
                "name": {
                    "value": "localization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_1513": {
                "name": {
                    "value": "classification_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_1639": {
                "input_": {
                    "value": "proposal_boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[single_image_num_proposals, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_849": {
                "x": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dimension_993": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "expand_dims_1067": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groundtruth_masks_list",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1071": {
                "input": {
                    "value": "resized_4d_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(tf.expand_dims(mask, axis=3), image_shape[1:3], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1353": {
                "x": {
                    "value": "cls_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_weights + tf.to_float(tf.equal(tf.reduce_sum(cls_weights), 0))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1354": {
                "x": {
                    "value": "cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1375": {
                "input_tensor": {
                    "value": "localization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._first_stage_localization_loss(rpn_box_encodings, batch_reg_targets, weights=sampled_reg_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1377": {
                "input_tensor": {
                    "value": "objectness_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._first_stage_objectness_loss(rpn_objectness_predictions_with_background, batch_one_hot_targets, weights=batch_sampled_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_1452": {
                "value": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_1456": {
                "x": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(num_proposals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_1542": {
                "x": {
                    "value": "one_hot_flat_cls_targets_with_background",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(flat_cls_targets_with_background, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(one_hot_flat_cls_targets_with_background, flat_cls_targets_with_background.get_shape()[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1560": {
                "input": {
                    "value": "flat_gt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_mask_targets, [-1, batch_mask_targets_shape[2], batch_mask_targets_shape[3]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_1562": {},
            "boolean_mask_1578": {
                "tensor": {
                    "value": "second_stage_mask_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._second_stage_mask_loss(reshaped_prediction_masks, batch_cropped_gt_mask, weights=batch_mask_target_weights) / (mask_height * mask_width * tf.maximum(tf.reduce_sum(batch_mask_target_weights, axis=1, keep_dims=True), tf.ones((batch_size, 1))))",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "paddings_indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._padded_batched_proposals_indicator(num_proposals, self.max_num_proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1581": {
                "name": {
                    "value": "mask_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1646": {
                "input": {
                    "value": "single_image_loc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_loc_loss, [0], [single_image_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1647": {
                "input": {
                    "value": "single_image_cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(single_image_cls_loss, [0], [single_image_num_proposals])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_1456": {
                "input": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_1530": {
                "shape": {
                    "value": "image_shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_1574": {
                "x": {
                    "value": "tf.reduce_sum(batch_mask_target_weights, axis=1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones((batch_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1574": {
                "input_tensor": {
                    "value": "batch_mask_target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_1576": {
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1556": {
                "tensor": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._batch_decode_boxes(rpn_box_encodings_batch, tiled_anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(proposal_boxes, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(proposal_boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(normalized_proposal_boxes_reshaped, [-1, proposal_boxes.shape[1].value, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/faster_rcnn_meta_arch_test.py": {
        "tensorflow": {
            "constant_33": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, 1, 2, 3], [0, 0, 1, 1], [0.5, 0.5, 0.6, 0.6], 4 * [0], 4 * [0], 4 * [0], 4 * [0], 4 * [0]], [[2, 3, 6, 8], [1, 2, 5, 3], 4 * [0], 4 * [0], 4 * [0], 4 * [0], 4 * [0], 4 * [0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_num_padded_proposals, model.num_classes, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_44": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_num_padded_proposals, model.num_classes + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 36, 48, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_50": {
                "shape": {
                    "value": "[total_num_padded_proposals, model.num_classes, mask_height, mask_width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/faster_rcnn_meta_arch_test_lib.py": {
        "tensorflow": {
            "Graph_240": {
                "variable": {
                    "value": "test_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_295": {
                "variable": {
                    "value": "test_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_403": {
                "variable": {
                    "value": "test_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_472": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [-10, 12]], [[10, -10], [-10, 13], [-10, 12], [10, -11]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_491": {
                "variable": {
                    "value": "rpn_features_to_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 8, 8, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_492": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_525": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_530": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_535": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [-10, 12], [-10, 11], [-10, 10]], [[-10, 13], [-10, 12], [-10, 11], [-10, 10]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_544": {
                "variable": {
                    "value": "rpn_features_to_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 8, 8, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_545": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_665": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_671": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_677": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [-10, 12]], [[10, -10], [-10, 13], [-10, 12], [10, -11]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_686": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_716": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_721": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_727": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [-10, 12]], [[10, -10], [-10, 13], [-10, 12], [10, -11]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_736": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_738": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[6, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_739": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2 * [[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32], [0, 0, 16, 16], [0, 16, 16, 32]]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_746": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, BOX_CODE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_750": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-10, 10, -10], [10, -10, -10], [10, -10, -10], [-10, -10, 10], [-10, 10, -10], [10, -10, -10], [10, -10, -10], [-10, 10, -10], [-10, 10, -10], [10, -10, -10], [10, -10, -10], [-10, 10, -10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_813": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_818": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_824": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [10, -12]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_829": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_833": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_834": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_842": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, BOX_CODE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_846": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-10, 10, -10], [10, -10, -10], [10, -10, -10], [0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_901": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_906": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_912": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [10, -12]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_917": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_921": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_922": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_933": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 0, 0], [1, 1, -1, -1]], [[1, 1, -1, -1], [1, 1, 1, 1]], [[1, 1, -1, -1], [1, 1, 1, 1]], [[1, 1, -1, -1], [1, 1, 1, 1]], [[1, 1, -1, -1], [1, 1, 1, 1]], [[1, 1, -1, -1], [1, 1, 1, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_940": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-100, 100, 100], [100, -100, -100], [100, -100, -100], [0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_995": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1000": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1006": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [10, -10], [10, -11], [10, -12]], [[-10, 13], [10, -10], [10, -11], [10, -12]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1015": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1019": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1020": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 16, 16], [0, 16, 16, 32], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1034": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, BOX_CODE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1038": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-10, 10, -10], [10, -10, -10], [10, -10, -10], [0, 0, 0], [0, 0, 0], [0, 0, 0], [-10, -10, 10], [10, -10, -10], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1097": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [16, 16, 32, 32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1102": {
                "variable": {
                    "value": "rpn_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, anchors.get_shape().as_list()[0], BOX_CODE_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1108": {
                "variable": {
                    "value": "rpn_objectness_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-10, 13], [-10, 12], [10, -11], [10, -12]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1113": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1117": {
                "variable": {
                    "value": "num_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1118": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0, 16, 16], [0, 16, 16, 32], [16, 0, 32, 16], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1126": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, BOX_CODE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1130": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-10, 10, -10], [-10, -10, 10], [10, -10, -10], [0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_1178": {
                "variable": {
                    "value": "test_graph_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_1194": {
                "variable": {
                    "value": "test_graph_detection",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_1217": {
                "variable": {
                    "value": "test_graph_detection1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_1235": {
                "variable": {
                    "value": "test_graph_detection2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_1257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_46": {
                "input": {
                    "value": "resized_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_316": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_384": {
                "variable": {
                    "value": "test_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_415": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, image_size, image_size, 3)",
                            "Tuple"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "np.array((2, 36, 48, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "image_shapes",
                            "variable"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_446": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_593": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_656": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, image_size, image_size, 3)",
                            "Tuple"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "np.array((2, 36, 48, 3), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "image_shapes",
                            "variable"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([batch_size, 32, 32, 3], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_1180": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 20, 20, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1185": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_1186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_1200": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(inputs_shape, minval=0, maxval=255, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_1207": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.restore_map(from_detection_checkpoint=False)",
                            "Call"
                        ],
                        [
                            "model2.restore_map(from_detection_checkpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1222": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(inputs_shape, minval=0, maxval=255, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1227": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_1228": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_1241": {
                "variable": {
                    "value": "inputs2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(inputs_shape2, minval=0, maxval=255, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_1248": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.restore_map(from_detection_checkpoint=False)",
                            "Call"
                        ],
                        [
                            "model2.restore_map(from_detection_checkpoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "mock_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "mock_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_120": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[1, 20, 20, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_389": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_initializer_391": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_547": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5], [0.5, 0.5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_548": {
                "value": {
                    "value": "[[0, 0.5, 0.5, 1], [0.5, 0, 1, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_549": {
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_550": {
                "value": {
                    "value": "[[1, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_613": {
                "variable": {
                    "value": "num_proposals_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_proposals_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_615": {
                "variable": {
                    "value": "refined_box_encodings_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "refined_box_encoding_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_617": {
                "variable": {
                    "value": "class_predictions_with_background_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "class_predictions_with_background_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_619": {
                "variable": {
                    "value": "proposal_boxes_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "proposal_boxes_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_621": {
                "variable": {
                    "value": "image_shape_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_689": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5], [0.5, 0.5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_690": {
                "value": {
                    "value": "[[0, 0.5, 0.5, 1], [0.5, 0, 1, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_691": {
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_692": {
                "value": {
                    "value": "[[1, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_764": {
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, 14, 14)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_771": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5], [0.5, 0.5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_772": {
                "value": {
                    "value": "[[0, 0.5, 0.5, 1], [0.5, 0, 1, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_773": {
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_774": {
                "value": {
                    "value": "[[1, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_780": {
                "value": {
                    "value": "np.ones((2, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_782": {
                "value": {
                    "value": "np.ones((2, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_854": {
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, 14, 14)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_861": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_862": {
                "value": {
                    "value": "[[1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_868": {
                "value": {
                    "value": "np.ones((1, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_948": {
                "shape": {
                    "value": "(batch_size * model.max_num_proposals, model.num_classes, 14, 14)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_955": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_957": {
                "value": {
                    "value": "[[1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_963": {
                "value": {
                    "value": "np.ones((1, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1060": {
                "value": {
                    "value": "[[0.05, 0.05, 0.45, 0.45]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1061": {
                "value": {
                    "value": "[[0.0, 0.0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1062": {
                "value": {
                    "value": "[[1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1063": {
                "value": {
                    "value": "[[0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1150": {
                "value": {
                    "value": "[[0.05, 0.05, 0.45, 0.45], [0.02, 0.52, 0.48, 0.98]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1152": {
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_417": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5], [0.5, 0.5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_418": {
                "value": {
                    "value": "[[0, 0.5, 0.5, 1], [0.5, 0, 1, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_420": {
                "value": {
                    "value": "[[1, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_421": {
                "value": {
                    "value": "[[1, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1181": {
                "name_or_scope": {
                    "value": "mock_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_1210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_1251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/rfcn_meta_arch.py": {
        "tensorflow": {
            "squeeze_264": {
                "variable": {
                    "value": "refined_box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_predictions[box_predictor.BOX_ENCODINGS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_266": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_predictions[box_predictor.CLASS_PREDICTIONS_WITH_BACKGROUND]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/rfcn_meta_arch_test.py": {
        "tensorflow": {
            "main_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/meta_architectures/ssd_meta_arch.py": {
        "tensorflow": {
            "constant_179": {
                "variable": {
                    "value": "unmatched_cls_target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1] + self.num_classes * [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_266": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_equal_333": {
                "variable": {
                    "value": "anchors_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.anchors.num_boxes()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([tf.shape(box_encodings)[1] for box_encodings in box_encodings_list])",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "['Mismatch: number of anchors vs number of predictions', num_anchors, num_predictions]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_506": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(class_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_507": {
                "variable": {
                    "value": "positive_anchor_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cls_losses, positive_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_511": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(class_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_512": {
                "variable": {
                    "value": "negative_anchor_cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cls_losses, negative_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_579": {
                "variable": {
                    "value": "num_boxes_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(x)[0] for x in groundtruth_boxes_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_581": {
                "variable": {
                    "value": "pos_anchors_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[match.num_matched_columns() for match in match_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_583": {
                "variable": {
                    "value": "neg_anchors_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[match.num_unmatched_columns() for match in match_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_585": {
                "variable": {
                    "value": "ignored_anchors_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[match.num_ignored_columns() for match in match_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "slice_623": {
                "variable": {
                    "value": "class_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "prediction_dict['class_predictions_with_background']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_628": {
                "variable": {
                    "value": "decoded_box_tensors_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "decoded_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._box_coder.decode(tf.reshape(box_encodings, [-1, self._box_coder.code_size]), tiled_anchors_boxlist)",
                            "Call"
                        ],
                        [
                            "tf.reshape(decoded_boxes.get(), tf.stack([combined_shape[0], combined_shape[1], 4]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_629": {
                "variable": {
                    "value": "class_prediction_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "class_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_dict['class_predictions_with_background']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(prediction_dict['class_predictions_with_background'], [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_659": {
                "variable": {
                    "value": "tiled_anchor_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.anchors.get(), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_674": {
                "variable": {
                    "value": "decoded_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoded_boxes.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([combined_shape[0], combined_shape[1], 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_230": {
                "variable": {
                    "value": "resized_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._image_resizer_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_325": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[bpredictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(box_encodings, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(box_encodings_list, 1)",
                            "Call"
                        ],
                        [
                            "prediction_dict['box_encodings']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_338": {
                "variable": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "box_encodings_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_339": {
                "variable": {
                    "value": "class_predictions_with_background",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cls_predictions_with_background_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_399": {
                "variable": {
                    "value": "detection_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "detection_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(detection_boxes, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_401": {
                "variable": {
                    "value": "class_predictions_without_background",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "class_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_dict['class_predictions_with_background']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(prediction_dict['class_predictions_with_background'], [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_406": {
                "variable": {
                    "value": "clip_window",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_460": {
                "variable": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[match.num_matched_columns() for match in match_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "constant_488": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_587": {
                "name": {
                    "value": "Input/AvgNumGroundtruthBoxesPerImage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.to_float(num_boxes_per_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_589": {
                "name": {
                    "value": "Input/AvgNumPositiveAnchorsPerImage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.to_float(pos_anchors_per_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_591": {
                "name": {
                    "value": "Input/AvgNumNegativeAnchorsPerImage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.to_float(neg_anchors_per_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_593": {
                "name": {
                    "value": "Input/AvgNumIgnoredAnchorsPerImage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.to_float(ignored_anchors_per_image))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_671": {
                "variable": {
                    "value": "decoded_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoded_keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "decoded_boxes.get_field(fields.BoxListFields.keypoints)",
                            "Call"
                        ],
                        [
                            "tf.reshape(decoded_keypoints, tf.stack([combined_shape[0], combined_shape[1], num_keypoints, 2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([combined_shape[0], combined_shape[1], num_keypoints, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "Preprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "self._extract_features_scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[preprocessed_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_337": {
                "control_inputs": {
                    "value": "[anchors_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_395": {
                "name": {
                    "value": "Postprocessor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_448": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_484": {
                "variable": {
                    "value": "localization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._localization_loss(prediction_dict['box_encodings'], batch_reg_targets, ignore_nan_targets=True, weights=batch_reg_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_485": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_loss(prediction_dict['class_predictions_with_background'], batch_cls_targets, weights=batch_cls_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_490": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.reduce_sum(num_matches))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_506": {
                "x": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(batch_cls_targets, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_508": {
                "params": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_loss(prediction_dict['class_predictions_with_background'], batch_cls_targets, weights=batch_cls_weights)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.greater(class_ids, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_511": {
                "x": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(batch_cls_targets, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_513": {
                "params": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_loss(prediction_dict['class_predictions_with_background'], batch_cls_targets, weights=batch_cls_weights)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(class_ids, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_552": {
                "tensor": {
                    "value": "one_hot_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_588": {
                "input_tensor": {
                    "value": "tf.to_float(num_boxes_per_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_590": {
                "input_tensor": {
                    "value": "tf.to_float(pos_anchors_per_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_592": {
                "input_tensor": {
                    "value": "tf.to_float(neg_anchors_per_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_594": {
                "input_tensor": {
                    "value": "tf.to_float(ignored_anchors_per_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_660": {
                "input": {
                    "value": "self.anchors.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_662": {
                "tensor": {
                    "value": "tiled_anchor_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(self.anchors.get(), 0), [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_664": {
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[bpredictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(box_encodings, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(box_encodings_list, 1)",
                            "Call"
                        ],
                        [
                            "prediction_dict['box_encodings']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._box_coder.code_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_674": {
                "values": {
                    "value": "[combined_shape[0], combined_shape[1], 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_420": {
                "x": {
                    "value": "num_detections",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_479": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_480": {
                "variable": {
                    "value": "flattened_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(batch_cls_targets, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_481": {
                "variable": {
                    "value": "flattened_classification_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_loss(prediction_dict['class_predictions_with_background'], batch_cls_targets, weights=batch_cls_weights)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_492": {
                "name": {
                    "value": "localization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_495": {
                "name": {
                    "value": "classification_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_588": {
                "x": {
                    "value": "num_boxes_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.shape(x)[0] for x in groundtruth_boxes_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_590": {
                "x": {
                    "value": "pos_anchors_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([match.num_matched_columns() for match in match_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_592": {
                "x": {
                    "value": "neg_anchors_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([match.num_unmatched_columns() for match in match_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_594": {
                "x": {
                    "value": "ignored_anchors_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([match.num_ignored_columns() for match in match_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_673": {
                "values": {
                    "value": "[combined_shape[0], combined_shape[1], num_keypoints, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_331": {
                "input": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_predictions[bpredictor.BOX_ENCODINGS]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(box_encodings, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(box_encodings_list, 1)",
                            "Call"
                        ],
                        [
                            "prediction_dict['box_encodings']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_490": {
                "x": {
                    "value": "tf.reduce_sum(num_matches)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_580": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_490": {
                "input_tensor": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([match.num_matched_columns() for match in match_list])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/meta_architectures/ssd_meta_arch_test.py": {
        "tensorflow": {
            "global_variables_initializer_238": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_249": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_250": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "test_graph_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_280": {
                "variable": {
                    "value": "test_graph_detection",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_44": {
                "input": {
                    "value": "resized_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "Graph_145": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_195": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_257": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.restore_map(from_detection_checkpoint=True)",
                            "Call"
                        ],
                        [
                            "self._model.restore_map(from_detection_checkpoint=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_266": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 20, 20, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_271": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_272": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_283": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(inputs_shape, minval=0, maxval=255, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_290": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.restore_map(from_detection_checkpoint=True)",
                            "Call"
                        ],
                        [
                            "self._model.restore_map(from_detection_checkpoint=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "mock_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5], [0, 0.5, 0.5, 1], [0.5, 0, 1, 0.5], [0.5, 0.5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_92": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[1, 20, 20, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "preprocessed_input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shapes",
                            "variable"
                        ],
                        [
                            "input_shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_initializer_156": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "preprocessed_input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shapes",
                            "variable"
                        ],
                        [
                            "input_shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_initializer_205": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_223": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_224": {
                "value": {
                    "value": "[[0, 0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_225": {
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "mock_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/metrics/offline_eval_map_corloc.py": {
        "tensorflow": {
            "set_verbosity_46": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_144": {
                "msg": {
                    "value": "Writing metrics.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_173": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_109": {
                "variable": {
                    "value": "record_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "input_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_generate_filenames(input_paths)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_107": {
                "msg": {
                    "value": "'Processing file: {0}'.format(input_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_117": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_every_n_113": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "msg": {
                    "value": "Processed %d images...",
                    "type": "str",
                    "possible_values": []
                },
                "n": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "*args": {
                    "value": "processed_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "processed_images + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_130": {
                "msg": {
                    "value": "'Skipped images: {0}'.format(skipped_images)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/metrics/offline_eval_map_corloc_test.py": {
        "tensorflow": {
            "main_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/metrics/tf_example_parser_test.py": {
        "tensorflow": {
            "Example_74": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_85": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_113": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_123": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_137": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_151": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_172": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "main_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_28": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_31": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_28": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_31": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_34": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_74": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_85": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_113": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_123": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_137": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_151": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_172": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{fields.TfExampleFields.source_id: self._BytesFeature(source_id), fields.TfExampleFields.object_bbox_ymin: self._FloatFeature(object_bb[:, 0].tolist()), fields.TfExampleFields.object_bbox_xmin: self._FloatFeature(object_bb[:, 1].tolist()), fields.TfExampleFields.object_bbox_ymax: self._FloatFeature(object_bb[:, 2].tolist()), fields.TfExampleFields.object_bbox_xmax: self._FloatFeature(object_bb[:, 3].tolist()), fields.TfExampleFields.detection_bbox_ymin: self._FloatFeature(detection_bb[:, 0].tolist()), fields.TfExampleFields.detection_bbox_xmin: self._FloatFeature(detection_bb[:, 1].tolist()), fields.TfExampleFields.detection_bbox_ymax: self._FloatFeature(detection_bb[:, 2].tolist()), fields.TfExampleFields.detection_bbox_xmax: self._FloatFeature(detection_bb[:, 3].tolist()), fields.TfExampleFields.detection_class_label: self._Int64Feature(detection_class_label), fields.TfExampleFields.detection_score: self._FloatFeature(detection_score)}",
                            "Dict"
                        ],
                        [
                            "{'string': self._BytesFeature(string_val)}",
                            "Dict"
                        ],
                        [
                            "{'floats': self._FloatFeature(float_array_val)}",
                            "Dict"
                        ],
                        [
                            "{'ints': self._Int64Feature(int_val)}",
                            "Dict"
                        ],
                        [
                            "{'ymin': self._FloatFeature(bounding_boxes[:, 0]), 'xmin': self._FloatFeature(bounding_boxes[:, 1]), 'ymax': self._FloatFeature(bounding_boxes[:, 2]), 'xmax': self._FloatFeature(bounding_boxes[:, 3])}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/models/embedded_ssd_mobilenet_v1_feature_extractor.py": {
        "tensorflow": {
            "Assert_93": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.equal(tf.shape(preprocessed_inputs)[1], 256), tf.equal(tf.shape(preprocessed_inputs)[2], 256))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must be 256 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_94": {
                "x": {
                    "value": "tf.equal(tf.shape(preprocessed_inputs)[1], 256)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(tf.shape(preprocessed_inputs)[2], 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_107": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_95": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_96": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/embedded_ssd_mobilenet_v1_feature_extractor_test.py": {
        "tensorflow": {
            "main_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_inception_resnet_v2_feature_extractor.py": {
        "tensorflow": {
            "global_variables_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_inception_resnet_v2_feature_extractor_test.py": {
        "tensorflow": {
            "shape_40": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_42": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_55": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_57": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_70": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_72": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_99": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_classifier_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_box_classifier_features(proposal_feature_maps, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_101": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_inception_v2_feature_extractor.py": {
        "tensorflow": {
            "Assert_119": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33), tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must at least be 33 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_120": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_124": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_156": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_120": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_121": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_219": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_248": {
                "variable": {
                    "value": "proposal_classifier_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Mixed_5c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_inception_v2_feature_extractor_test.py": {
        "tensorflow": {
            "shape_41": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_43": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_56": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_58": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_71": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_73": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_89": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_91": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_116": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_classifier_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_box_classifier_features(proposal_feature_maps, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_118": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_nas_feature_extractor.py": {
        "tensorflow": {
            "relu_107": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "_build_nasnet_base(hidden_previous, hidden, normal_cell=normal_cell, reduction_cell=reduction_cell, hparams=hparams, true_cell_num=true_cell_num, start_cell_num=start_cell_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_191": {
                "variable": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[end_points['Cell_10'], end_points['Cell_11']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "(hidden_previous, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "proposal_feature_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_nas_feature_extractor_test.py": {
        "tensorflow": {
            "shape_40": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_42": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_55": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_57": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_70": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_72": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_99": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_classifier_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_box_classifier_features(proposal_feature_maps, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_101": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_resnet_v1_feature_extractor.py": {
        "tensorflow": {
            "Assert_106": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33), tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must at least be 33 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_107": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_112": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "self._architecture",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_108": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_109": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "self._architecture",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_108": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/faster_rcnn_resnet_v1_feature_extractor_test.py": {
        "tensorflow": {
            "shape_67": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_69": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_82": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_84": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_100": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_102": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_127": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_classifier_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_box_classifier_features(proposal_feature_maps, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_129": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_52": {
                "variable": {
                    "value": "features_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ],
                        [
                            "feature_extractor.extract_proposal_features(preprocessed_inputs, scope='TestScope')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_54": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/feature_map_generators.py": {
        "tensorflow": {}
    },
    "object_detection/models/feature_map_generators_test.py": {
        "tensorflow": {
            "global_variables_initializer_67": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_97": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_128": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_feature_extractor_test.py": {
        "tensorflow": {
            "global_variables_initializer_40": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Graph_86": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_inception_v2_feature_extractor.py": {
        "tensorflow": {
            "Assert_84": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33), tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must at least be 33 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_85": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_94": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_85": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_86": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_inception_v2_feature_extractor_test.py": {
        "tensorflow": {
            "main_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_inception_v3_feature_extractor.py": {
        "tensorflow": {
            "Assert_84": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33), tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must at least be 33 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_85": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_94": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_85": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_86": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_inception_v3_feature_extractor_test.py": {
        "tensorflow": {
            "main_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_mobilenet_v1_feature_extractor.py": {
        "tensorflow": {
            "Assert_85": {
                "variable": {
                    "value": "shape_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33), tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must at least be 33 in both height and width.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_86": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[1], 33)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(preprocessed_inputs)[2], 33)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_96": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_86": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_87": {
                "x": {
                    "value": "tf.shape(preprocessed_inputs)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_87": {
                "input": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/models/ssd_mobilenet_v1_feature_extractor_test.py": {
        "tensorflow": {
            "placeholder_129": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, image_height, image_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/train.py": {
        "tensorflow": {
            "set_verbosity_54": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Server_145": {
                "variable": {
                    "value": "server",
                    "type": "variable",
                    "possible_values": []
                },
                "server_or_cluster_def": {
                    "value": "tf.train.ClusterSpec(cluster)",
                    "type": "Call",
                    "possible_values": []
                },
                "protocol": {
                    "value": "grpc",
                    "type": "str",
                    "possible_values": []
                },
                "job_name": {
                    "value": "task_info.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "task_index": {
                    "value": "task_info.index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MakeDirs_88": {
                "dirname": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ClusterSpec_122": {
                "cluster": {
                    "value": "cluster_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.get('cluster', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Copy_93": {
                "oldpath": {
                    "value": "FLAGS.pipeline_config_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "newpath": {
                    "value": "os.path.join(FLAGS.train_dir, 'pipeline.config')",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ClusterSpec_145": {
                "cluster": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ClusterSpec(cluster_data) if cluster_data else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Copy_105": {
                "oldpath": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "newpath": {
                    "value": "os.path.join(FLAGS.train_dir, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/trainer.py": {
        "tensorflow": {
            "expand_dims_61": {
                "variable": {
                    "value": "tensor_dict[fields.InputDataFields.image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_dict[fields.InputDataFields.image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_65": {
                "variable": {
                    "value": "float_images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "[detection_model.preprocess(image) for image in images]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(images, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_155": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.image]",
                            "Subscript"
                        ],
                        [
                            "[detection_model.preprocess(image) for image in images]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "classes_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_data[fields.InputDataFields.groundtruth_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_233": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clones[0].scope",
                            "Attribute"
                        ]
                    ]
                }
            },
            "merge_308": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_311": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_316": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "keep_checkpoint_every_n_hours",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config.keep_checkpoint_every_n_hours",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_loss_169": {
                "loss": {
                    "value": "loss_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses_dict.values()",
                            "Call"
                        ],
                        [
                            "tf.losses.get_losses()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SyncReplicasOptimizer_241": {
                "variable": {
                    "value": "training_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "training_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_builder.build(train_config.optimizer, global_summaries)",
                            "Call"
                        ],
                        [
                            "tf.SyncReplicasOptimizer(training_optimizer, replicas_to_aggregate=train_config.replicas_to_aggregate, total_num_replicas=train_config.worker_replicas)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "train_config.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "train_config.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_255": {
                "variable": {
                    "value": "init_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "available_var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variables_helper.get_variables_available_in_checkpoint(var_map, train_config.fine_tune_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_numerics_263": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.check_numerics(total_loss, 'LossTensor is inf or nan.')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "LossTensor is inf or nan.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_289": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_losses_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_209": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_212": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_222": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_235": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_260": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_291": {
                "variable": {
                    "value": "train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.check_numerics(total_loss, 'LossTensor is inf or nan.')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_299": {
                "name": {
                    "value": "TotalLoss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.losses.get_total_loss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_303": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clones[0].scope",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_290": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_295": {
                "name": {
                    "value": "model_var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "model_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_297": {
                "name": {
                    "value": "loss_tensor.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses_dict.values()",
                            "Call"
                        ],
                        [
                            "tf.losses.get_losses()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_total_loss_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_280": {
                "name": {
                    "value": "clip_grads",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/trainer_test.py": {
        "tensorflow": {
            "constant_35": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image_000000",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_81": {
                "variable": {
                    "value": "flattened_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "preprocessed_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "batch_reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.groundtruth_lists(fields.BoxListFields.boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "batch_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.groundtruth_lists(fields.BoxListFields.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_127": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.groundtruth_lists(fields.BoxListFields.boxes)), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "class_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(flattened_inputs, self._num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "box_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(flattened_inputs, 4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "location_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._localization_loss(prediction_dict['box_encodings'], batch_reg_targets, weights=weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "cls_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification_loss(prediction_dict['class_predictions_with_background'], batch_cls_targets, weights=weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/category_util.py": {
        "tensorflow": {}
    },
    "object_detection/utils/category_util_test.py": {
        "tensorflow": {
            "main_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/config_util.py": {
        "tensorflow": {
            "GFile_41": {
                "name": {
                    "value": "pipeline_config_path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_99": {
                "name": {
                    "value": "model_config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_105": {
                "name": {
                    "value": "train_config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_111": {
                "name": {
                    "value": "train_input_config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_117": {
                "name": {
                    "value": "eval_config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_123": {
                "name": {
                    "value": "eval_input_config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_201": {
                "msg": {
                    "value": "Overwriting learning rate: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_204": {
                "msg": {
                    "value": "Overwriting batch size: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_207": {
                "msg": {
                    "value": "Overwriting momentum optimizer value: %f",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_217": {
                "msg": {
                    "value": "Overwriting train steps: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_220": {
                "msg": {
                    "value": "Overwriting eval steps: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_223": {
                "msg": {
                    "value": "Overwriting train input path: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_226": {
                "msg": {
                    "value": "Overwriting eval input path: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_230": {
                "msg": {
                    "value": "Overwriting label map path: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/config_util_test.py": {
        "tensorflow": {
            "main_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/dataset_util.py": {
        "tensorflow": {
            "Feature_22": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_30": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_58": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Int64List_22": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_26": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_30": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_34": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_38": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/dataset_util_test.py": {
        "tensorflow": {
            "main_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/label_map_util.py": {
        "tensorflow": {
            "GFile_116": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/label_map_util_test.py": {
        "tensorflow": {
            "main_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/learning_schedules.py": {
        "tensorflow": {
            "exponential_decay_50": {
                "variable": {
                    "value": "post_burnin_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_base",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "learning_rate_decay_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_rate_decay_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "step_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "learning_rates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rates",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "unreached_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.greater(step_boundaries, global_step))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "unreached_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[unreached_boundaries, [len(boundaries)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_min(unreached_boundaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_56": {
                "pred": {
                    "value": "tf.less(global_step, burnin_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.convert_to_tensor(burnin_learning_rate)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : post_burnin_learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_104": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(global_step, warmup_steps)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : pre_cosine_learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "tf.slice(learning_rates, index, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_57": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "burnin_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_148": {
                "condition": {
                    "value": "tf.greater(step_boundaries, global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_150": {
                "input_tensor": {
                    "value": "unreached_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater(step_boundaries, global_step)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.concat([unreached_boundaries, [len(boundaries)]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_151": {
                "input_": {
                    "value": "learning_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(rates, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reduce_min(unreached_boundaries), [1])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_58": {
                "value": {
                    "value": "burnin_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate_base",
                            "variable"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_97": {
                "x": {
                    "value": "np.pi * tf.cast(global_step - warmup_steps, tf.float32) / float(total_steps - warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_105": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "warmup_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_148": {
                "x": {
                    "value": "step_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(boundaries, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "global_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/learning_schedules_test.py": {
        "tensorflow": {
            "placeholder_25": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/metrics_test.py": {
        "tensorflow": {
            "main_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/np_box_list_ops_test.py": {
        "tensorflow": {
            "main_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/np_box_list_test.py": {
        "tensorflow": {
            "main_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/np_box_ops_test.py": {
        "tensorflow": {
            "main_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/object_detection_evaluation_test.py": {
        "tensorflow": {
            "main_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/ops.py": {
        "tensorflow": {
            "map_fn_70": {
                "variable": {
                    "value": "absolute_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_to_absolute_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "normalized_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "height_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, padded_tensor_height - tensor_height, tensor_width, tensor_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_172": {
                "variable": {
                    "value": "padded_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tensor, height_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "width_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, padded_tensor_height, padded_tensor_width - tensor_width, tensor_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "padded_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[padded_tensor, width_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_219": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.size(indices), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "one_hot_and_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros((depth + left_pad, 0))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "num_valid_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dense_num_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_246": {
                "variable": {
                    "value": "box_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "dense_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.constant([0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.stack([num_valid_boxes, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tiled_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.tile([i], tf.expand_dims(dense_num_boxes[i], 0)) for i in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_279": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(valid_indices, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(valid_indicator_vector)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_363": {
                "variable": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(tensor_dict[fields.InputDataFields.groundtruth_classes], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_421": {
                "variable": {
                    "value": "nan_indicator_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.to_int32(tf.is_nan(groundtruth_boxes)), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_423": {
                "variable": {
                    "value": "valid_indicator_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nan_indicator_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.reduce_sum(tf.to_int32(tf.is_nan(groundtruth_boxes)), reduction_indices=[1]), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_424": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_indicator_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(nan_indicator_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_601": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(boxes, [-1, 2, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_617": {
                "variable": {
                    "value": "image_splits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "total_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "total_bins * num_bins",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_685": {
                "variable": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(box_masks, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_687": {
                "variable": {
                    "value": "unit_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_boxes, 2]), tf.ones([num_boxes, 2])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_690": {
                "variable": {
                    "value": "image_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(box_masks, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "reverse_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform_boxes_relative_to_boxes(unit_boxes, boxes)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "tf.range(num_boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[image_height, image_width]",
                    "type": "List",
                    "possible_values": []
                },
                "extrapolation_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "py_func_735": {
                "variable": {
                    "value": "(merged_boxes, class_encodings, merged_box_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "merge_numpy_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[boxes, classes, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "variable": {
                    "value": "merged_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "merged_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(merged_boxes, [-1, 4])",
                            "Call"
                        ],
                        [
                            "np.vstack(box_to_class_indices.keys()).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_739": {
                "variable": {
                    "value": "class_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(class_encodings, [-1, num_classes])",
                            "Call"
                        ],
                        [
                            "[item[1] for item in box_to_class_indices.values()]",
                            "ListComp"
                        ],
                        [
                            "np.vstack(class_encodings).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_740": {
                "variable": {
                    "value": "merged_box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "merged_box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(merged_box_indices, [-1])",
                            "Call"
                        ],
                        [
                            "[item[0] for item in box_to_class_indices.values()]",
                            "ListComp"
                        ],
                        [
                            "np.array(merged_box_indices).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "variable": {
                    "value": "start_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(start_dim, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_44": {
                "variable": {
                    "value": "before",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "start_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(start_dim, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_45": {
                "variable": {
                    "value": "add_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.reshape(num_dims, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_46": {
                "variable": {
                    "value": "after",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "start_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(start_dim, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[before, add_shape, after]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_105": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_109": {
                "variable": {
                    "value": "xgrid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(x, x_exp_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "y_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(tf.shape(y), tf.rank(y), tf.rank(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_110": {
                "variable": {
                    "value": "ygrid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(y, y_exp_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "x_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(tf.shape(x), 0, tf.rank(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_216": {
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.greater(tf.size(indices), 0), one_hot_and_pad, lambda : tf.zeros((depth + left_pad, 0)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, depth + left_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_stitch_283": {
                "indices": {
                    "value": "[tf.range(size), tf.to_int32(indices)]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[zeros, values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_317": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(tensor_dict[fields.InputDataFields.groundtruth_boxes])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_377": {
                "condition": {
                    "value": "tf.is_nan(label_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(tf.shape(label_scores))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_398": {
                "variable": {
                    "value": "is_not_crowd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "is_crowd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_is_crowd]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_399": {
                "variable": {
                    "value": "is_not_crowd_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_not_crowd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(is_crowd)",
                            "Call"
                        ]
                    ]
                }
            },
            "crop_and_resize_621": {
                "variable": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(boxes[box_index, :].tolist())",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "bin_crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "extrapolation_value": {
                    "value": "extrapolation_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_629": {
                "variable": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(image_crops) / len(image_crops)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(position_sensitive_features, [1, 2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.stack(image_crops, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.batch_to_space_nd(position_sensitive_features, block_shape=[1] + num_spatial_bins, crops=tf.zeros((3, 2), dtype=tf.int32)), squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(position_sensitive_features, block_size=block_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_639": {
                "variable": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "image_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.space_to_depth(crop, block_size=block_size) for crop in image_crops]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_642": {
                "variable": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.batch_to_space_nd(position_sensitive_features, block_shape=[1] + num_spatial_bins, crops=tf.zeros((3, 2), dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_679": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(boxes, [-1, 2, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_680": {
                "variable": {
                    "value": "min_corner",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reference_boxes[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_681": {
                "variable": {
                    "value": "max_corner",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reference_boxes[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_695": {
                "input": {
                    "value": "image_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=box_masks, boxes=reverse_boxes, box_ind=tf.range(num_boxes), crop_size=[image_height, image_width], extrapolation_value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "ExpandedShape",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "Meshgrid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_218": {
                "tensor": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(tf.cast(indices, tf.int64), depth, on_value=1, off_value=0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [left_pad, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_219": {
                "x": {
                    "value": "tf.size(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_247": {
                "value": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_247": {
                "values": {
                    "value": "[num_valid_boxes, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_248": {
                "input": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.expand_dims(dense_num_boxes[i], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_280": {
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_281": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_363": {
                "x": {
                    "value": "tensor_dict[fields.InputDataFields.groundtruth_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_nan_378": {
                "x": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_378": {
                "shape": {
                    "value": "tf.shape(label_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_421": {
                "input_tensor": {
                    "value": "tf.to_int32(tf.is_nan(groundtruth_boxes))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NormalizeToTarget'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "NormalizeToTarget",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_497": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable(name='weights', dtype=tf.float32, initializer=tf.constant(initial_norm, dtype=tf.float32), trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_498": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(target_norm)",
                            "Call"
                        ],
                        [
                            "tf.Print(mean, ['NormalizeToTarget:', mean])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "['NormalizeToTarget:', mean]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_650": {
                "variable": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(image_crops) / len(image_crops)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(position_sensitive_features, [1, 2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.stack(image_crops, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.batch_to_space_nd(position_sensitive_features, block_shape=[1] + num_spatial_bins, crops=tf.zeros((3, 2), dtype=tf.int32)), squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(position_sensitive_features, block_size=block_size)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bin_crop_size[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_683": {
                "tensor": {
                    "value": "transformed_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(boxes - min_corner) / (max_corner - min_corner)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_686": {
                "input": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(box_masks, axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "tensor": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_106": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_107": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(tf.shape(x), 0, tf.rank(y))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(tf.shape(y), tf.rank(y), tf.rank(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_146": {
                "x": {
                    "value": "tf.ceil(tf.to_float(tensor_height) / tf.to_float(multiple))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_153": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_154": {
                "x": {
                    "value": "tf.ceil(tf.to_float(tensor_width) / tf.to_float(multiple))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_165": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_216": {
                "indices": {
                    "value": "tf.cast(indices, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[dim]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_219": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "(depth + left_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_248": {
                "input": {
                    "value": "dense_num_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_283": {
                "x": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_323": {
                "variable": {
                    "value": "valid_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "tensor_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(valid_indices, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(valid_indicator_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_378": {
                "input": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_421": {
                "x": {
                    "value": "tf.is_nan(groundtruth_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_499": {
                "name": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(target_norm)",
                            "Call"
                        ],
                        [
                            "tf.Print(mean, ['NormalizeToTarget:', mean])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_500": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(inputs), dim, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "tensor": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable(name='weights', dtype=tf.float32, initializer=tf.constant(initial_norm, dtype=tf.float32), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mult_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_rank * [1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "truediv_503": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon + tf.sqrt(tf.reduce_sum(tf.square(inputs), dim, True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_627": {
                "inputs": {
                    "value": "image_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.space_to_depth(crop, block_size=block_size) for crop in image_crops]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "batch_to_space_nd_643": {
                "input": {
                    "value": "position_sensitive_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(image_crops) / len(image_crops)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(position_sensitive_features, [1, 2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.stack(image_crops, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.batch_to_space_nd(position_sensitive_features, block_shape=[1] + num_spatial_bins, crops=tf.zeros((3, 2), dtype=tf.int32)), squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(position_sensitive_features, block_size=block_size)",
                            "Call"
                        ]
                    ]
                },
                "block_shape": {
                    "value": "[1] + num_spatial_bins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "crops": {
                    "value": "tf.zeros((3, 2), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_688": {
                "shape": {
                    "value": "[num_boxes, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_688": {
                "shape": {
                    "value": "[num_boxes, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ceil_147": {
                "x": {
                    "value": "tf.to_float(tensor_height) / tf.to_float(multiple)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_155": {
                "x": {
                    "value": "tf.to_float(tensor_width) / tf.to_float(multiple)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_317": {
                "input": {
                    "value": "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "valid_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(tf.reshape(tensor_dict[key], [num_boxes, -1]), valid_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_422": {
                "x": {
                    "value": "groundtruth_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict[fields.InputDataFields.groundtruth_boxes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_494": {
                "value": {
                    "value": "initial_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth * [target_norm_value]",
                            "BinOp"
                        ],
                        [
                            "target_norm_value",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_500": {
                "input_tensor": {
                    "value": "tf.square(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_615": {
                "values": {
                    "value": "box_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ymin + bin_y * step_y, xmin + bin_x * step_x, ymin + (bin_y + 1) * step_y, xmin + (bin_x + 1) * step_x]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "space_to_depth_635": {
                "input": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(split, box, box_ind, bin_crop_size, extrapolation_value=extrapolation_value)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bin_crop_size[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_scope_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_500": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_645": {
                "shape": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_147": {
                "x": {
                    "value": "multiple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_155": {
                "x": {
                    "value": "multiple",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_331": {
                "params": {
                    "value": "tf.reshape(tensor_dict[key], [num_boxes, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(valid_indices, [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(valid_indicator_vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "tensor": {
                    "value": "tensor_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_boxes, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/ops_test.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "normalized_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_30": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 4, 4, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0.0], [0.0]], [[0.0], [0.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0.0], [0.0]], [[0.0], [0.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[0.0], [0.0]], [[0.0], [0.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_113": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_137": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_151": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_161": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_176": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_181": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "dense_location_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_valid_boxes, code_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "dense_num_boxes_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "dense_location_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_boxes, code_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "dense_num_boxes_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "constant_251": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_268": {
                "variable": {
                    "value": "tf_all_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_287": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_306": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_325": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_339": {
                "variable": {
                    "value": "tf_rand_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(all_indices)[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "np.random.permutation(np.arange(size))[0:num_indices]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_352": {
                "variable": {
                    "value": "input_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_353": {
                "variable": {
                    "value": "input_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "input_is_crowd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "input_area",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "input_difficult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "input_label_types",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_358": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_416": {
                "variable": {
                    "value": "input_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_417": {
                "variable": {
                    "value": "input_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_422": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_448": {
                "variable": {
                    "value": "input_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_449": {
                "variable": {
                    "value": "input_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_450": {
                "variable": {
                    "value": "input_is_crowd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_451": {
                "variable": {
                    "value": "input_area",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_452": {
                "variable": {
                    "value": "input_difficult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_453": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_499": {
                "variable": {
                    "value": "input_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_500": {
                "variable": {
                    "value": "input_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_501": {
                "variable": {
                    "value": "input_is_crowd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_502": {
                "variable": {
                    "value": "input_area",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_503": {
                "variable": {
                    "value": "input_difficult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_504": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_540": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_541": {
                "variable": {
                    "value": "input_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_542": {
                "variable": {
                    "value": "input_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_543": {
                "variable": {
                    "value": "input_is_crowd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_544": {
                "variable": {
                    "value": "input_area",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_545": {
                "variable": {
                    "value": "input_difficult",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_546": {
                "variable": {
                    "value": "input_label_types",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_547": {
                "variable": {
                    "value": "valid_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_608": {
                "variable": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[np.nan, 1.0, np.nan]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_618": {
                "variable": {
                    "value": "label_scores_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 1.0, 1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_739": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[3, 4], [7, 24]], [[5, -12], [-1, 0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_753": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[3, 4], [7, 24]], [[5, -12], [-1, 0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_774": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "range(1, 3 * 2 + 1) * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_777": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_797": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "range(1, 3 * 3 + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_799": {
                "variable": {
                    "value": "tiled_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 3 + 1), dtype=tf.float32, shape=[1, 3, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 2 * 2 * 4 + 1) * 2, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, image_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_801": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_and_resize_805": {
                "variable": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 3 + 1), dtype=tf.float32, shape=[1, 3, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 2 * 2 * 4 + 1) * 2, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((2, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((3, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((6, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((num_boxes, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.array([[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5, 1.0]]), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((6, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((num_boxes, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 1.0, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 0.75, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 0.75, 0.75], [0.0, 0.0, 0.5, 0.75], [0.25, 0.25, 0.75, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[]])",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0, 1, 1, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0, 1, 1, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[3, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1]",
                            "List"
                        ],
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[6, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_806": {
                "variable": {
                    "value": "crop_and_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_827": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 0, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_and_resize_831": {
                "variable": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 3 + 1), dtype=tf.float32, shape=[1, 3, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 2 * 2 * 4 + 1) * 2, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(range(1, 3 * 2 + 1) * 6, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(1, dtype=tf.float32, shape=image_shape)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((2, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((3, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((6, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((num_boxes, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.array([[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5, 1.0]]), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((6, 4))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((num_boxes, 4))",
                            "Call"
                        ],
                        [
                            "tf.constant([[0, 0, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.0, 0.0, 1.0, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 0.75, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.5, 0.75, 1.0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[0.25, 0.25, 0.75, 0.75], [0.0, 0.0, 0.5, 0.75], [0.25, 0.25, 0.75, 0.75]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[]])",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0, 1, 1, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0, 0, 1, 1, 1], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant([0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[3, 2]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[2, 2]",
                            "List"
                        ],
                        [
                            "[1, 1]",
                            "List"
                        ],
                        [
                            "[3 * crop_size_mult, 2 * crop_size_mult]",
                            "List"
                        ],
                        [
                            "[6, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_832": {
                "variable": {
                    "value": "crop_and_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_846": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_847": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_848": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_859": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_860": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_861": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_873": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_874": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_875": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_888": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "range(1, 3 * 2 + 1) * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_891": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_926": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "range(1, 2 * 2 * 4 + 1) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_930": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array([[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5, 1.0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_932": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_965": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0, 0, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_984": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "range(1, 3 * 2 + 1) * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_987": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1032": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([1, 4, 4, 3], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 2]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 6]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, 5]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 4]",
                            "List"
                        ],
                        [
                            "[2, 3, 3, 4]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ],
                        [
                            "[1, 3, 2, 6]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_1033": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1034": {
                "variable": {
                    "value": "box_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1045": {
                "variable": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0, 0], [0, 0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1047": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0, 0.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1060": {
                "variable": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, 1], [1, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1062": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.25, 0.25, 0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1075": {
                "variable": {
                    "value": "box_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1, 0], [0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1077": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.25, 0.5, 0.75, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1093": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.25, 0.25, 0.75, 0.75], [0.0, 0.0, 0.5, 0.75], [0.25, 0.25, 0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1097": {
                "variable": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 4, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1118": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1119": {
                "variable": {
                    "value": "class_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_1132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1019": {
                "variable": {
                    "value": "ps_crop_and_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ps_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.position_sensitive_crop_regions(image, boxes, box_ind, crop_size, num_spatial_bins, global_pool=False)",
                            "Call"
                        ],
                        [
                            "ops.position_sensitive_crop_regions(image, boxes, box_ind, crop_size, num_spatial_bins, global_pool=False)",
                            "Call"
                        ],
                        [
                            "ops.position_sensitive_crop_regions(image, boxes, box_ind, crop_size, num_spatial_bins, global_pool=False)",
                            "Call"
                        ],
                        [
                            "ops.position_sensitive_crop_regions(image, boxes, box_ind, crop_size, num_spatial_bins, global_pool=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_271": {
                "input": {
                    "value": "tf_all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_762": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/per_image_evaluation_test.py": {
        "tensorflow": {
            "main_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/shape_utils.py": {
        "tensorflow": {
            "rank_62": {
                "variable": {
                    "value": "t_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_63": {
                "variable": {
                    "value": "t_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "variable": {
                    "value": "pad_d0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length - t_d0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_66": {
                "variable": {
                    "value": "pad_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(t_rank, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.concat([pad_d0, t_shape[1:]], 0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.expand_dims(length - t_d0, 0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "padded_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[t, tf.zeros(pad_shape, dtype=t.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_88": {
                "variable": {
                    "value": "clipped_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_107": {
                "variable": {
                    "value": "processed_t",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.shape(t)[0], length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : clip_tensor(t, length)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : pad_tensor(t, length)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_129": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_67": {
                "x": {
                    "value": "t_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_108": {
                "x": {
                    "value": "tf.shape(t)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_67": {
                "values": {
                    "value": "[pad_d0, t_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "length - t_d0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "shape": {
                    "value": "pad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.greater(t_rank, 1), lambda : tf.concat([pad_d0, t_shape[1:]], 0), lambda : tf.expand_dims(length - t_d0, 0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_108": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/shape_utils_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_28": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_40": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2], [0.2, 0.4], [0.5, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2], [0.2, 0.4], [0.5, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2], [0.2, 0.4], [0.5, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_100": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_102": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.1, 0.2], [0.2, 0.4], [0.5, 0.8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_101": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_106": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_122": {
                "x": {
                    "value": "combined_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/static_shape_test.py": {
        "tensorflow": {
            "TensorShape_26": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[32, 299, 384, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_30": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[32, 299, 384, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_34": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[32, 299, 384, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_38": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[32, 299, 384, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_42": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[32, 299, 384]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/test_utils.py": {
        "tensorflow": {
            "reduce_sum_54": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "0 * image_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "[0, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "shape": {
                    "value": "(batch_size, num_anchors, 1, code_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "shape": {
                    "value": "(batch_size, num_anchors, self.num_classes + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "shape": {
                    "value": "(num_anchors, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/test_utils_test.py": {
        "tensorflow": {
            "main_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/variables_helper.py": {
        "tensorflow": {
            "NewCheckpointReader_122": {
                "variable": {
                    "value": "ckpt_reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/variables_helper_test.py": {
        "tensorflow": {
            "global_variables_initializer_84": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_97": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_138": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_variables()",
                            "Call"
                        ],
                        [
                            "self._create_variables()",
                            "Call"
                        ],
                        [
                            "self._create_variables()",
                            "Call"
                        ],
                        [
                            "self._create_variables()",
                            "Call"
                        ],
                        [
                            "self._create_variables()",
                            "Call"
                        ],
                        [
                            "[tf.Variable(1.0, name='weights'), tf.Variable(1.0, name='biases')]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_151": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "graph1_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(1.0, name='weights')]",
                            "List"
                        ],
                        [
                            "[tf.Variable(1.0, name='ckpt_weights')]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_167": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "graph1_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.Variable(1.0, name='weights')]",
                            "List"
                        ],
                        [
                            "[tf.Variable(1.0, name='ckpt_weights')]",
                            "List"
                        ]
                    ]
                }
            },
            "main_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_149": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_165": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "ckpt_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_175": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "initial_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "initial_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "initial_value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_110": {
                "initial_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "FeatureExtractor/InceptionV3/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "initial_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_113": {
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "initial_value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "StackProposalGenerator/biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "object_detection/utils/visualization_utils.py": {
        "tensorflow": {
            "map_fn_299": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "draw_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(images, boxes, classes, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "py_func_523": {
                "variable": {
                    "value": "cdf_plot",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cdf_plot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(cdf_plot, [values], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_295": {
                "variable": {
                    "value": "image_with_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "visualize_boxes_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functools.partial(visualize_boxes_and_labels_on_image_array, category_index=category_index, instance_masks=None, keypoints=None, use_normalized_coordinates=True, max_boxes_to_draw=max_boxes_to_draw, min_score_thresh=min_score_thresh, agnostic_mode=False, line_thickness=4)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[image, boxes, classes, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_524": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cdf_plot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(cdf_plot, [values], tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "object_detection/utils/visualization_utils_test.py": {
        "tensorflow": {}
    },
    "slim/datasets/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_100": {
                "name": {
                    "value": "train_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "validation_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "output_directory",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "train_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "validation_shards",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_112": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "labels_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_136": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_152": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_210": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_317": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_445": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_624": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_658": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_163": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_170": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_175": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_234": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_238": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_239": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_243": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_244": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_248": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordWriter_378": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_513": {
                "variable": {
                    "value": "matching_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Int64List_163": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_170": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_175": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_210": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_501": {
                "name": {
                    "value": "labels_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/cifar10.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/dataset_utils.py": {
        "tensorflow": {
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_53": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_67": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_71": {
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_127": {
                "filename": {
                    "value": "os.path.join(dataset_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_53": {
                "value": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_67": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "Features_71": {
                "feature": {
                    "value": "{'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/download_and_convert_cifar10.py": {
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_89": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Remove_153": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_156": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'cifar-10-batches-py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_165": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MakeDirs_166": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_171": {
                "filename": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_178": {
                "path": {
                    "value": "training_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_187": {
                "path": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/download_and_convert_flowers.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Remove_161": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_164": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'flower_photos')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_183": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MakeDirs_184": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_124": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_130": {
                "path": {
                    "value": "output_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_139": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filenames[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/download_and_convert_mnist.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(_IMAGE_SIZE, _IMAGE_SIZE, _NUM_CHANNELS)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "encode_png_118": {
                "variable": {
                    "value": "encoded_png",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Remove_183": {
                "filename": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_192": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MakeDirs_193": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_198": {
                "filename": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "training_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_211": {
                "path": {
                    "value": "testing_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_120": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim/datasets/flowers.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/imagenet.py": {
        "tensorflow": {
            "FixedLenFeature_147": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_149": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_151": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_153": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VarLenFeature_155": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_157": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_159": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_161": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_163": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim/datasets/mnist.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "raw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slim/deployment/model_deploy.py": {
        "tensorflow": {
            "add_n_304": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_355": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_218": {
                "variable": {
                    "value": "clone_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_292": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_216": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_220": {
                "variable": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_226": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "variable": {
                    "value": "sum_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "clone.scope + '/clone_loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_235": {
                "name": {
                    "value": "regularization_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(regularization_losses, name='regularization_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_347": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_359": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_383": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_407": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_222": {
                "variable": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_260": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_295": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_378": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_394": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_398": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_440": {
                "variable": {
                    "value": "sum_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_470": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_362": {
                "device_name": {
                    "value": "config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_380": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_403": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_465": {
                "name": {
                    "value": "var.op.name + ':gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_467": {
                "name": {
                    "value": "var.op.name + ':gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_190": {
                "device_name": {
                    "value": "clone_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.clone_device(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_379": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_386": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_468": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_scope_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/deployment/model_deploy_test.py": {
        "tensorflow": {
            "Graph_184": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_210": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_289": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_331": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_383": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_410": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_438": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_485": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_op_136": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LogisticClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNormClassifier",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_187": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_206": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_214": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_344": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_360": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_488": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_489": {
                "variable": {
                    "value": "tf_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_496": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_502": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_238": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_291": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_333": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_359": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_385": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_412": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_440": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_487": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_539": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_558": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_545": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim/download_and_convert_data.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert, one of \"cifar10\", \"flowers\", \"mnist\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the output TFRecords and temporary files are saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/eval_image_classifier.py": {
        "tensorflow": {
            "DEFINE_integer_30": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "max_num_batches",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "eval_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_89": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_130": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_142": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_163": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_164": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_174": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_175": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_165": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim/export_inference_graph.py": {
        "tensorflow": {
            "DEFINE_string_68": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to save.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The image size to use, otherwise use the model default_image_size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size for the exported model. Defaulted to \"None\" so batch size can be specified at model runtime.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use with the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_93": {
                "name": {
                    "value": "output_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Where to save the resulting file to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save intermediate dataset files to",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_105": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_119": {
                "name": {
                    "value": "FLAGS.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/export_inference_graph_test.py": {
        "tensorflow": {
            "main_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_41": {
                "filename": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'inception_v3.pb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim/nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/alexnet_test.py": {
        "tensorflow": {
            "main_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_109": {
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_113": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/cyclegan.py": {
        "tensorflow": {
            "shape_115": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_value_116": {
                "variable": {
                    "value": "static_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_86": {
                "variable": {
                    "value": "net_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "upconv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_98": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_101": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_196": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_256": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "_dynamic_or_static_shape(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_211": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "residual_blocks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_61": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "weights_init_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_266": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_227": {
                "variable": {
                    "value": "res_net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_229": {
                "variable": {
                    "value": "res_net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "tf.pad(res_net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "decoder1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "decoder2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "'block_{}'.format(block_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/cyclegan_test.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "img_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "img_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_39": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/dcgan.py": {
        "tensorflow": {
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "str"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "str"
                        ],
                        [
                            "'Discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'Generator'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "str"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "str"
                        ],
                        [
                            "'Discriminator'",
                            "Method Argument"
                        ],
                        [
                            "'Generator'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, 1, kernel_size=1, stride=1, padding='VALID', normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, normalizer_fn=None, activation_fn=None, kernel_size=1, stride=1, padding='VALID', scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_163": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/dcgan_test.py": {
        "tensorflow": {
            "zeros_61": {
                "variable": {
                    "value": "wrong_dim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "correct_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "wrong_dim_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "spatially_undefined_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "not_square",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "not_power_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 30, 30, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_29": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_37": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_45": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "mixed",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_51": {
                "variable": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_77": {
                "variable": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_103": {
                "variable": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_275": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_351": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net + scaled_up",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, 32, 3, stride=2, padding=padding, scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, 3, padding=padding, scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_3a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 80, 1, padding=padding, scope='Conv2d_3b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, 3, padding=padding, scope='Conv2d_4a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_5a_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 10, block35, scale=0.17, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 20, block17, scale=0.1, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 9, block8, scale=0.2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "block8(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, 1, scope='Conv2d_7b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_8x8')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='Dropout')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_resnet_v2_test.py": {
        "tensorflow": {
            "main_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_267": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_304": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_210": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_212": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_206": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_208": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "slim/nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [7, 7], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], stride=1, scope='AvgPool_0a_7x7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_0b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v1_test.py": {
        "tensorflow": {
            "placeholder_184": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV2'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_177": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'Mixed_4a'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_5a'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_516": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(inputs, depth(64), [7, 7], depth_multiplier=depthwise_multiplier, stride=2, padding='SAME', weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, depth(64), [7, 7], stride=2, weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [1, 1], scope=end_point, weights_initializer=trunc_normal(0.1))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_534": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v2_test.py": {
        "tensorflow": {
            "placeholder_298": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_318": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_335": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "transposed_original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV3'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV3'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0b_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Mixed_5d'",
                            "str"
                        ],
                        [
                            "'Mixed_6a'",
                            "str"
                        ],
                        [
                            "'Mixed_6b'",
                            "str"
                        ],
                        [
                            "'Mixed_6c'",
                            "str"
                        ],
                        [
                            "'Mixed_6d'",
                            "str"
                        ],
                        [
                            "'Mixed_6e'",
                            "str"
                        ],
                        [
                            "'Mixed_7a'",
                            "str"
                        ],
                        [
                            "'Mixed_7b'",
                            "str"
                        ],
                        [
                            "'Mixed_7c'",
                            "str"
                        ]
                    ]
                }
            },
            "concat_399": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_523": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth(32), [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(32), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [3, 3], padding='SAME', scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(80), [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='GlobalPool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_540": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_516": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v3_test.py": {
        "tensorflow": {
            "placeholder_264": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_284": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_302": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_118": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV4'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "branch_1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "branch_2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 32, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [3, 3], padding='VALID', scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [3, 3], scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "block_inception_a(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_a(net, 'Mixed_6a')",
                            "Call"
                        ],
                        [
                            "block_inception_b(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_b(net, 'Mixed_7a')",
                            "Call"
                        ],
                        [
                            "block_inception_c(net, block_scope)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='PreLogitsFlatten')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/inception_v4_test.py": {
        "tensorflow": {
            "main_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_161": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_163": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_253": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_95": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/mobilenet_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_415": {
                "variable": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'MobilenetV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_334": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, normalizer_fn=slim.batch_norm, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, None, conv_def.kernel, depth_multiplier=1, stride=layer_stride, rate=layer_rate, normalizer_fn=slim.batch_norm, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, normalizer_fn=slim.batch_norm, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_349": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/mobilenet_v1_test.py": {
        "tensorflow": {
            "placeholder_423": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_443": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_461": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "main_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_388": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_406": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/nasnet/nasnet.py": {
        "tensorflow": {
            "identity_222": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_292": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_337": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_385": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_500": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_510": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_237": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_238": {
                "variable": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "aux_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_288": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_333": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_gpu_available_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_381": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_493": {
                "variable": {
                    "value": "aux_net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_499": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/nasnet/nasnet_test.py": {
        "tensorflow": {
            "main_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_252": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_254": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_282": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_155": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_233": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_246": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_249": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/nasnet/nasnet_utils.py": {
        "tensorflow": {
            "avg_pool_102": {
                "variable": {
                    "value": "path1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_118": {
                "variable": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(net, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(net, pad_arr)[:, :, 1:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(path2, int(output_filters / 2), 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ],
                        [
                            "INVALID",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_123": {
                "variable": {
                    "value": "final_path",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_136": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_176": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_288": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_292": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "split_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_398": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states_to_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h for (h, is_used) in zip(net, used_hiddenstates) if not is_used]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_81": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_271": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "factorized_reduction(prev_layer, curr_num_filters, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(prev_layer, curr_num_filters, 1, scope='prev_1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(prev_layer, scope='prev_bn')",
                            "Call"
                        ],
                        [
                            "self._reduce_prev_layer(prev_layer, net)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_414": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_419": {
                "variable": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_111": {
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_115": {
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_132": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_137": {
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_275": {
                "variable": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "prev_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "factorized_reduction(prev_layer, curr_num_filters, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(prev_layer)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(prev_layer, curr_num_filters, 1, scope='prev_1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(prev_layer, scope='prev_bn')",
                            "Call"
                        ],
                        [
                            "self._reduce_prev_layer(prev_layer, net)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "cell_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_356": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "tf.div(net, keep_prob) * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "tf.split(axis=split_axis, num_or_size_splits=1, value=net)",
                            "Call"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_410": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_411": {
                "name": {
                    "value": "layer_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "layer_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._cell_num + 1) / float(num_cells)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_420": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_421": {
                "name": {
                    "value": "current_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "current_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_424": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_425": {
                "name": {
                    "value": "drop_path_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "drop_path_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._drop_path_keep_prob",
                            "Attribute"
                        ],
                        [
                            "1 - layer_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ],
                        [
                            "1 - current_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "'comb_iter_{}'.format(iteration)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "'reduction_{}'.format(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "left",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "combine",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/nasnet/nasnet_utils_test.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 10, 20, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "slim/nets/nets_factory_test.py": {
        "tensorflow": {
            "main_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/overfeat_test.py": {
        "tensorflow": {
            "main_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_141": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/pix2pix.py": {
        "tensorflow": {
            "shape_81": {
                "variable": {
                    "value": "net_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_86": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[kernel_size[0] * height, kernel_size[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_220": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_249": {
                "variable": {
                    "value": "spatial_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_59": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[net, encoder_activations[-block_id - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_252": {
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [padding, padding], [padding, padding], [0, 0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/pix2pix_test.py": {
        "tensorflow": {
            "ones_32": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_66": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_83": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_119": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_122": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(residual, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu6_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_223": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_230": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/resnet_v1_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v1_small'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_396": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/resnet_v2_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'resnet_v2_small'",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_396": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slim/nets/vgg_test.py": {
        "tensorflow": {
            "main_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_157": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_179": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_344": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_367": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_546": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_568": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_569": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slim/preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_54": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_58": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_62": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_69": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_71": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_93": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_56": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_74": {
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "per_image_standardization_103": {
                "image": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_51": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_65": {
                "name": {
                    "value": "distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_91": {
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_100": {
                "name": {
                    "value": "resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(resized_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slim/preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "Method Argument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_195": {
                "variable": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_204": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_227": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_238": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_239": {
                "variable": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_279": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_280": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_188": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_192": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_265": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_267": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_271": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.875",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_275": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_276": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_278": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_198": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_205": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_207": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distorted_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_223": {
                "name": {
                    "value": "cropped_resized_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_236": {
                "name": {
                    "value": "final_distorted_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "input": {
                    "value": "distorted_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=4)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "slim/preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "slim/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "slim/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_67": {
                "variable": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_69": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_75": {
                "variable": {
                    "value": "size_assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_81": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_129": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_247": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_249": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_250": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_251": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_253": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_256": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_257": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_274": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_bilinear_279": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_314": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_315": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_334": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_73": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_86": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_118": {
                "variable": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_119": {
                "variable": {
                    "value": "rank_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_126": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_145": {
                "variable": {
                    "value": "height_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_149": {
                "variable": {
                    "value": "width_assert",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_228": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_70": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_72": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_76": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_81": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_85": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_125": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_130": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_141": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_253": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rank_70": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_78": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_120": {
                "x": {
                    "value": "image_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_131": {
                "x": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_132": {
                "x": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_146": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_150": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_187": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_188": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slim/train_image_classifier.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "num_clones",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "worker_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "num_readers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "task",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_85": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_93": {
                "name": {
                    "value": "adam_beta1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "adam_beta2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_101": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_103": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_106": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_110": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_113": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_116": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_120": {
                "name": {
                    "value": "rmsprop_momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_122": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_128": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_134": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_136": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_140": {
                "name": {
                    "value": "label_smoothing",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_143": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_146": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_150": {
                "name": {
                    "value": "sync_replicas",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_154": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_158": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_167": {
                "name": {
                    "value": "dataset_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_170": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_173": {
                "name": {
                    "value": "dataset_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_176": {
                "name": {
                    "value": "labels_offset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_182": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_185": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_189": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_192": {
                "name": {
                    "value": "train_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_195": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_202": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_206": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_211": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_276": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_329": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_351": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_352": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_356": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_377": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scopes",
                            "variable"
                        ]
                    ]
                }
            },
            "set_verbosity_386": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_478": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_543": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_553": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_574": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_242": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_281": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_330": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_441": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_489": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_501": {
                "variable": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_517": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.rmsprop_momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, total_num_replicas=FLAGS.worker_replicas, variable_averages=variable_averages, variables_to_average=moving_average_variables)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_545": {
                "variable": {
                    "value": "train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_249": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_285": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_399": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_428": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_472": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_509": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_536": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_544": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_549": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_251": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch / FLAGS.batch_size * FLAGS.num_epochs_per_decay)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_291": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_484": {
                "name": {
                    "value": "'activations/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_485": {
                "name": {
                    "value": "'sparsity/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_490": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_494": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_512": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_298": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zero_fraction_486": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_303": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_309": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}