{
    "utils/metrics.py": {
        "sklearn": {
            "confusion_matrix_13": {
                "variable": {
                    "value": "Confs",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_labels.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "np.arange(n_parts)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "max_12": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "pred_labels == labels.int()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_7": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ModelNet.py": {
        "torch": {}
    },
    "datasets/ShapeNet.py": {
        "torch": {}
    },
    "datasets/common.py": {
        "torch": {
            "cat_138": {
                "variable": {
                    "value": "layer_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "layer_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_neighbors_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "conv_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "pool_b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([len(pool_p)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "pool_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "pool_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "pool_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "up_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_p",
                            "variable"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/dataloader.py": {
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "subsampled_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(subsampled_points_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "subsampled_batches_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(subsampled_batches_len_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "batched_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_features_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "batched_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_labels_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "batched_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_points_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "batched_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batched_lengths_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "batched_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_features_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "batched_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batched_labels_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "batched_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(batched_points_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "batched_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batched_lengths_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "neighbors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(neighbor_indices_list, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.array(neighbors_indices_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_394": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate_fn_segmentation, config=dataset.config, neighborhood_limits=neighborhood_limits)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_406": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate_fn_classification, config=dataset.config, neighborhood_limits=neighborhood_limits)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "conv_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "pool_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "pool_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "pool_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "up_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "conv_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "pool_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "pool_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "pool_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_369": {
                "input": {
                    "value": "neighb_mat < neighb_mat.shape[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kernels/convolution_ops.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "K_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K_points_numpy.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "support_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[support_points, shadow_point]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(differences, differences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, torch.zeros_like(features[:1, :])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.max(corr, torch.zeros_like(sq_distances))",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "(new_sq_distances < KP_extent ** 2).float32()",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.max(corr, torch.zeros_like(new_sq_distances))",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "neighborhood_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[neighbors_indices, :]",
                            "Subscript"
                        ],
                        [
                            "features[new_neighbors_indices, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(all_weights, neighborhood_features)",
                            "Call"
                        ],
                        [
                            "weighted_features.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(all_weights, neighborhood_features)",
                            "Call"
                        ],
                        [
                            "weighted_features * modulations.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weighted_features.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_170": {
                "variable": {
                    "value": "output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weighted_features, K_values)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weighted_features, K_values)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "K_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K_points_numpy.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "K_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K_points_numpy.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "support_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[support_points, shadow_point]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_452": {
                "variable": {
                    "value": "deformed_K_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features0[:, :points_dim * num_kpoints]",
                            "Subscript"
                        ],
                        [
                            "offsets.reshape([-1, num_kpoints, points_dim])",
                            "Call"
                        ],
                        [
                            "features0.reshape([-1, num_kpoints, points_dim])",
                            "Call"
                        ],
                        [
                            "offsets * KP_extent",
                            "BinOp"
                        ],
                        [
                            "features0[:, :points_dim * (num_kpoints - 1)]",
                            "Subscript"
                        ],
                        [
                            "offsets.reshape([-1, num_kpoints - 1, points_dim])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(offsets[:, :1, :]), offsets], dim=1)",
                            "Call"
                        ],
                        [
                            "features0.reshape([-1, num_kpoints - 1, points_dim])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros_like(offsets[:, :1, :]), offsets], dim=1)",
                            "Call"
                        ],
                        [
                            "offsets",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(K_points_numpy.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "K_points.to(K_values.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(K_points_numpy.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "K_points.to(K_values.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(K_points_numpy.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "K_points.to(K_values.device)",
                            "Call"
                        ],
                        [
                            "K_points",
                            "Method Argument"
                        ],
                        [
                            "K_points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_458": {
                "variable": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(differences, differences)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_461": {
                "variable": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances < KP_extent ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_464": {
                "variable": {
                    "value": "new_max_neighb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_range, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_471": {
                "variable": {
                    "value": "new_neighbors_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbors_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors_indices",
                            "Method Argument"
                        ],
                        [
                            "neighbors_indices",
                            "Method Argument"
                        ],
                        [
                            "neighbors_indices",
                            "Method Argument"
                        ],
                        [
                            "neighbors_indices",
                            "Method Argument"
                        ],
                        [
                            "neighbors_indices",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_neighb_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_range.topk(k=int(new_max_neighb))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_509": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, torch.zeros_like(features[:1, :])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_515": {
                "variable": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(sq_distances)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.max(corr, torch.zeros_like(sq_distances))",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "(new_sq_distances < KP_extent ** 2).float32()",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.max(corr, torch.zeros_like(new_sq_distances))",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "radius_gaussian(sq_distances, sigma)",
                            "Call"
                        ],
                        [
                            "all_weights.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "neighborhood_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[neighbors_indices, :]",
                            "Subscript"
                        ],
                        [
                            "features[new_neighbors_indices, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_523": {
                "variable": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(all_weights, neighborhood_features)",
                            "Call"
                        ],
                        [
                            "weighted_features.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(all_weights, neighborhood_features)",
                            "Call"
                        ],
                        [
                            "weighted_features * modulations.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "weighted_features.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_526": {
                "variable": {
                    "value": "output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weighted_features, K_values)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weighted_features, K_values)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features, torch.zeros_like(features[:1, :])], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, torch.zeros_like(features[:1, :])], dim=0)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ],
                        [
                            "K_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_25": {
                "input": {
                    "value": "-sq_r / (2 * torch.pow(sig, 2) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_131": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(differences, differences), dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(differences, differences), dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_372": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(offsets[:, :1, :]), offsets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "modulations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(modulations[:, :1]), modulations]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros_like(offsets[:, :1, :]), offsets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_113": {
                "input": {
                    "value": "support_points[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_126": {
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors.unsqueeze(2) - K_points",
                            "BinOp"
                        ],
                        [
                            "neighbors.unsqueeze(2) - deformed_K_points.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors.unsqueeze(2) - K_points",
                            "BinOp"
                        ],
                        [
                            "neighbors.unsqueeze(2) - deformed_K_points.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_137": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.sqrt(sq_distances + 1e-10) / KP_extent",
                            "BinOp"
                        ],
                        [
                            "1 - torch.sqrt(new_sq_distances + 1e-10) / KP_extent",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_442": {
                "input": {
                    "value": "support_points[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_458": {
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors.unsqueeze(2) - K_points",
                            "BinOp"
                        ],
                        [
                            "neighbors.unsqueeze(2) - deformed_K_points.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors.unsqueeze(2) - K_points",
                            "BinOp"
                        ],
                        [
                            "neighbors.unsqueeze(2) - deformed_K_points.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_464": {
                "input": {
                    "value": "in_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.any(sq_distances < KP_extent ** 2, dim=2).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_492": {
                "variable": {
                    "value": "all_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.sqrt(sq_distances + 1e-10) / KP_extent",
                            "BinOp"
                        ],
                        [
                            "1 - torch.sqrt(new_sq_distances + 1e-10) / KP_extent",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "features[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_264": {
                "input": {
                    "value": "features0[:, points_dim * num_kpoints:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_369": {
                "input": {
                    "value": "features0[:, points_dim * (num_kpoints - 1):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_509": {
                "input": {
                    "value": "features[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_137": {
                "input": {
                    "value": "sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(differences, differences), dim=3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(differences, differences), dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_372": {
                "input": {
                    "value": "offsets[:, :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_373": {
                "input": {
                    "value": "modulations[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_381": {
                "input": {
                    "value": "offsets[:, :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_492": {
                "input": {
                    "value": "new_sq_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sq_distances.gather(dim=1, index=new_neighb_inds.unsqueeze(-1).repeat(1, 1, sq_distances.shape[-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_25": {
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sig",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "input": {
                    "value": "sq_distances + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_491": {
                "input": {
                    "value": "new_sq_distances + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/KPCNN.py": {
        "torch": {
            "ModuleDict_19": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.blocks[classification_head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_fdim, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "out_fdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.first_features_dim",
                            "Attribute"
                        ],
                        [
                            "out_fdim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/KPFCNN.py": {
        "torch": {
            "ModuleDict_12": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.blocks[segmentation_head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(out_fdim, config.first_features_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "out_fdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_fdim",
                            "variable"
                        ],
                        [
                            "out_fdim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.first_features_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "config.first_features_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.batch_norm_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "config.first_features_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, F[layer])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/network_blocks.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(initial).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(scale=np.sqrt(2 / size[-1]), size=size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(size=size, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, torch.min(features, dim=0, keepdim=True)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, torch.zeros_like(features[:1, :])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(scale=np.sqrt(2 / size[-1]), size=size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(size=size, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_48": {
                "input": {
                    "value": "pool_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[inds, :]",
                            "Subscript"
                        ],
                        [
                            "features[upsample_indices[:, 0], :]",
                            "Subscript"
                        ],
                        [
                            "ind_max_pool(origin_features, neighbors_indices)",
                            "Call"
                        ],
                        [
                            "ind_max_pool(origin_features, neighbors_indices)",
                            "Call"
                        ],
                        [
                            "closest_pool(features, upsample_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_fdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_126": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_fdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_fdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ],
                        [
                            "out_fdim",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_358": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features[start_ind:start_ind + length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "average_feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "input": {
                    "value": "features[:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_42": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([features, torch.min(features, dim=0, keepdim=True)[0]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, torch.zeros_like(features[:1, :])], dim=0)",
                            "Call"
                        ],
                        [
                            "self.conv1(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv2(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv1(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv2(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv3(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv1(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv2(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "self.conv3(query_points, support_points, neighbors_indices, features)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_ops/setup.py": {
        "torch": {}
    },
    "trainer.py": {
        "torch": {
            "save_199": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'best_loss': self.best_loss, 'best_iou': self.best_iou}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'model_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'model_{name}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_204": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "trainer_cls.py": {
        "torch": {
            "save_182": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'best_loss': self.best_loss, 'best_acc': self.best_acc}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'model_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'model_{name}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.max(predict, dim=1)[1].int() == labels.int()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_150": {
                "input": {
                    "value": "torch.max(predict, dim=1)[1].int() == labels.int()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_108": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_150": {
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training_ModelNet.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_112": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.exp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "self.evaluate_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training_ShapeNetCls.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_115": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.exp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "self.evaluate_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training_ShapeNetPart.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_123": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.exp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "self.evaluate_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}