{
    "codes/centralRepo/baseModel.py": {
        "sklearn": {
            "accuracy_score_537": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "yActual",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "yPredicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_539": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "yActual",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "yPredicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "list(set(labels))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "confusion_matrix_541": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "yActual",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "yPredicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_432": {
                "variable": {
                    "value": "dataLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainData",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self._findSampler(sampler)",
                            "Call"
                        ],
                        [
                            "sampler(trainData)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_491": {
                "variable": {
                    "value": "dataLoader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.batchSize",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_614": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_615": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_505": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.net(d['data'].unsqueeze(1).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_638": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(nGPU) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_640": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "enable_grad_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_509": {
                "data": {
                    "value": "loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "lossFn(output, d['label'].type(torch.LongTensor).to(self.device))",
                            "Call"
                        ],
                        [
                            "loss / d['data'].shape[0]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + lossFn(preds, d['label'].type(torch.LongTensor).to(self.device)).data",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/classify/cv.py": {
        "sklearn": {
            "StratifiedKFold_221": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "kFold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_142": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "netInitState",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['pathNetInitState']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "netInitState",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(config['pathNetInitState'])",
                            "Call"
                        ],
                        [
                            "net.to('cpu').state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "config['pathNetInitState']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "codes/centralRepo/eegDataset.py": {
        "torch": {}
    },
    "codes/centralRepo/networks.py": {
        "torch": {
            "rand_44": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nChan",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "nTime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "middleLayers",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.convBlock(inF, outF, dropoutP, kernalSize) for (inF, outF) in zip(nFiltLaterLayer, nFiltLaterLayer[1:])]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.allButLastLayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "firstLayer",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "block1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, self.F1, (1, self.C1), padding=(0, self.C1 // 2), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "block2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.F1 * self.D, self.F1 * self.D, (1, 22), padding=(0, 22 // 2), bias=False, groups=self.F1 * self.D)",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_111": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nChan",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "nTime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_276": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute((0, 4, 2, 3, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_280": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_326": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute((0, 4, 2, 3, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_329": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "nn.Dropout(p=dropoutP)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "Conv2dWithConstraint(1, outF, kernalSize, *args, padding=0, max_norm=2, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "Conv2dWithConstraint(inF, outF, kernalSize, *args, max_norm=0.5, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "nn.Conv2d(inF, outF, kernalSize, *args, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "renorm_148": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "renorm_161": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "self.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_199": {
                "input": {
                    "value": "torch.clamp(x.var(dim=self.dim, keepdim=True), 1e-06, 1000000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "Conv2dWithConstraint(nBands, m * nBands, (nChan, 1), groups=nBands, max_norm=2, doWeightNorm=doWeightNorm, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "*args": {
                    "value": "LinearWithConstraint(inF, outF, *args, max_norm=0.5, doWeightNorm=doWeightNorm, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "*args": {
                    "value": "Conv2dWithConstraint(nBands, m * nBands, (nChan, 1), groups=nBands, max_norm=2, doWeightNorm=doWeightNorm, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "*args": {
                    "value": "LinearWithConstraint(inF, outF, *args, max_norm=0.5, doWeightNorm=doWeightNorm, **kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "p": {
                    "value": "dropoutP",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "outF",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "outF",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LogSoftmax_37": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.C1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.C1 // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "self.F1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "self.F1 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_86": {
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "p": {
                    "value": "dropoutP",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "self.F1 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F1 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 22 // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.F1 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "self.F1 * self.D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "self.F2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ELU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_96": {
                "kernel_size": {
                    "value": "(1, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "p": {
                    "value": "dropoutP",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "inF",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outF",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernalSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 10)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LogSoftmax_104": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_199": {
                "input": {
                    "value": "x.var(dim=self.dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_232": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.allButLastLayers(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.firstBlocks(x)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "x.reshape([*x.shape[0:2], self.strideFactor, int(x.shape[3] / self.strideFactor)])",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x.permute((0, 4, 2, 3, 1)), dim=4)",
                            "Call"
                        ],
                        [
                            "self.scb(x)",
                            "Call"
                        ],
                        [
                            "self.temporalLayer(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.lastLayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_249": {
                "num_features": {
                    "value": "m * nBands",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_256": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_300": {
                "num_features": {
                    "value": "m * nBands",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_307": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "codes/centralRepo/samplers.py": {
        "torch": {
            "randperm_102": {
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_101": {
                "high": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/centralRepo/testFilterDiff.py": {
        "torch": {}
    },
    "codes/centralRepo/transforms.py": {
        "torch": {
            "from_numpy_170": {
                "variable": {
                    "value": "data[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([*d.shape, len(self.filtBank)])",
                            "Call"
                        ],
                        [
                            "np.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "np.zeros([*d.shape, len(self.filtBank)])",
                            "Call"
                        ],
                        [
                            "np.squeeze(out, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "data[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros([*d.shape, len(self.filtBank)])",
                            "Call"
                        ],
                        [
                            "np.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "np.zeros([*d.shape, len(self.filtBank)])",
                            "Call"
                        ],
                        [
                            "np.squeeze(out, axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/classify/ho.py": {
        "torch": {
            "manual_seed_125": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_212": {
                "variable": {
                    "value": "netInitState",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['pathNetInitState']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "netInitState",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(config['pathNetInitState'])",
                            "Call"
                        ],
                        [
                            "net.to('cpu').state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "config['pathNetInitState']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}