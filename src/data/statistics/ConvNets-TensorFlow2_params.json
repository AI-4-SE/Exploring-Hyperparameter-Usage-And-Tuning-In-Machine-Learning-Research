{
    "main.py": {
        "tensorflow": {
            "shuffle_28": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_28": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_30": {
                "variable": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_33": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_36": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_37": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_40": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_41": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/DenseNet.py": {
        "tensorflow": {
            "Sequential_10": {
                "variable": {
                    "value": "self.bottle_neck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(inner_channel, (1, 1), use_bias=False), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(growth_rate, (3, 3), padding='same', use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.down_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.BatchNormalization(), layers.Conv2D(out_channels, (1, 1), use_bias=False), layers.AveragePooling2D((2, 2), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(inner_channels, (3, 3), padding='same', use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_71": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_72": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "dense_block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_20": {
                "values": {
                    "value": "[x, self.bottle_neck(x, training=training)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_13": {
                "filters": {
                    "value": "inner_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_16": {
                "filters": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_29": {
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(reduction * inner_channels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AveragePooling2D_30": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_50": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_51": {
                "filters": {
                    "value": "inner_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "inner_channels + growth_rate * nblocks[len(nblocks) - 1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/GoogLeNet.py": {
        "tensorflow": {
            "Sequential_9": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(n1x1, (1, 1)), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(n3x3_reduce, (1, 1)), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(n3x3, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(n5x5_reduce, (1, 1)), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(n5x5, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(n5x5, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.b4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.MaxPool2D((3, 3), 1, padding='same'), layers.Conv2D(pool_proj, (1, 1)), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.b1(x), self.b2(x), self.b3(x), self.b4(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(192, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Inception(64, 96, 128, 16, 32, 32), Inception(128, 128, 192, 32, 96, 64), layers.MaxPool2D((3, 3), 2, padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Inception(192, 96, 208, 16, 48, 64), Inception(160, 112, 224, 24, 64, 64), Inception(128, 128, 256, 24, 64, 64), Inception(112, 144, 288, 32, 64, 64), Inception(256, 160, 320, 32, 128, 128), layers.MaxPool2D((3, 3), 2, padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Inception(256, 160, 320, 32, 128, 128), Inception(384, 192, 384, 48, 128, 128)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.GlobalAveragePooling2D(), layers.Dropout(0.4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_75": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.b1(x), self.b2(x), self.b3(x), self.b4(x)], axis=3)",
                            "Call"
                        ],
                        [
                            "self.layer1(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer4(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer5(x, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "n3x3_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_18": {
                "filters": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_23": {
                "filters": {
                    "value": "n5x5_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_26": {
                "filters": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_29": {
                "filters": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_34": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "pool_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_49": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_50": {
                "filters": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_57": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_65": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/InceptionV3.py": {
        "tensorflow": {
            "Conv2D_8": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.branch5x5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(48, (1, 1)), BasicConv2D(64, (5, 5), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), BasicConv2D(96, (3, 3), padding='same'), BasicConv2D(96, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(pool_features, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), BasicConv2D(96, (3, 3), padding='same'), BasicConv2D(96, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_59": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(c7, (1, 1)), layers.ZeroPadding2D((3, 0)), BasicConv2D(c7, (7, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(192, (1, 7))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.branch7x7stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(c7, (1, 1)), layers.ZeroPadding2D((3, 0)), BasicConv2D(c7, (7, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(c7, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(c7, (7, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(192, (1, 7))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(192, (1, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), BasicConv2D(320, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(192, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(192, (7, 1)), BasicConv2D(192, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_121": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.branch3x3_2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((0, 1)), BasicConv2D(384, (1, 3))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.branch3x3_2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((1, 0)), BasicConv2D(384, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.branch3x3stack_3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((0, 1)), BasicConv2D(384, (1, 3))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.branch3x3stack_3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((1, 0)), BasicConv2D(384, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(192, (1, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.branch3x3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.branch3x3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3, training=training), self.branch3x3_2b(branch3x3, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(branch3x3, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "branch3x3stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "branch3x3stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3stack(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.branch3x3stack_1(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.branch3x3stack_2(branch3x3stack, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack_3a(branch3x3stack, training=training), self.branch3x3stack_3b(branch3x3stack, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(branch3x3stack, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), BasicConv2D(32, (3, 3), padding='same'), BasicConv2D(32, (3, 3), padding='same'), BasicConv2D(64, (3, 3), padding='same'), BasicConv2D(80, (1, 1)), BasicConv2D(192, (3, 3))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[InceptionA(32), InceptionA(64), InceptionA(64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[InceptionC(channels_7x7=128), InceptionC(channels_7x7=160), InceptionC(channels_7x7=160), InceptionC(channels_7x7=192)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[InceptionE(), InceptionE()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_214": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_216": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_47": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_66": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_103": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_182": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7stack, branchpool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7, branchpool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3stack, branchpool]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AveragePooling2D_37": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_76": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_78": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_83": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_85": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_87": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_89": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_93": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_115": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_117": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_138": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_142": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_148": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_152": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_157": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_190": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/InceptionV4.py": {
        "tensorflow": {
            "Conv2D_7": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'valid'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), BasicConv2D(32, (3, 3)), BasicConv2D(32, (3, 3), padding='same'), BasicConv2D(64, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_32": {
                "variable": {
                    "value": "self.branch3x3_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.branch7x7a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), layers.ZeroPadding2D((3, 0)), BasicConv2D(64, (7, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(64, (1, 7)), BasicConv2D(96, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.branch7x7b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), BasicConv2D(96, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_45": {
                "variable": {
                    "value": "self.branchpoola",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), BasicConv2D(96, (3, 3), padding='same'), BasicConv2D(96, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(64, (1, 1)), BasicConv2D(96, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(96, (1, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(k, (1, 1)), BasicConv2D(l, (3, 3), padding='same'), BasicConv2D(m, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_103": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.branch7x7stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(192, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(224, (7, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(224, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(256, (7, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(224, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(256, (7, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(128, (1, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(256, (1, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(256, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(320, (7, 1)), layers.ZeroPadding2D((1, 1)), BasicConv2D(320, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), layers.ZeroPadding2D((1, 1)), BasicConv2D(192, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((1, 1)), layers.MaxPooling2D((3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(384, (1, 1)), layers.ZeroPadding2D((0, 1)), BasicConv2D(448, (1, 3)), layers.ZeroPadding2D((1, 0)), BasicConv2D(512, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.branch3x3stacka",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((0, 1)), BasicConv2D(256, (1, 3))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.branch3x3stackb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((1, 0)), BasicConv2D(256, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.branch3x3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((1, 0)), BasicConv2D(256, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.branch3x3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.ZeroPadding2D((0, 1)), BasicConv2D(256, (1, 3))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.AveragePooling2D((3, 3), strides=1, padding='same'), BasicConv2D(256, (1, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "branch3x3stack_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "branch3x3stack_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3stack(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stacka(branch3x3stack_output, training=training), self.branch3x3stackb(branch3x3stack_output, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(branch3x3stack_output, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "branch3x3_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "branch3x3_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3a(branch3x3_output, training=training), self.branch3x3b(branch3x3_output, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(branch3x3_output, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AveragePooling2D_263": {
                "variable": {
                    "value": "self.ap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_265": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_266": {
                "variable": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_267": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(32, (1, 1)), BasicConv2D(48, (3, 3), padding='same'), BasicConv2D(64, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(32, (1, 1)), BasicConv2D(32, (3, 3), padding='same')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_304": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_305": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_306": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_307": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training), self.branch3x3stack(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "self.branch7x7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(128, (1, 1)), layers.ZeroPadding2D((0, 3)), BasicConv2D(160, (1, 7)), layers.ZeroPadding2D((3, 0)), BasicConv2D(192, (7, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_337": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "1154",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_338": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "1154",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_340": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_349": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training), self.branch3x3stack(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "self.branch3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(192, (1, 1)), layers.ZeroPadding2D((0, 1)), BasicConv2D(224, (1, 3)), layers.ZeroPadding2D((1, 0)), BasicConv2D(256, (3, 1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_372": {
                "variable": {
                    "value": "self.reduction1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_373": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_374": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_375": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training), self.branch3x3stack(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual) * 0.1",
                            "BinOp"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch3x3(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(residual, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.reduction1x1(residual, training=training) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_398": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(k, (1, 1)), BasicConv2D(l, (3, 3), padding='same'), BasicConv2D(m, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPooling2D_404": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPooling2D_419": {
                "variable": {
                    "value": "self.branchpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "variable": {
                    "value": "self.branch3x3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(256, (1, 1)), BasicConv2D(384, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_424": {
                "variable": {
                    "value": "self.branch3x3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(256, (1, 1)), BasicConv2D(288, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "variable": {
                    "value": "self.branch3x3stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[BasicConv2D(256, (1, 1)), BasicConv2D(288, (3, 3), padding='same'), BasicConv2D(320, (3, 3), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_460": {
                "variable": {
                    "value": "self.ap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_461": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Flatten_462": {
                "variable": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_463": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_467": {
                "variable": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_150": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_183": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_245": {
                "values": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1_output, branch3x3_output, branch3x3stack_output, branchpool]",
                            "List"
                        ],
                        [
                            "self.bn(shortcut + residual)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ],
                        [
                            "self.bn(residual + shortcut, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ],
                        [
                            "self.bn(shortcut + residual)",
                            "Call"
                        ],
                        [
                            "self.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_413": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_442": {
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, training=training)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_conv(x, training=training), self.branch3x3_pool(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch7x7a(x, training=training), self.branch7x7b(x, training=training)]",
                            "List"
                        ],
                        [
                            "tf.concat(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branch1x1(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch1x1(x, training=training), self.branch7x7(x, training=training), self.branch7x7stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3(x, training=training), self.branch7x7(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.inception_c(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=False)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3stack(x, training=training), self.branch3x3(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "[self.branch3x3a(x, training=training), self.branch3x3b(x, training=training), self.branch3x3stack(x, training=training), self.branchpool(x, training=training)]",
                            "List"
                        ],
                        [
                            "self.stem(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_a(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.reduction_b(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.inception_resnet_c(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.flat(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Input_26": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ],
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ZeroPadding2D_35": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_37": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_80": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_119": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_121": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_123": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_125": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_130": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_132": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_138": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_159": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_161": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_163": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_168": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_172": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling2D_173": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_192": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_194": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_198": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_202": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_208": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_212": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_217": {
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_331": {
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_333": {
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_366": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_368": {
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/MobileNet.py": {
        "tensorflow": {
            "Sequential_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(32, (3, 3), strides=2, padding='same', activation='relu'), layers.SeparableConv2D(64, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.SeparableConv2D(128, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(128, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.SeparableConv2D(1256, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(256, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(512, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.SeparableConv2D(1024, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu'), layers.SeparableConv2D(1024, (3, 3), strides=1, padding='same', depth_multiplier=alpha, activation='relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AveragePooling2D_103": {
                "variable": {
                    "value": "self.ap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_104": {
                "variable": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_105": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_10": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_11": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_16": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_24": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_30": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_38": {
                "filters": {
                    "value": "1256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_44": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_52": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_58": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_64": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_70": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_76": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_82": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_90": {
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SeparableConv2D_96": {
                "filters": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/MobileNetV2.py": {
        "tensorflow": {
            "Lambda_6": {
                "function": {
                    "value": "lambda x: tf.nn.relu6(x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(in_channels * t, (1, 1), strides=1, padding='same'), layers.BatchNormalization(), ReLU6(), layers.DepthwiseConv2D((3, 3), strides=strides, padding='same'), layers.BatchNormalization(), ReLU6(), layers.Conv2D(out_channels, (1, 1), strides=1, padding='same'), layers.BatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.front",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.BatchNormalization(), ReLU6()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling2D_65": {
                "variable": {
                    "value": "self.ap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.front(inputs)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.stage5(x)",
                            "Call"
                        ],
                        [
                            "self.stage6(x)",
                            "Call"
                        ],
                        [
                            "self.stage7(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu6_6": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.front(inputs)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.stage5(x)",
                            "Call"
                        ],
                        [
                            "self.stage6(x)",
                            "Call"
                        ],
                        [
                            "self.stage7(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.ap(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "in_channels * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DepthwiseConv2D_23": {
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_28": {
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_49": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet.py": {
        "tensorflow": {
            "Sequential_9": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(kernels, (3, 3), strides=stride, padding='same'), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(kernels, (3, 3), strides=1, padding='same'), layers.BatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shorcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "shortcut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[layers.Conv2D(kernels, (1, 1), strides=stride), layers.BatchNormalization()]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layers.add([residual, x])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(kernels, (1, 1), strides=1, padding='same'), layers.BatchNormalization(), layers.Conv2D(kernels, (3, 3), strides=stride, padding='same'), layers.BatchNormalization(), layers.Conv2D(kernels * 4, (1, 1), strides=1, padding='same'), layers.BatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.shorcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(kernels * 4, (1, 1), strides=stride), layers.BatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(64, (3, 3), padding='same', use_bias=False), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_72": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "layers": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_30": {
                "x": {
                    "value": "[residual, x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_13": {
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_20": {
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "kernels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "kernels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_48": {
                "filters": {
                    "value": "kernels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_63": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_64": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/SEResNet.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(out_channels, (3, 3), strides=strides, padding='same'), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(out_channels * self.expansion, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_30": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Dense(out_channels * self.expansion // 4, activation='relu'), layers.Dense(out_channels * self.expansion, activation='sigmoid')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.excitation(squeeze, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.excitation(squeeze)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, residual.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(out_channels, (1, 1)), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(out_channels, (3, 3), strides=strides, padding='same'), layers.BatchNormalization(), layers.ReLU(), layers.Conv2D(out_channels * self.expansion, (1, 1)), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_69": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Dense(out_channels * self.expansion // r, activation='relu'), layers.Dense(out_channels * self.expansion, activation='sigmoid')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.excitation(squeeze, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.excitation(squeeze)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1, residual.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.front",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(64, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_112": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_46": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual * tf.broadcast_to(excitation, residual.shape) + shortcut",
                            "BinOp"
                        ],
                        [
                            "residual * tf.broadcast_to(excitation, residual.shape) + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.front(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage1(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage2(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage4(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual * tf.broadcast_to(excitation, residual.shape) + shortcut",
                            "BinOp"
                        ],
                        [
                            "residual * tf.broadcast_to(excitation, residual.shape) + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.front(inputs, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage1(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage2(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage3(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.stage4(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_124": {
                "layers": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2D_13": {
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNormalization_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_32": {
                "units": {
                    "value": "out_channels * self.expansion // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "units": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_to_44": {
                "input": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.excitation(squeeze, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.excitation(squeeze)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "residual.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_57": {
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_60": {
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "filters": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_71": {
                "units": {
                    "value": "out_channels * self.expansion // r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_73": {
                "units": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_78": {
                "filters": {
                    "value": "out_channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNormalization_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_to_90": {
                "input": {
                    "value": "excitation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.excitation(squeeze, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ],
                        [
                            "self.excitation(squeeze)",
                            "Call"
                        ],
                        [
                            "tf.reshape(excitation, (-1, 1, 1, residual.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "residual.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_102": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_103": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/SqueezeNet.py": {
        "tensorflow": {
            "Sequential_7": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(squeeze_channel, (1, 1)), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.expand_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(int(out_channels / 2), (1, 1)), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.expand_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Conv2D(int(out_channels / 2), (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.expand_1x1(x, training=training), self.expand_3x3(x, training=training)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), layers.Conv2D(96, (3, 3), padding='same'), layers.BatchNormalization(), layers.ReLU(), layers.MaxPooling2D((2, 2), strides=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.fire",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Fire(128, 16), Fire(128, 16), Fire(256, 32), Fire(256, 32), Fire(384, 48), Fire(384, 48), Fire(512, 64), Fire(512, 64)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_53": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AveragePooling2D_54": {
                "variable": {
                    "value": "self.ap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPooling2D_55": {
                "variable": {
                    "value": "self.mp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_56": {
                "variable": {
                    "value": "self.flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_8": {
                "filters": {
                    "value": "squeeze_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_13": {
                "filters": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_18": {
                "filters": {
                    "value": "int(out_channels / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_37": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPooling2D_41": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/VGG.py": {
        "tensorflow": {
            "Sequential_16": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Input(input_shape), features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[layers.Dense(4096, activation='relu'), layers.Dropout(0.5), layers.Dense(4096, activation='relu'), layers.Dropout(0.5), layers.Dense(num_classes, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "layers": {
                    "value": "nets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nets + [layers.ReLU()]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_17": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_22": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}