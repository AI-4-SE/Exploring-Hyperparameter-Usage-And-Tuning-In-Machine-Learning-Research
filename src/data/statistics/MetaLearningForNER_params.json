{
    "models/majority_classifier.py": {
        "sklearn": {
            "accuracy_score_40": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_y[relevant_indices]",
                            "Subscript"
                        ],
                        [
                            "true_labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(true_labels, majority_class)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_41": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_y[relevant_indices]",
                            "Subscript"
                        ],
                        [
                            "true_labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(true_labels, majority_class)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_42": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_y[relevant_indices]",
                            "Subscript"
                        ],
                        [
                            "true_labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(true_labels, majority_class)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_43": {
                "variable": {
                    "value": "f1_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_y[relevant_indices]",
                            "Subscript"
                        ],
                        [
                            "true_labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(true_labels, majority_class)",
                            "Call"
                        ],
                        [
                            "predictions.numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_33": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "full_like_35": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_y[relevant_indices]",
                            "Subscript"
                        ],
                        [
                            "true_labels.numpy()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "majority_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_counts.most_common(1)[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/nearest_neighbor.py": {
        "sklearn": {},
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_70": {
                "f": {
                    "value": "MetaLearningForNER/saved_models/SupervisedLearner-stable.h5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "input_ids[i, :len(sent_token_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_tokenizer.encode(sent, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/utils.py": {
        "sklearn": {
            "accuracy_score_31": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(predictions).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_32": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(predictions).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "averaging",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'binary' if binary else 'macro'",
                            "IfExp"
                        ]
                    ]
                },
                "labels": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_33": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(predictions).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "averaging",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'binary' if binary else 'macro'",
                            "IfExp"
                        ]
                    ]
                },
                "labels": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_34": {
                "variable": {
                    "value": "f1_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(predictions).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "averaging",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'binary' if binary else 'macro'",
                            "IfExp"
                        ]
                    ]
                },
                "labels": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(labels)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "stack_28": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(predictions).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_29": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=1 + EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_99": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=1 + EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_100": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(x * x - 1) / x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mdot(x, x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_135": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.sum((mat_1 - mat_2[i]) ** 2, dim=1) for i in range(mat_2.size(0))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "m * x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "[torch.sqrt(1.0 + torch.sum(x * x, 1, keepdim=True)), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "dist(x, y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_163": {
                "variable": {
                    "value": "mat_1_x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + mat_1.pow(2).sum(dim=1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_164": {
                "variable": {
                    "value": "mat_2_x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + mat_2.pow(2).sum(dim=1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "project(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_129": {
                "input": {
                    "value": "mdot(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "(mat_1 - mat_2[i]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "x * x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "input": {
                    "value": "1.0 + torch.sum(x * x, 1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sinh_124": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosh_136": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.abs(mdot(x, x)))",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm(y), min=EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosh_124": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sinh_136": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.abs(mdot(x, x)))",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm(y), min=EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_198": {
                "input": {
                    "value": "log_map(mean, projected)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/episode.py": {
        "torch": {}
    },
    "datasets/ner_dataset.py": {
        "torch": {}
    },
    "datasets/utils.py": {
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "support_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WordWSDDataset(sentences=[word_splits[word]['sentences'][i] for i in indices[start_index:start_index + n_support_examples]], labels=[word_splits[word]['labels'][i] for i in indices[start_index:start_index + n_support_examples]], n_classes=len(wsd_dataset.sense_inventory[word]))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(0, n_support_examples))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_support_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WordWSDDataset(sentences=[word_splits[word]['sentences'][i] for i in indices[start_index:start_index + n_query_examples]], labels=[word_splits[word]['labels'][i] for i in indices[start_index:start_index + n_query_examples]], n_classes=len(wsd_dataset.sense_inventory[word]))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(n_support_examples, n_support_examples + n_query_examples))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(n_support_examples, len(word_wsd_dataset)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_query_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_125": {
                "variable": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "word_wsd_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MetaWSDDataset(file_name)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(0, n_support_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "support_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WordWSDDataset(sentences=[word_splits[word]['sentences'][i] for i in indices[start_index:start_index + n_support_examples]], labels=[word_splits[word]['labels'][i] for i in indices[start_index:start_index + n_support_examples]], n_classes=len(wsd_dataset.sense_inventory[word]))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(0, n_support_examples))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_support_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WordWSDDataset(sentences=[word_splits[word]['sentences'][i] for i in indices[start_index:start_index + n_query_examples]], labels=[word_splits[word]['labels'][i] for i in indices[start_index:start_index + n_query_examples]], n_classes=len(wsd_dataset.sense_inventory[word]))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(n_support_examples, n_support_examples + n_query_examples))",
                            "Call"
                        ],
                        [
                            "Subset(word_wsd_dataset, range(n_support_examples, len(word_wsd_dataset)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_query_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_128": {
                "variable": {
                    "value": "test_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "word_wsd_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MetaWSDDataset(file_name)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(n_support_examples, n_support_examples + n_query_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_130": {
                "variable": {
                    "value": "test_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "word_wsd_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MetaWSDDataset(file_name)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(n_support_examples, len(word_wsd_dataset))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "support_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sup_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "6 * n_support_examples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda pb: prepare_bert_batch(pb)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "query_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "6 * n_query_examples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda pb: prepare_bert_batch(pb)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "support_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sup_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "6 * n_support_examples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "query_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "query_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "6 * n_query_examples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda pb: prepare_bert_batch(pb)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "prepare_batch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/wsd_dataset.py": {
        "torch": {}
    },
    "hyp_tune_wsd.py": {
        "torch": {
            "manual_seed_118": {
                "seed": {
                    "value": "42 + i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_models.py": {
        "torch": {
            "GRU_13": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_23": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_37": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_39": {
                "variable": {
                    "value": "(hidden, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tanh(hidden)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.embed_dim, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/baseline.py": {
        "torch": {
            "SummaryWriter_22": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/Baseline-' + date_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'Baseline-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_72": {
                "obj": {
                    "value": "self.baseline_model.learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'Baseline-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/maml.py": {
        "torch": {
            "SummaryWriter_27": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/MAML-' + date_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "episode_train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "episode_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpisodeDataset(train_episodes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.meta_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.utils.prepare_task_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_41": {
                "variable": {
                    "value": "self.n_devices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "meta_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.meta_model.learner.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.meta_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.meta_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_99": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "meta_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamW(learner_params, lr=self.meta_lr, weight_decay=self.meta_weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.Adam(learner_params, lr=self.meta_lr, weight_decay=self.meta_weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_190": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'MetaModel-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "self.meta_model.learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'MetaModel-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/proto_network.py": {
        "torch": {
            "SummaryWriter_24": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/ProtoNet-' + date_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'ProtoNet-{}.h5'.format(self.stamp))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.base_path, 'saved_models', 'Supervised-stable.h5')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_91": {
                "obj": {
                    "value": "self.proto_model.learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'ProtoNet-{}.h5'.format(self.stamp))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.base_path, 'saved_models', 'Supervised-stable.h5')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq_baseline.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.learner_loss[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.parameters() if p.requires_grad] + [p for p in self.output_layer.parameters() if p.requires_grad]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learner_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_104": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.learner.hidden_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nonzero_140": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.learner.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "os.path.join(self.base, 'saved_models', config['trained_baseline'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/seq_meta.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_75": {
                "variable": {
                    "value": "self.learner_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.learner.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.learner_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_240": {
                "variable": {
                    "value": "self.output_layer_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * prototypes",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "variable": {
                    "value": "self.output_layer_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.norm(prototypes, dim=1) ** 2",
                            "UnaryOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_outputs, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "self.learner_loss[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_252": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_label == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "linear_259": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.output_layer_weight + weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.output_layer_bias + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_254": {
                "variable": {
                    "value": "prototypes[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_repr[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "os.path.join(self.base_path, 'saved_models', config['trained_learner'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_138": {
                "variable": {
                    "value": "(output_weight_grad, output_bias_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ],
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[self.output_layer_weight, self.output_layer_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_185": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "norm_239": {
                "input": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_prototypes(support_repr, support_label, n_classes)",
                            "Call"
                        ],
                        [
                            "torch.zeros((num_outputs, n_dim), device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "(n_classes, self.learner.hidden_size // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_227": {
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "input_ids[i, :len(sent_token_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_tokenizer.encode(sent, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_177": {
                "variable": {
                    "value": "meta_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ],
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[p for p in flearner.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "self.proto_maml",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_179": {
                "variable": {
                    "value": "meta_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ],
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[p for p in flearner.parameters(time=0) if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "self.proto_maml",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_181": {
                "variable": {
                    "value": "proto_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ],
                        [
                            "self.learner_loss[episode.base_task](output, batch_y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[p for p in self.learner.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_230": {
                "*size": {
                    "value": "(n_classes, self.learner.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_232": {
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/seq_proto.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch_y.view(batch_size, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "data_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([x.contiguous().view(-1, n_dim) for x in data_repr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "data_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([y.view(-1) for y in data_label])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_outputs, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([q.sub(p).pow(2).sum(dim=-1) for p in prototypes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "self.loss_fn[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.learner.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_78": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nonzero_197": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_label == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_199": {
                "variable": {
                    "value": "prototypes[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_repr[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "os.path.join(self.base_path, 'saved_models', config['trained_learner'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nonzero_159": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y[bid] != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "input_ids[i, :len(sent_token_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_tokenizer.encode(sent, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq_proto_hyp.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_170": {
                "variable": {
                    "value": "data_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([x.view(-1, n_dim) for x in data_repr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "data_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([y.view(-1) for y in data_label])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_outputs, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([q.sub(p).pow(2).sum(dim=-1) for p in prototypes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "self.loss_fn[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.learner.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_77": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nonzero_176": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_label == c",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_178": {
                "variable": {
                    "value": "prototypes[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_repr[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "os.path.join(self.base_path, 'saved_models', config['trained_learner'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "input_ids[i, :len(sent_token_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_tokenizer.encode(sent, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq_supervised.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['learner_params']['dropout_ratio']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['learner_params']['embed_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['learner_params']['num_outputs']['ner']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "config.get('device', 'cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_len).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch_y).to(self.device)",
                            "Call"
                        ],
                        [
                            "batch_y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch_y.view(batch_size, seq_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "self.loss_fn[task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "learner_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.learner.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "learner_params + self.classifier.parameters()",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_87": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_150": {
                "variable": {
                    "value": "relevant_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_y[bid] != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_61": {
                "f": {
                    "value": "os.path.join(self.base_path, 'saved_models', config['trained_learner'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "os.path.join(self.base_path, 'saved_models', config['trained_classifier'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "vec_batch_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len, 300)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch_x), max_batch_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "input_ids[i, :len(sent_token_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sent_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_tokenizer.encode(sent, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/supervised.py": {
        "torch": {
            "SummaryWriter_19": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/Supervised-' + date_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'SupervisedLearner-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_85": {
                "f": {
                    "value": "classifier_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'SupervisedClassifier-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "self.model.learner.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'SupervisedLearner-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_67": {
                "obj": {
                    "value": "self.model.classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "classifier_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, 'saved_models', 'SupervisedClassifier-{}.h5'.format(self.stamp))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_ner.py": {
        "torch": {
            "manual_seed_49": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_ner_domaintransfer.py": {
        "torch": {
            "manual_seed_49": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_ner_supervised.py": {
        "torch": {
            "manual_seed_44": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_wsd.py": {
        "torch": {
            "manual_seed_48": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}