{
    "data.py": {
        "torch": {
            "sum_54": {
                "variable": {
                    "value": "pred_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(x.shape[0], dtype=bool)",
                            "Call"
                        ],
                        [
                            "torch.ones(x.shape[0], dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "np.ones(state.shape[0], dtype=bool)",
                            "Call"
                        ],
                        [
                            "torch.ones(state.shape[0], dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_55": {
                "variable": {
                    "value": "self_id_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pred_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(prediction_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "vector_from_i_to_attractor[self_id_rows, self_id_cols]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector_from_i_to_attractor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x[i]",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0).expand(pred_count, x.shape[0], 2) - x[prediction_mask].unsqueeze(1).expand(pred_count, x.shape[0], 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_217": {
                "variable": {
                    "value": "small_exist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_dt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(trajectory.shape[1], 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "prediction_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(vector_from_i_to_attractor.transpose(2, 1) * torch.div(physical_const * m, (dist ** 2 + softening_radius ** 2) ** (3 / 2))[:, np.newaxis, :]).transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(vector_from_i_to_attractor.transpose(2, 1) * torch.div(physical_const * m, dist ** 3).unsqueeze(1)).transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "prediction_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(m.unsqueeze(1), x_1, v_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "particle_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_212": {
                "variable": {
                    "value": "a_magnitude",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accelerations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_accelerations(m, x, physical_const=physical_const, box_size=box_size, softening=softening, softening_radius=softening_radius, charge=charge)",
                            "Call"
                        ],
                        [
                            "get_accelerations_gpu(m, x, physical_const=physical_const, box_size=box_size, softening=softening, softening_radius=softening_radius)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_237": {
                "variable": {
                    "value": "a_magnitude",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accelerations[particle_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_242": {
                "variable": {
                    "value": "small_exist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "small_dt_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ],
                        [
                            "dt_particle < dt_level",
                            "Compare"
                        ]
                    ]
                }
            },
            "set_default_dtype_343": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_344": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fixed_initial_state.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_930": {
                "variable": {
                    "value": "self.trajectories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.trajectory_count, self.trajectory_len, self.n_particles, self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "input": {
                    "value": "torch.div(softening_radius, a_magnitude)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "input": {
                    "value": "torch.div(softening_radius, a_magnitude)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_974": {
                "variable": {
                    "value": "self.trajectories[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "trajectory.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1091": {
                "variable": {
                    "value": "trajectory_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.trajectory_tensor_folder, f'simulated_trajectory_{trajectory_idx}_{t_idx}.tpkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1092": {
                "variable": {
                    "value": "trajectory_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.trajectory_tensor_folder, f'simulated_trajectory_{trajectory_idx}_{t_idx + self.target_step}.tpkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_213": {
                "input": {
                    "value": "softening_radius",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "a_magnitude",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.linalg.norm(accelerations, axis=1)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(accelerations[particle_mask], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(accelerations, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(accelerations[particle_mask], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_238": {
                "input": {
                    "value": "softening_radius",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "a_magnitude",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.linalg.norm(accelerations, axis=1)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(accelerations[particle_mask], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(accelerations, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(accelerations[particle_mask], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_355": {
                "*size": {
                    "value": "initial_state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_357": {
                "*size": {
                    "value": "initial_state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1035": {
                "variable": {
                    "value": "self.trajectories[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trajectory.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1095": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.graphs[trajectory_idx, t_idx].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1097": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.graph_tensor_folder, f'trajectory_{trajectory_idx}_graph_{t_idx}.tpkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1057": {
                "ndarray": {
                    "value": "np.load(os.path.join(self.split_folder, f'simulated_trajectory_{idx}.npy')).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1065": {
                "ndarray": {
                    "value": "graph[:, 1].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1102": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.graphs[trajectory_idx][t_idx].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1108": {
                "variable": {
                    "value": "(graph, assignment, super_vertex_features, super_graph)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.graph_tensor_folder, f'trajectory_{trajectory_idx}_timestep_{t_idx}.tpkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_72": {
                "input": {
                    "value": "physical_const * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "dist ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1078": {
                "ndarray": {
                    "value": "graph[:, 1].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_70": {
                "input": {
                    "value": "physical_const * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(dist ** 2 + softening_radius ** 2) ** (3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_1012": {
                "obj": {
                    "value": "torch.from_numpy(tensor.astype(np.int64))",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tensor_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_graph_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_timestep_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.trajectory_tensor_folder, f'simulated_trajectory_{i}_{t}.tpkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1046": {
                "obj": {
                    "value": "torch.from_numpy(tensor.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tensor_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_graph_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_timestep_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.trajectory_tensor_folder, f'simulated_trajectory_{i}_{t}.tpkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1012": {
                "ndarray": {
                    "value": "tensor.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1016": {
                "ndarray": {
                    "value": "tensor.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1028": {
                "obj": {
                    "value": "timestep_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tensor_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_graph_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.graph_tensor_folder, f'trajectory_{i}_timestep_{t}.tpkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.trajectory_tensor_folder, f'simulated_trajectory_{i}_{t}.tpkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1046": {
                "ndarray": {
                    "value": "tensor.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1019": {
                "ndarray": {
                    "value": "tensor.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1022": {
                "ndarray": {
                    "value": "tensor.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1025": {
                "ndarray": {
                    "value": "tensor.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TrajectoryDataset(folder_path=os.path.join(data_dir, dataset), split='test', rollout=True, graph_type=graph_type, target_step=target_step, pre_load_graphs=pre_load_graphs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_into_one_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, experiment_dir, model_dataset, model_file)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, model_dataset, model_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "current_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_state[:, :, :-4], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "mean_26": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.global_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(arg, axis=1) for arg in args]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "global_output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "V_no_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mass_charge, V[:, :, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[:, :, -4:-2], momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_245": {
                "variable": {
                    "value": "velocity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_canonical_coordinates[:, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "mass_charge[:, :, 0].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_canonical_coordinates[:, :, :2], velocity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E_to_super.size(0), V_supers[0].size(1), E_to_super.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "E_to_super.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_supers[0][:, :, self.non_pos_indices], V_lower]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "V_upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_current[:, :, :-V_upper.size(2)], V_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "E_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[E_n, E_n_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "R_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_r, R_super_to_vertex_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "node_output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "variable": {
                    "value": "pos_super",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, upper_count, pos.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "pos_weighted.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "momentum_super",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, upper_count, momentum.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "momentum.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "variable": {
                    "value": "cell_mass_charge",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mass_charge.size(0), upper_count, mass_charge.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "mass_charge.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "V_no_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mass_charge, V[:, :, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E_to_super.size(0), V_supers[0].size(1), E_to_super.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "E_to_super.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_super[:, :, self.non_pos_indices], V_lower]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "V_upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_current[:, :, :-V_upper.size(2)], V_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "E_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[E_n, E_n_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "R_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_r, R_super_to_vertex_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[:, :, -4:-2], momentum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_576": {
                "variable": {
                    "value": "velocity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_canonical_coordinates[:, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "mass_charge[:, :, 0].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_canonical_coordinates[:, :, :2], velocity]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.edge_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.edge_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_no_pos.gather(1, R_s.expand(R_s.size(0), R_s.size(1), V_no_pos.size(2))), V_no_pos.gather(1, R_r.expand(R_r.size(0), R_r.size(1), V_no_pos.size(2))), V_pos.gather(1, R_s.expand(R_s.size(0), R_s.size(1), V_pos.size(2))) - V_pos.gather(1, R_r.expand(R_r.size(0), R_r.size(1), V_pos.size(2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_no_pos.gather(1, R_s.expand(R_s.size(0), R_s.size(1), V_no_pos.size(2))), different_reciever.gather(1, R_r.expand(R_r.size(0), R_r.size(1), different_reciever.size(2))), V_pos.gather(1, R_s.expand(R_s.size(0), R_s.size(1), V_pos.size(2))) - different_reciever_pos.gather(1, R_r.expand(R_r.size(0), R_r.size(1), different_reciever_pos.size(2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[E, u.unsqueeze(2).expand(E.size(0), E.size(1), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.node_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.node_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E_n.view(V.size(0), V.size(1), E_n.size(1) // V.size(1), E_n.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E_n.size(0), V.size(1), E_n.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "E_n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u.unsqueeze(2).expand(out.size(0), out.size(1), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, u.unsqueeze(2).expand(out.size(0), out.size(1), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_225": {
                "tensors": {
                    "value": "[partial_derivatives[:, :, 2:], partial_derivatives[:, :, :2] * -1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E_to_super.size(0), V_super.size(1), E_to_super.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "E_to_super.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_super[:, :, self.non_pos_indices], V_lower]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "E_current_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[E_current_n, upper_influence]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "R_r_super",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_r_super, R_super_to_vertex_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "V_upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_current[:, :, :-V_upper.size(2)], V_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_441": {
                "tensors": {
                    "value": "[cell_mass_charge, pos_super, momentum_super]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_484": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E_to_super.size(0), V_super.size(1), E_to_super.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "E_to_super.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "V_lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_super[:, :, self.non_pos_indices], V_lower]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "E_current_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[E_current_n, upper_influence]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "R_r_super",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_r_super, R_super_to_vertex_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "V_upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V_current[:, :, :-V_upper.size(2)], V_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_556": {
                "tensors": {
                    "value": "[partial_derivatives[:, :, 2:], partial_derivatives[:, :, :2] * -1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_222": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([state[:, :, -4:-2], momentum], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([state[:, :, -4:-2], momentum], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_553": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([state[:, :, -4:-2], momentum], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([state[:, :, -4:-2], momentum], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_149": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TrajectoryDataset(folder_path=os.path.join(data_dir, dataset), split='train', graph_type=graph_type, pre_load_graphs=pre_load_graphs, target_step=target_step)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_loader_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_into_one_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TrajectoryDataset(folder_path=os.path.join(data_dir, dataset), split='validation', graph_type=graph_type, pre_load_graphs=pre_load_graphs, target_step=target_step)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "data_loader_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_into_one_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_175": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if not cpu and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ExponentialLR_179": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.97725",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SummaryWriter_221": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, experiment_dir, dataset, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(log_dir, dataset, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_145": {
                "int": {
                    "value": "torch.get_num_threads()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, experiment_dir, dataset, resume_checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_num_threads_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_192": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, model_name + '_checkpoint.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_save_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "R_s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_particles * edges_per_node",
                            "BinOp"
                        ],
                        [
                            "n_particles * n_neighbours",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "R_r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_particles * edges_per_node",
                            "BinOp"
                        ],
                        [
                            "n_particles * n_neighbours",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "R_s_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_state.size(0)",
                            "Call"
                        ],
                        [
                            "len(transposed[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_particles * edges_per_node",
                            "BinOp"
                        ],
                        [
                            "n_particles * n_neighbours",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "R_r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_state.size(0)",
                            "Call"
                        ],
                        [
                            "len(transposed[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_particles * edges_per_node",
                            "BinOp"
                        ],
                        [
                            "n_particles * n_neighbours",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "w_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "arr * weights.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "total_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "super_vertex_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_cells * n_edges_per_super_vertex, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_191": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n_particles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_state.size(1)",
                            "Call"
                        ],
                        [
                            "current_state.shape[0]",
                            "Subscript"
                        ],
                        [
                            "transposed[0][0].size(0)",
                            "Call"
                        ],
                        [
                            "list(accumulate([0] + [n_particles] * (batch_size - 1)))",
                            "Call"
                        ],
                        [
                            "n_super_nodes",
                            "Name"
                        ],
                        [
                            "n_super_nodes",
                            "Name"
                        ],
                        [
                            "states.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_231": {
                "variable": {
                    "value": "cell_assignments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cell_assignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cell_assignments)",
                            "Call"
                        ],
                        [
                            "cell_assignments[cell_assignments[:, 1].argsort()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_232": {
                "variable": {
                    "value": "super_vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "super_vertices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(super_vertices)",
                            "Call"
                        ],
                        [
                            "[super_vertices.unsqueeze(0)]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "non_empty_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "non_empty_cells",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(non_empty_cells, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_236": {
                "variable": {
                    "value": "new_cell_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "non_empty_cells.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_31": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "topk_71": {
                "variable": {
                    "value": "(neighbour_dist, neighbour_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(dist, dim=-1, p=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "n_neighbours",
                    "type": "Variable",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "R_r_idx[:, i * n_neighbours:(i + 1) * n_neighbours]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[i] * n_neighbours",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "R_r_idx[:, i * n_neighbours:(i + 1) * n_neighbours]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "extended_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cells[i] for i in extended_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "assingments_to_current_level_super_vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "assingments_to_current_level_super_vertices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(assingments_to_current_level_super_vertices)",
                            "Call"
                        ],
                        [
                            "assingments_to_current_level_super_vertices[assingments_to_current_level_super_vertices[:, 1].argsort()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_300": {
                "variable": {
                    "value": "current_level_super_vertex_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_level_super_vertex_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(current_level_super_vertex_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_301": {
                "variable": {
                    "value": "current_level_super_vertex_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_level_super_vertex_edges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(current_level_super_vertex_edges)",
                            "Call"
                        ],
                        [
                            "current_level_super_vertex_edges[(current_level_super_vertex_edges[:, :, None] == non_empty_clusters).any(-1).all(dim=1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "non_empty_clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "non_empty_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(non_empty_clusters, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_305": {
                "variable": {
                    "value": "new_current_level_super_vertex_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "non_empty_clusters.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_336": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_336": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_337": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "R_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[el + n_particles * i for (i, el) in enumerate(transposed[2])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "variable": {
                    "value": "R_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "R_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[el + n_particles * i for (i, el) in enumerate(transposed[3])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "variable": {
                    "value": "R_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_71": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pbc_diff(current_state[:, indices, -4:-2], current_state[:, i, -4:-2].unsqueeze(1), box_size=box_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_217": {
                "tensors": {
                    "value": "[other_cell_ids, torch.tensor([q], device=device, dtype=torch.long).repeat(n_edges_per_super_vertex)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "[torch.tensor([q], device=device).repeat(cell.size(0)), cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "[torch.sum(particles_in_cell[:, 0], dim=0, keepdims=True), weighted_mean(particles_in_cell[:, 1:], weights=particles_in_cell[:, 0], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_275": {
                "start": {
                    "value": "len(lower_level_super_vertex_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_177": {
                "start": {
                    "value": "row_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 ** levels",
                            "BinOp"
                        ],
                        [
                            "row_len",
                            "MethodArgument"
                        ],
                        [
                            "row_len",
                            "MethodArgument"
                        ],
                        [
                            "row_len",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "input": {
                    "value": "cluster_row_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "row_len // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "data": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_296": {
                "tensors": {
                    "value": "[torch.sum(cells_in_cluster[:, 0], dim=0, keepdims=True), weighted_mean(cells_in_cluster[:, 1:], weights=cells_in_cluster[:, 0], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "[el[level] + torch.tensor([n_super_nodes[i], n_particles[i]], dtype=torch.long) for (i, el) in enumerate(transposed[4])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_352": {
                "tensors": {
                    "value": "[el[level] for el in transposed[5]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "[el[level] + n_super_nodes[i] for (i, el) in enumerate(transposed[6])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_354": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "[torch.from_numpy(el[level].astype(np.int64)) + torch.tensor([n_super_nodes[i], n_particles[i]], dtype=torch.long) for (i, el) in enumerate(transposed[4])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_361": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "[torch.from_numpy(el[level]).float() for el in transposed[5]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_362": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "tensors": {
                    "value": "[torch.from_numpy(el[level].astype(np.int64)) + n_super_nodes[i] for (i, el) in enumerate(transposed[6])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_364": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "[0, 0, row_len, row_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_205": {
                "tensors": {
                    "value": "torch.meshgrid(cell, extended_cell)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "particles_in_cell[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_290": {
                "tensors": {
                    "value": "[cells_in_neighboring_clusters, torch.tensor([c], device=device, dtype=torch.long).repeat(len(cells_in_neighboring_clusters))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_292": {
                "tensors": {
                    "value": "[torch.tensor([c], device=device, dtype=torch.long).repeat(len(cluster)), cluster]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_205": {
                "*tensors": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "indexing": {
                    "value": "extended_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([cells[i] for i in extended_ids], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_216": {
                "data": {
                    "value": "extended_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_neighboring_ids(q, row_len=row_len, n_cells=n_cells)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_296": {
                "input": {
                    "value": "cells_in_cluster[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "data": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "neighbour_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_neighboring_ids(c, row_len=current_level_row_len, n_cells=n_current_level_clusters)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "ndarray": {
                    "value": "el[level]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "[n_super_nodes[i], n_particles[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "ndarray": {
                    "value": "el[level].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_361": {
                "data": {
                    "value": "[n_super_nodes[i], n_particles[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_364": {
                "ndarray": {
                    "value": "el[level].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}