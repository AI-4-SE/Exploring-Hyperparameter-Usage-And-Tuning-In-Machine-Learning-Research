{
    "encode_features.py": {
        "sklearn": {
            "KMeans_51": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "possible_values": [
                        [
                            "opt.n_clusters",
                            "Attribute"
                        ],
                        [
                            "min(feat.shape[0], opt.n_clusters)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "synthesize.py": {
        "tensorflow": {}
    },
    "util/visualizer.py": {
        "tensorflow": {
            "FileWriter_26": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "possible_values": []
                }
            }
        }
    },
    "data/base_dataset.py": {
        "torch": {
            "BaseDataset_9": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            }
        }
    },
    "data/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {
            "ImageFolder_37": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.imgs": {
                    "value": "imgs",
                    "possible_values": [
                        [
                            "make_dataset(root)",
                            "Call"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.return_paths": {
                    "value": "return_paths",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loader": {
                    "value": "loader",
                    "possible_values": [
                        [
                            "default_loader",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "BaseModel_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "pretrained_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "DataParallel_20": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "UIModel()",
                            "Call"
                        ],
                        [
                            "Pix2PixHDModel()",
                            "Call"
                        ],
                        [
                            "InferenceModel()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=opt.gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "GANLoss_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.real_label": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.fake_label": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.Tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "torch.FloatTensor",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "VGGLoss_114": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "L1Loss_118": {
                    "variable": {
                        "value": "self.criterion",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "LocalEnhancer_131": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_local_enhancers": {
                    "value": "n_local_enhancers",
                    "possible_values": [
                        [
                            "range(1, self.n_local_enhancers + 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_141": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model_global",
                        "possible_values": []
                    }
                },
                "AvgPool2d_167": {
                    "variable": {
                        "value": "self.downsample",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "[1, 1]",
                        "possible_values": []
                    },
                    "count_include_pad": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "GlobalGenerator_185": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_190": {
                    "variable": {
                        "value": "activation",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Sequential_210": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                }
            },
            "ResnetBlock_216": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Encoder_257": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_nc": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "Sequential_277": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                }
            },
            "MultiscaleDiscriminator_294": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_D": {
                    "value": "num_D",
                    "possible_values": [
                        [
                            "self.num_D",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_layers": {
                    "value": "n_layers",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.getIntermFeat": {
                    "value": "getIntermFeat",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "AvgPool2d_310": {
                    "variable": {
                        "value": "self.downsample",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "[1, 1]",
                        "possible_values": []
                    },
                    "count_include_pad": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "NLayerDiscriminator_336": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.getIntermFeat": {
                    "value": "getIntermFeat",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_layers": {
                    "value": "n_layers",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "nf": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "nf_prev": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                }
            },
            "Vgg19_388": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_392": {
                    "variable": {
                        "value": "self.slice1",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_393": {
                    "variable": {
                        "value": "self.slice2",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_394": {
                    "variable": {
                        "value": "self.slice3",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_395": {
                    "variable": {
                        "value": "self.slice4",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_396": {
                    "variable": {
                        "value": "self.slice5",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_80": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_82": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "*args": {
                    "value": "*conv_block",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence_stream",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_192": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_209": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_209": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_262": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_262": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReLU_263": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_276": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_276": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_147": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf_global",
                    "possible_values": [
                        [
                            "ngf * 2 ** n_local_enhancers",
                            "BinOp"
                        ],
                        [
                            "ngf * 2 ** (n_local_enhancers - n)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "ngf_global",
                    "possible_values": [
                        [
                            "ngf * 2 ** n_local_enhancers",
                            "BinOp"
                        ],
                        [
                            "ngf * 2 ** (n_local_enhancers - n)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf_global * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_157": {
                "in_channels": {
                    "value": "ngf_global * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf_global",
                    "possible_values": [
                        [
                            "ngf * 2 ** n_local_enhancers",
                            "BinOp"
                        ],
                        [
                            "ngf * 2 ** (n_local_enhancers - n)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "*args": {
                    "value": "*model_downsample",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "*model_upsample",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_207": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_225": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_241": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_268": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_273": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_274": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_290": {
                "variable": {
                    "value": "mean_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ins",
                    "possible_values": [
                        [
                            "outputs[indices[:, 0] + b, indices[:, 1] + j, indices[:, 2], indices[:, 3]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_344": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_344": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "nf_prev",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_360": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_162": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_162": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_227": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_243": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "in_channels": {
                    "value": "nf_prev",
                    "possible_values": [
                        [
                            "nf",
                            "Name"
                        ],
                        [
                            "nf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "ndf",
                            "Name"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_352": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_366": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "*args": {
                    "value": "*sequence[n]",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pixHD_model.py": {
        "torch": {
            "cat_145": {
                "variable": {
                    "value": "input_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_label, test_image.detach())",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Adam_279": {
                "variable": {
                    "value": "self.optimizer_G",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + list(self.netE.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "L1Loss_77": {
                "variable": {
                    "value": "self.criterionFeat",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "self.optimizer_G",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + list(self.netE.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "self.optimizer_D",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + list(self.netE.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ],
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "input_label",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_label, edge_map)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "input_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_label, feat_map)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "input_concat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_label, feat_map)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(input_label, fake_image)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/ui_model.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(img, np.int32, copy=False)",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "idx_src",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.transpose(mask, (2, 0, 1))[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(mask, (2, 0, 1))[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "np.transpose(self.mask[0].cpu().float().numpy(), (1, 2, 0)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_195": {
                "variable": {
                    "value": "idx_src",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "net_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(net_input, feat_map)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "np.transpose(mask, (2, 0, 1))[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(mask, (2, 0, 1))[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "np.transpose(self.mask[0].cpu().float().numpy(), (1, 2, 0)).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nonzero_317": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "(self.input_label, self.edge_map)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_83": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "possible_values": []
                }
            }
        }
    },
    "precompute_feature_maps.py": {
        "torch": {
            "Upsample_32": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "test_one.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "mean_65": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "train_mirror.py": {
        "torch": {
            "mean_67": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "util/image_pool.py": {
        "torch": {
            "unsqueeze_16": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "images.data",
                            "Attribute"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "return_images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "from_numpy_88": {
                "variable": {
                    "value": "self.cmap",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "possible_values": []
                }
            }
        }
    }
}