{
    "data.py": {
        "torch": {
            "load_154": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "corpus_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'corpus.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_159": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(corpus_path)",
                            "Call"
                        ],
                        [
                            "Corpus(args.data, include_eos)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "corpus_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data, 'corpus.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/gen_data_collisions.py": {
        "torch": {
            "round_35": {
                "variable": {
                    "value": "self.particle_grid_locations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.particle_locations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "self.particle_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_particles,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "self.crossing_history",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_colors, num_colors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dlength * l",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dlength * l",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_71": {
                "variable": {
                    "value": "self.particle_grid_locations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.particle_locations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "(num_particles, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "(num_particles, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_73": {
                "variable": {
                    "value": "self.particle_colors[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_100": {
                "variable": {
                    "value": "(cp, cq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distributed.py": {
        "torch": {
            "DistributedDataParallel_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_21": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_209": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_246": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_252": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=args.lr, momentum=args.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.nepochs * args.nbatches",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_248": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_256": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=args.lr, momentum=args.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda ep: min(1, ep / args.lr_warmup)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/compressive.py": {
        "torch": {
            "pad_46": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.view(B, M // step, step, -1)",
                            "Call"
                        ],
                        [
                            "X.transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, [0, 1])",
                            "Call"
                        ],
                        [
                            "unskew(X)",
                            "Call"
                        ],
                        [
                            "X.view(B, step, M // step, -1)",
                            "Call"
                        ],
                        [
                            "X.transpose(1, 2).flatten(1, 2)",
                            "Call"
                        ],
                        [
                            "X.view(B, M // step, step, -1)",
                            "Call"
                        ],
                        [
                            "X.transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "skew(X, pad_value)",
                            "Call"
                        ],
                        [
                            "X[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, step, M // step, -1)",
                            "Call"
                        ],
                        [
                            "X.transpose(1, 2).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "cattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ckey.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cattn, attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "unskew(attn)",
                            "Call"
                        ],
                        [
                            "torch.cat([cattn, attn], dim=-1)",
                            "Call"
                        ],
                        [
                            "attn + torch.matmul(query, self.key_pe)",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "attn[:, :, C + 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.proj_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_183": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_184": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_217": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "h_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_prev[l], h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "c_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_prev[l], new_compress]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_layer(l).get_cache_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args.compress_size // self.args.compress_rate",
                            "BinOp"
                        ],
                        [
                            "self.args.compress_size // self.args.compress_rate",
                            "BinOp"
                        ],
                        [
                            "self.args.compress_size // self.args.compress_rate",
                            "BinOp"
                        ],
                        [
                            "self.args.compress_size // self.args.compress_rate",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.key_pe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "input": {
                    "value": "cattn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, ckey.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "unskew_step(cattn, c)",
                            "Call"
                        ],
                        [
                            "attn[:, :, :C + 1]",
                            "Subscript"
                        ],
                        [
                            "skew_step(cattn, c, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cvalue",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_val(cvalue)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(cvalue)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "input": {
                    "value": "attn_cont",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "skew(attn, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_val(value)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/expire_span.py": {
        "torch": {
            "Linear_93": {
                "variable": {
                    "value": "self.span_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_169": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_182": {
                "variable": {
                    "value": "mask_causal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.mem_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "max_mem_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.attn_lim + args.mem_sz",
                            "BinOp"
                        ],
                        [
                            "max_mem_size + args.expire_span_ramp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_196": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "attn_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_pe",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_219": {
                "variable": {
                    "value": "mask_pre",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attn + mask_pre",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * mask",
                            "BinOp"
                        ],
                        [
                            "attn / (attn.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_223": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attn + mask_pre",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * mask",
                            "BinOp"
                        ],
                        [
                            "attn / (attn.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attn + mask_pre",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn * mask",
                            "BinOp"
                        ],
                        [
                            "attn / (attn.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_val(value)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "self.proj_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_293": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_294": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_326": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_351": {
                "variable": {
                    "value": "counter",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "-M + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "init_cache_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(self.get_layer(l).args.attn_lim, self.args.mem_sz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_434": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.mem_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.args.mem_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "input": {
                    "value": "max_span",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.span_predictor(memory_hid / self.args.expire_span_pre_div).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(max_span) * self.size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_135": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "M - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "[h_prev[l], h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "[c_prev[l], counter]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_396": {
                "variable": {
                    "value": "span_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "spans + self.args.expire_span_ramp",
                            "BinOp"
                        ],
                        [
                            "spans - M",
                            "BinOp"
                        ],
                        [
                            "(spans > 0).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/feedback.py": {
        "torch": {
            "tensor_58": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pos, sz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "attn + torch.bmm(key, query.unsqueeze(2)).squeeze(2)",
                            "BinOp"
                        ],
                        [
                            "attn + torch.mm(query, self.key_pe_trimmed)",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.adaptive_span(attn)",
                            "Call"
                        ],
                        [
                            "attn / (attn.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.proj_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_196": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_197": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_224": {
                "variable": {
                    "value": "self.single_memory_attn_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, merged_layer_count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_245": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "h_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_all)",
                            "Call"
                        ],
                        [
                            "h_all.view(h_all.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[h_single for _ in range(self.args.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "softmax_254": {
                "variable": {
                    "value": "single_memory_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.single_memory_attn_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_255": {
                "variable": {
                    "value": "h_single",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "single_memory_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(self.single_memory_attn_params, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(h_all)",
                            "Call"
                        ],
                        [
                            "h_all.view(h_all.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[h_single for _ in range(self.args.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_387": {
                "variable": {
                    "value": "h_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_out_block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "hid_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_cache['hid_prev'][l]] + h_cache['hid'][l]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.attn_lim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_143": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_layer(l).attn.proj_key(h)",
                            "Call"
                        ],
                        [
                            "key.view(h.size(0), -1, self.args.head_dim)",
                            "Call"
                        ],
                        [
                            "SlidingWindowBuffer(key, key.size(0) + self.args.mem_sz, windows)",
                            "Call"
                        ],
                        [
                            "self.get_layer(l).attn.proj_key(h).view(1, -1, self.args.head_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "query.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_144": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "query.view(-1, self.args.head_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.key_pe_trimmed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_154": {
                "input": {
                    "value": "attn.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_154": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "merged_layer_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.nlayers + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "merged_layer_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.nlayers + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/transformer_seq.py": {
        "torch": {
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "unskew(attn)",
                            "Call"
                        ],
                        [
                            "attn + torch.matmul(query, key_pe)",
                            "BinOp"
                        ],
                        [
                            "attn / math.sqrt(self.args.head_dim)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.adaptive_span(attn)",
                            "Call"
                        ],
                        [
                            "attn / (attn.sum(-1, keepdim=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.proj_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.proj_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.proj_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_dim * args.nheads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_155": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_156": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "h_memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_prev, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.out_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.vocab_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_202": {
                "variable": {
                    "value": "self.in_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.vocab_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_194": {
                "input": {
                    "value": "self.out_emb(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_208": {
                "variable": {
                    "value": "self.out_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_layer(l).get_cache_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_query(query)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_pe",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "attn_cont",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "skew(attn, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.proj_val(value)",
                            "Call"
                        ],
                        [
                            "self.head_reshape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "[h_prev[li][:, -cache_size + M:, :], h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "pad_18": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(X, (0, M + 1), value=pad_value)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "X[:, :-M]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, M, M + L)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, (0, M))",
                            "Call"
                        ],
                        [
                            "X.view(B, M, M + L + 1)",
                            "Call"
                        ],
                        [
                            "X[:, :, :L]",
                            "Subscript"
                        ],
                        [
                            "torch.randn(*sizes)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, M + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_30": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(X, (0, M + 1), value=pad_value)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "X[:, :-M]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, M, M + L)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, (0, M))",
                            "Call"
                        ],
                        [
                            "X.view(B, M, M + L + 1)",
                            "Call"
                        ],
                        [
                            "X[:, :, :L]",
                            "Subscript"
                        ],
                        [
                            "torch.randn(*sizes)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "data": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(X, (0, M + 1), value=pad_value)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "X[:, :-M]",
                            "Subscript"
                        ],
                        [
                            "X.view(B, M, M + L)",
                            "Call"
                        ],
                        [
                            "X.view(B, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(X, (0, M))",
                            "Call"
                        ],
                        [
                            "X.view(B, M, M + L + 1)",
                            "Call"
                        ],
                        [
                            "X[:, :, :L]",
                            "Subscript"
                        ],
                        [
                            "torch.randn(*sizes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/adaptive_mask.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.size_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape) + init_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_28": {
                "variable": {
                    "value": "mask_template",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1 - size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "modules/adaptive_span.py": {
        "torch": {
            "cat_57": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, dim=0) * args.attn_lim",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_130": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "key[:, trim_len_cache:, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(key, [0, 0, -trim_len_cache, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, -trim_len_cache, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value[:, trim_len_cache:, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(value, [0, 0, -trim_len_cache, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, -trim_len_cache, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "modules/ffn.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.inner_hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.inner_hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hid_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h1)",
                            "Call"
                        ],
                        [
                            "self.dropout(h1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "nll_loss_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Y.view(-1)",
                            "Call"
                        ],
                        [
                            "Y.view(-1)",
                            "Call"
                        ],
                        [
                            "data[:, offset + 1:offset + args.mem_sz + 1]",
                            "Subscript"
                        ],
                        [
                            "labels[:, offset:offset + args.mem_sz]",
                            "Subscript"
                        ],
                        [
                            "Y.to(args.device).contiguous().long() if args.lazy_load_data else Y.contiguous().long()",
                            "IfExp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_60": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Y.view(-1)",
                            "Call"
                        ],
                        [
                            "Y.view(-1)",
                            "Call"
                        ],
                        [
                            "data[:, offset + 1:offset + args.mem_sz + 1]",
                            "Subscript"
                        ],
                        [
                            "labels[:, offset:offset + args.mem_sz]",
                            "Subscript"
                        ],
                        [
                            "Y.to(args.device).contiguous().long() if args.lazy_load_data else Y.contiguous().long()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "aux_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "aux_loss.mean()",
                            "Call"
                        ],
                        [
                            "aux_loss.view(-1)",
                            "Call"
                        ],
                        [
                            "aux_loss * mask",
                            "BinOp"
                        ],
                        [
                            "aux_loss.sum() / (mask.sum() + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "aux_loss.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_62": {
                "obj": {
                    "value": "aux_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "aux_loss.mean()",
                            "Call"
                        ],
                        [
                            "aux_loss.view(-1)",
                            "Call"
                        ],
                        [
                            "aux_loss * mask",
                            "BinOp"
                        ],
                        [
                            "aux_loss.sum() / (mask.sum() + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "aux_loss.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__121": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/checkpoint.py": {
        "torch": {
            "load_17": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_path(args, path)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/logger.py": {
        "torch": {
            "SummaryWriter_25": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.plot_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_56": {
                "obj": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_60": {
                "obj": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(vals))",
                            "Call"
                        ],
                        [
                            "X.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "range(len(vals))",
                            "Call"
                        ],
                        [
                            "X.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_67": {
                "obj": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_71": {
                "obj": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(vals))",
                            "Call"
                        ],
                        [
                            "X.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "range(len(vals))",
                            "Call"
                        ],
                        [
                            "X.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_78": {
                "obj": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vals.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}