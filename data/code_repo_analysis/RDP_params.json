{
    "RDP-Anomaly/model.py": {
        "sklearn": {
            "sample_without_replacement_231": {
                "variable": {
                    "value": "sid",
                    "type": "variable",
                    "possible_values": []
                },
                "n_population": {
                    "value": "x_train.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "subsample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(seeds[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "KDTree_233": {
                "variable": {
                    "value": "kdt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "subsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train[sid]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_144": {
                "variable": {
                    "value": "self.r_net_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.r_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "gap_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_175": {
                "variable": {
                    "value": "pair_wise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_target, p=1, dim=1) * F.normalize(r_target_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(r_target, p=1, dim=1) * F.normalize(r_target_random, p=1, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "x_y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_pred, p=1, dim=1) * F.normalize(r_pred_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(r_pred, p=1, dim=1) * F.normalize(r_pred_random, p=1, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_199": {
                "variable": {
                    "value": "gap_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(r_pred, r_target, reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_206": {
                "variable": {
                    "value": "pair_wise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(xy, x_y_, reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_258": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "self.r_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "MAX_GRAD_NORM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "save_255": {
                "obj": {
                    "value": "dict_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'r_net': self.r_net.state_dict(), 'r_target_net': self.r_target_net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_199": {
                "input": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x)",
                            "Call"
                        ],
                        [
                            "self.r_net(x)",
                            "Call"
                        ],
                        [
                            "self.r_net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "r_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_target_net(x).detach()",
                            "Call"
                        ],
                        [
                            "self.r_target_net(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_204": {
                "input": {
                    "value": "r_target_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_target_net(x_random).detach()",
                            "Call"
                        ],
                        [
                            "self.r_target_net(x_random).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_205": {
                "input": {
                    "value": "r_pred_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x_random)",
                            "Call"
                        ],
                        [
                            "self.r_net(x_random)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_206": {
                "input": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_target, p=1, dim=1) * F.normalize(r_target_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(r_target, p=1, dim=1) * F.normalize(r_target_random, p=1, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "x_y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_pred, p=1, dim=1) * F.normalize(r_pred_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(r_pred, p=1, dim=1) * F.normalize(r_pred_random, p=1, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[out_c]",
                            "List"
                        ],
                        [
                            "[out_c]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[out_c]",
                            "List"
                        ],
                        [
                            "[out_c]",
                            "List"
                        ]
                    ]
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "dropout_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_r",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_92": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_168": {
                "input": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x)",
                            "Call"
                        ],
                        [
                            "self.r_net(x)",
                            "Call"
                        ],
                        [
                            "self.r_net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "r_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_target_net(x).detach()",
                            "Call"
                        ],
                        [
                            "self.r_target_net(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_173": {
                "input": {
                    "value": "r_target_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_target_net(x_random).detach()",
                            "Call"
                        ],
                        [
                            "self.r_target_net(x_random).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_174": {
                "input": {
                    "value": "r_pred_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x_random)",
                            "Call"
                        ],
                        [
                            "self.r_net(x_random)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "RDP-Anomaly/util.py": {
        "sklearn": {
            "load_svmlight_file_14": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_44": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_46": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RDP-Clustering/data/util.py": {
        "sklearn": {
            "load_svmlight_file_11": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_41": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_43": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RDP-Clustering/model.py": {
        "sklearn": {},
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.recon_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_157": {
                "variable": {
                    "value": "self.r_net_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.r_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_187": {
                "variable": {
                    "value": "pair_wise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_target, p=1, dim=1) * F.normalize(r_target_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.normalize(r_pred, p=1, dim=1) * F.normalize(r_pred_random, p=1, dim=1)).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_232": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.r_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "MAX_GRAD_NORM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "save_229": {
                "obj": {
                    "value": "dict_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'r_net': self.r_net.state_dict(), 'r_target_net': self.r_target_net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[out_c]",
                            "List"
                        ],
                        [
                            "[out_c]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "in_c",
                            "variable"
                        ],
                        [
                            "h",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[out_c]",
                            "List"
                        ],
                        [
                            "[out_c]",
                            "List"
                        ]
                    ]
                }
            },
            "Dropout_94": {
                "p": {
                    "value": "dropout_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_r",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_194": {
                "input": {
                    "value": "torch.abs(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_180": {
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "torch.cos(x)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_185": {
                "input": {
                    "value": "r_target_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_target_net(x_random).detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_186": {
                "input": {
                    "value": "r_pred_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net(x_random)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_194": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.r_net.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "RDP-Clustering/test.py": {
        "sklearn": {
            "fetch_20newsgroups_vectorized_56": {
                "variable": {
                    "value": "newsgroups_data",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_118": {
                "variable": {
                    "value": "kmeans_results",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "40",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "105",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "round",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round in range(kmeans_rounds)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_130": {
                "variable": {
                    "value": "nmi_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_135": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_140": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_145": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_150": {
                "variable": {
                    "value": "RI_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "TSNE_158": {
                "variable": {
                    "value": "tsne_results",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_71": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CountVectorizer_74": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fetch_olivetti_faces_78": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RDP-Clustering/train.py": {
        "sklearn": {
            "fetch_20newsgroups_vectorized_65": {
                "variable": {
                    "value": "newsgroups_data",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_80": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CountVectorizer_83": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fetch_olivetti_faces_87": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_135": {
                "variable": {
                    "value": "kmeans_results",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "40",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "105",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_144": {
                "variable": {
                    "value": "nmi_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_149": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_154": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_159": {
                "variable": {
                    "value": "fscores",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_164": {
                "variable": {
                    "value": "RI_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "newsgroups_data.target",
                            "Attribute"
                        ],
                        [
                            "df['class'].values",
                            "Attribute"
                        ],
                        [
                            "[labels_idx.index(ele) for ele in labels]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(labels, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "data.target",
                            "Attribute"
                        ],
                        [
                            "get_data_from_svmlight_file('data/rcv1_train.binary')",
                            "Call"
                        ],
                        [
                            "get_data_from_svmlight_file('data/sector.scale.all')",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(y_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RDP-Clustering/util.py": {
        "sklearn": {
            "load_svmlight_file_14": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_44": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_46": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['class']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RDP-Anomaly/test.py": {
        "torch": {
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RDP-Anomaly/train.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}