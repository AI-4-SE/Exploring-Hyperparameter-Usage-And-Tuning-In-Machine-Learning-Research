{
    "cunet/evaluation/results.py": {
        "tensorflow": {
            "latest_checkpoint_174": {
                "variable": {
                    "value": "latest",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path_results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(path_results, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(config.PATH_MODEL, target, config.NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(config.PATH_MODEL, config.NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_190": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "path_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(path_results, config.NAME + '.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(path_results, config.NAME + '.h5')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_197": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "path_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(path_results, config.NAME + '.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(path_results, config.NAME + '.h5')",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'tf': tf}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/evaluation/visualizing.py": {
        "tensorflow": {
            "Model_74": {
                "variable": {
                    "value": "model_control",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model.inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[model.layers[10].output, model.layers[11].output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_92": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "path_models + version",
                    "type": "BinOp",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'tf': tf}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/train/config.py": {
        "tensorflow": {}
    },
    "cunet/train/data_loader.py": {
        "tensorflow": {
            "py_function_118": {
                "variable": {
                    "value": "(mixture, target, conditions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "py_prepare_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[data['data'], data['conditions'], data['val']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "(tf.float32, tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "function_82": {
                "autograph": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ensure_shape_127": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d['mix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "config.INPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ensure_shape_137": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d['target']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "config.INPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_142": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "config.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ensure_shape_133": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(d['conditions'], c_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, config.Z_DIM)",
                            "Tuple"
                        ],
                        [
                            "(config.Z_DIM, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "d['conditions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, config.Z_DIM)",
                            "Tuple"
                        ],
                        [
                            "(config.Z_DIM, 1)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "cunet/train/main.py": {
        "tensorflow": {
            "get_logger_13": {
                "variable": {
                    "value": "logger",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_30": {
                "variable": {
                    "value": "latest",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(save_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/train/models/FiLM_utils.py": {
        "tensorflow": {
            "tile_12": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(gamma, 2), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ],
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_13": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(beta, 2), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ],
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_15": {
                "function": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_27": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(gamma, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ],
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_28": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(beta, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ],
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_30": {
                "function": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Lambda_37": {
                "function": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Lambda_44": {
                "function": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_14": {
                "x": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(beta, 2), 3), s)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(beta, 1), s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(x, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_29": {
                "x": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(beta, 2), 3), s)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(beta, 1), s)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(x, g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_12": {
                "input": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_13": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_14": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(gamma, 2), 3), s)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(gamma, 1), s)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_27": {
                "input": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_29": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(gamma, 2), 3), s)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(gamma, 1), s)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cunet/train/models/control_models.py": {
        "tensorflow": {
            "Input_31": {
                "variable": {
                    "value": "input_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, config.Z_DIM)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "random_normal_initializer_33": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Input_70": {
                "variable": {
                    "value": "input_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(config.Z_DIM, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "random_normal_initializer_71": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "n_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "n_neurons[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config.ACT_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_39": {
                "units": {
                    "value": "n_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "n_neurons[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config.ACT_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_75": {
                "units": {
                    "value": "n_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config.ACT_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_79": {
                "units": {
                    "value": "n_conditions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "n_filters[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "config.ACT_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_13": {
                "units": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1D_52": {
                "filters": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_17": {
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_56": {
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/train/models/cunet_model.py": {
        "tensorflow": {
            "Input_31": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "config.INPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_35": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_77": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[inputs, x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_78": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inputs, input_conditions]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiply([inputs, x])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_19": {
                "filters": {
                    "value": "n_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "config.FILTERS_LAYER_1 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "encoder_layer.get_shape().as_list()[-1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_21": {
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "lr": {
                    "value": "config.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/train/models/unet_model.py": {
        "tensorflow": {
            "Input_45": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "config.INPUT_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_49": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_75": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[inputs, x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_76": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=config.INPUT_SHAPE)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiply([inputs, x])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_14": {
                "identifier": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "alpha": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "n_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "config.FILTERS_LAYER_1 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "encoder_layer.get_shape().as_list()[-1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(5",
                            "MethodArgument"
                        ],
                        [
                            "(5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_23": {
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_34": {
                "filters": {
                    "value": "n_filters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "config.FILTERS_LAYER_1 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "encoder_layer.get_shape().as_list()[-1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(5",
                            "MethodArgument"
                        ],
                        [
                            "(5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=0.02)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_37": {
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Concatenate_33": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "lr": {
                    "value": "config.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cunet/train/others/utilities.py": {
        "tensorflow": {
            "EarlyStopping_43": {
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "config.EARLY_STOPPING_MIN_DELTA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "config.EARLY_STOPPING_PATIENCE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_53": {
                "filepath": {
                    "value": "os.path.join(folder, 'ckpt')",
                    "type": "Call",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_62": {
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "config.EARLY_STOPPING_MIN_DELTA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "config.REDUCE_PLATEAU_PATIENCE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorBoard_72": {
                "log_dir": {
                    "value": "folder",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(config.PATH_BASE, t, config.MODE)",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, config.TARGET)",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, '_'.join((config.FILM_TYPE, config.CONTROL_TYPE)))",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, 'checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(folder, 'tensorboard')",
                            "Call"
                        ]
                    ]
                },
                "write_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}