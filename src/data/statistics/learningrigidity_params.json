{
    "SimpleLoader.py": {
        "torch": {}
    },
    "external_packages/correlation-pytorch-master/correlation-pytorch/build.py": {
        "torch": {}
    },
    "external_packages/correlation-pytorch-master/correlation-pytorch/correlation_package/_ext/corr/__init__.py": {
        "torch": {}
    },
    "external_packages/correlation-pytorch-master/correlation-pytorch/correlation_package/functions/corr.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "external_packages/correlation-pytorch-master/correlation-pytorch/correlation_package/modules/corr.py": {
        "torch": {}
    },
    "geometry.py": {
        "torch": {
            "arange_17": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_18": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "uvdrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_.view(B, 1, H, W), y_.view(B, 1, H, W), inv_z_.view(B, 1, H, W), color)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_.view(B, 1, H, W), y_.view(B, 1, H, W), depth.view(B, 1, H, W))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_145": {
                "tensors": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.stack(c_i, 1), torch.stack(c_j, 1), torch.stack(c_k, 1)]",
                            "List"
                        ],
                        [
                            "permute(r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "tensors": {
                    "value": "c_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cj, sj * si, sj * ci]",
                            "List"
                        ],
                        [
                            "[cj * ck, sj * sc - cs, sj * cc + ss]",
                            "List"
                        ],
                        [
                            "permute(c_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "tensors": {
                    "value": "c_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sj * sk, -cj * ss + cc, -cj * cs - sc]",
                            "List"
                        ],
                        [
                            "[cj * sk, sj * ss + cc, sj * cs - sc]",
                            "List"
                        ],
                        [
                            "permute(c_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "tensors": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-sj * ck, cj * sc + cs, cj * cc - ss]",
                            "List"
                        ],
                        [
                            "[-sj, cj * si, cj * ci]",
                            "List"
                        ],
                        [
                            "permute(c_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/PWCNet.py": {
        "torch": {
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_148": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_149": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_152": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_0(corr6), corr6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_274": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/RigidityNet.py": {
        "torch": {
            "Sequential_17": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, outplanes, kernel_size=ks, stride=st, padding=(ks - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.ConvTranspose2d(inplanes, outplanes, kernel_size=ks, stride=st, padding=(ks - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.predict_translate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.predict_rotate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.predict_fg5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.transpose_conv_ch[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.predict_fg4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.transpose_conv_ch[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.predict_fg3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.transpose_conv_ch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.predict_fg2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.transpose_conv_ch[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.predict_fg1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.transpose_conv_ch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ],
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ks - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ],
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplanes",
                            "Method Argument"
                        ],
                        [
                            "outplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ks - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[t, R]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[t, R]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "run_inference.py": {
        "torch": {
            "clamp_85": {
                "variable": {
                    "value": "input0[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "input0[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "input1[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "input1[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input0, input1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_101": {
                "variable": {
                    "value": "seg_feat_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(seg_feat_map, (H, W), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_feat_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(seg_feat_map, (H, W), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "(_, rigidity)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(seg_feat_map, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_259": {
                "variable": {
                    "value": "simple_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "simple_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimpleLoader(color_dir, depth_dir)",
                            "Call"
                        ],
                        [
                            "DataLoader(simple_loader, batch_size=1, shuffle=False)",
                            "Call"
                        ],
                        [
                            "simple_loader",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_53": {
                "variable": {
                    "value": "resize_img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(resize_H, resize_W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_66": {
                "variable": {
                    "value": "resize_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}