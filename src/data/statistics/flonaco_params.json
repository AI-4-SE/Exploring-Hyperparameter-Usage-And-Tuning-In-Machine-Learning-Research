{
    "experiments/gaussian/run_training_mog.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args_target': args_target, 'args_model': args_rnvp, 'args_training': args_training, 'target': mog, 'model_init': model_init, 'model': model, 'final_xs': xs[-1], 'xs': to_return['xs'], 'models': to_return['models'], 'losses': to_return['losses'], 'acc_rates': to_return['acc_rates'], 'taus': to_return['taus']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_file_name(args_target, args_training, args_model=args_rnvp, date=date, random_id=args.slurm_id, data_home=data_home)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[np.cos(t), np.sin(t)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_57": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_59": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/phi4/run_training.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args_target': args_target, 'args_model': args_rnvp, 'args_training': args_training, 'target': phi4, 'model_init': model_init, 'model': model, 'final_xs': xs[-1], 'xs': to_return['xs'], 'models': to_return['models'], 'losses': to_return['losses'], 'acc_rates': to_return['acc_rates'], 'taus': to_return['taus']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_file_name(args_target, args_training, args_model=args_rnvp, date=date, random_id=args.slurm_id, data_home=data_home)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/two_channel/run-two-channel.py": {
        "torch": {
            "zeros_127": {
                "variable": {
                    "value": "bridges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_bridges",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.n_bridges",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "n_steps - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "drift",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "bridges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_steps - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "a_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bridge_kwargs['x0'], bridge_kwargs['y0']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "b_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bridge_kwargs['x1'], bridge_kwargs['y1']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "a_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bridge_kwargs['x0'], bridge_kwargs['y0']]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "b_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bridge_kwargs['x1'], bridge_kwargs['y1']]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_128": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args_bridge['bridge_kwargs']['n_steps']",
                            "Subscript"
                        ],
                        [
                            "target.n_steps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_129": {
                "input": {
                    "value": "0.5 * np.pi * torch.linspace(-1, 1, n_steps)[1:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_208": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.beta * target.U(x) + nll(x, model, target)",
                            "BinOp"
                        ],
                        [
                            "ratio + (target.beta * target.U(xt) - nll(xt, model, target))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_209": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.beta * target.U(x) + nll(x, model, target)",
                            "BinOp"
                        ],
                        [
                            "ratio + (target.beta * target.U(xt) - nll(xt, model, target))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_224": {
                "tensors": {
                    "value": "accs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "min_210": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.beta * target.U(x) + nll(x, model, target)",
                            "BinOp"
                        ],
                        [
                            "ratio + (target.beta * target.U(xt) - nll(xt, model, target))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_217": {
                "outputs": {
                    "value": "target.U(xt).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_i",
                            "Name"
                        ],
                        [
                            "x_init.clone().detach_().requires_grad_()",
                            "Call"
                        ],
                        [
                            "xt.detach().clone().reshape(-1, model.dim).requires_grad_()",
                            "Call"
                        ],
                        [
                            "xt - gradPath * dt_path + noise",
                            "BinOp"
                        ],
                        [
                            "xt + bc * (xt < 0.0) - bc * (xt > bc)",
                            "BinOp"
                        ],
                        [
                            "xi.clone()",
                            "Call"
                        ],
                        [
                            "x.detach().clone().requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_219": {
                "input": {
                    "value": "gradPath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(target.U(xt).sum(), xt)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_129": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args_bridge['bridge_kwargs']['n_steps']",
                            "Subscript"
                        ],
                        [
                            "target.n_steps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_210": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.beta * target.U(x) + nll(x, model, target)",
                            "BinOp"
                        ],
                        [
                            "ratio + (target.beta * target.U(xt) - nll(xt, model, target))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_266": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_chkpt_{:06d}_nsteps_{:04d}.pkl'.format(step, n_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/wiggle/run_training_1wiggle.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_174": {
                "obj": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args_target': args_target, 'args_model': args_rnvp, 'args_training': args_training, 'target': crst, 'model_init': model_init, 'model': model, 'final_xs': xs[-1], 'xs': to_return['xs'], 'models': to_return['models'], 'losses': to_return['losses'], 'acc_rates': to_return['acc_rates'], 'acc_rates_mala': to_return['acc_rates_mala'], 'taus': to_return['taus'], 'grad_norms': to_return['grad_norms']}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_file_name(args_target, args_training, args_model=args_rnvp, date=date, random_id=args.slurm_id, data_home=data_home)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[6, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_58": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_120": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/croissant_utils.py": {
        "torch": {
            "linspace_84": {
                "variable": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "x_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_90": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(x_min, x_max, n_points, device=model.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "y_range",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_range.clone()",
                            "Call"
                        ],
                        [
                            "torch.linspace(y_min, y_max, n_points, device=model.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_43": {
                "variable": {
                    "value": "self.covars_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.inverse(cv) for cv in covars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "self.dets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.det(cv) for cv in covars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_88": {
                "variable": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "y_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "blu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "model.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 / self.k] * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_56": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "self.weights.sum() * torch.sqrt((2 * np.pi) ** self.dim * self.dets)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_51": {
                "input": {
                    "value": "5 * x[:, :, 1:] / self.ring_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_54": {
                "equation": {
                    "value": "kci,cij,kcj->kc",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "centered_x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x[:, :, :1] - m",
                            "BinOp"
                        ],
                        [
                            "centered_x - torch.sin(5 * x[:, :, 1:] / self.ring_mean).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "x - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_59": {
                "input": {
                    "value": "args",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * torch.einsum('kci,cij,kcj->kc', centered_x, self.covars_inv, centered_x)",
                            "BinOp"
                        ],
                        [
                            "args - torch.log(self.weights.sum() * torch.sqrt((2 * np.pi) ** self.dim * self.dets))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "inverse_43": {
                "input": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "det_44": {
                "input": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "input": {
                    "value": "(2 * np.pi) ** self.dim * self.dets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.meshgrid(x_range, y_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_91": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "n_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_61": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x_init.detach()",
                            "Call"
                        ],
                        [
                            "x.requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/gaussian_utils.py": {
        "torch": {
            "linspace_82": {
                "variable": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_min",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-10",
                            "MethodArgument"
                        ],
                        [
                            "-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "x_max",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_88": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_range",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(x_min, x_max, n_points, device=model.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x_min, x_max, n_points, device=model.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "y_range",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_range.clone()",
                            "Call"
                        ],
                        [
                            "torch.linspace(y_min, y_max, n_points, device=model.device)",
                            "Call"
                        ],
                        [
                            "x_range.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_111": {
                "variable": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_min",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-10",
                            "MethodArgument"
                        ],
                        [
                            "-10",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "x_max",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_114": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_range",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(x_min, x_max, n_points, device=model.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x_min, x_max, n_points, device=model.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "y_range",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_range.clone()",
                            "Call"
                        ],
                        [
                            "torch.linspace(y_min, y_max, n_points, device=model.device)",
                            "Call"
                        ],
                        [
                            "x_range.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_33": {
                "variable": {
                    "value": "self.cs_distrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "self.covars_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.inverse(cv) for cv in covars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "self.dets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.det(cv) for cv in covars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_86": {
                "variable": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "y_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 / self.k] * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultivariateNormal_36": {
                "variable": {
                    "value": "c_distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means[c].to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.covars[c].to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "self.weights.sum() * torch.sqrt((2 * np.pi) ** self.dim * self.dets)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "kci,cij,kcj->kc",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_60": {
                "input": {
                    "value": "args",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-0.5 * torch.einsum('kci,cij,kcj->kc', x - m, self.covars_inv, x - m)",
                            "BinOp"
                        ],
                        [
                            "args - torch.log(self.weights.sum() * torch.sqrt((2 * np.pi) ** self.dim * self.dets))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "inverse_42": {
                "input": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "det_43": {
                "input": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "(2 * np.pi) ** self.dim * self.dets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "tensors": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.meshgrid(x_range, y_range)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid(x_range, y_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "n_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.meshgrid(x_range, y_range)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid(x_range, y_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "n_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/models.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linears",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[nn.Linear(layerdims[i], layerdims[i + 1]) for i in range(len(layerdims) - 1)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "layerdims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layerdims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/phifour_utils.py": {
        "torch": {
            "SGD_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_or_values,) + (self.dim_grid,) * self.dim_phys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_62": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((n_or_values,) + (self.dim_grid,) * self.dim_phys)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "n_or_values",
                            "Name"
                        ],
                        [
                            "x_init.detach()",
                            "Call"
                        ],
                        [
                            "x.requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1,) * (2 * self.dim_phys)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bc[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_80": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((n_or_values,) + (self.dim_grid,) * self.dim_phys)",
                            "Call"
                        ],
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "n_or_values",
                            "Name"
                        ],
                        [
                            "x_init.detach()",
                            "Call"
                        ],
                        [
                            "x.requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1,) * (2 * self.dim_phys)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bc[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/real_nvp_mlp.py": {
        "torch": {
            "tanh_43": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask * self.scale_net(x * (1 - self.mask))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(s)",
                            "Call"
                        ],
                        [
                            "self.dt * s",
                            "BinOp"
                        ],
                        [
                            "MLP(layer_dims, init_scale=self.init_scale_in_coupling)",
                            "Call"
                        ],
                        [
                            "s.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_101": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "log_det_jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "log_det_jac",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_296": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z - self.prior_mean",
                            "BinOp"
                        ],
                        [
                            "torch.randn(n, self.dim, device=self.device)",
                            "Call"
                        ],
                        [
                            "self.prior_distrib.rsample(torch.Size([n])).to(self.device)",
                            "Call"
                        ],
                        [
                            "bridges.detach().requires_grad_().view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "bc_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_118": {
                "variable": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MultivariateNormal_120": {
                "variable": {
                    "value": "self.prior_distrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros((dim,), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_220": {
                "modules": {
                    "value": "coupling_layers",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "a_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.bridge_kwargs['x0'], self.bridge_kwargs['y0']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "b_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.bridge_kwargs['x1'], self.bridge_kwargs['y1']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_264": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_50": {
                "input": {
                    "value": "torch.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_59": {
                "input": {
                    "value": "torch.exp(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_105": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_126": {
                "variable": {
                    "value": "self.prior_distrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros((dim,), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "precision_matrix": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_255": {
                "equation": {
                    "value": "ki,ij,kj->k",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z - self.prior_mean",
                            "BinOp"
                        ],
                        [
                            "torch.randn(n, self.dim, device=self.device)",
                            "Call"
                        ],
                        [
                            "self.prior_distrib.rsample(torch.Size([n])).to(self.device)",
                            "Call"
                        ],
                        [
                            "bridges.detach().requires_grad_().view(n, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "bridges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_steps - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_58": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask * self.scale_net(x * (1 - self.mask))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(s)",
                            "Call"
                        ],
                        [
                            "self.dt * s",
                            "BinOp"
                        ],
                        [
                            "MLP(layer_dims, init_scale=self.init_scale_in_coupling)",
                            "Call"
                        ],
                        [
                            "s.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_139": {
                "variable": {
                    "value": "self.prior_distrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros((dim,), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "precision_matrix": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "modules": {
                    "value": "couplings",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.coupling_layers[block]",
                            "Subscript"
                        ],
                        [
                            "self.coupling_layers[::-1][block]",
                            "Subscript"
                        ],
                        [
                            "self.build_coupling_block(layer_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_54": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_124": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logdet_125": {
                "input": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_145": {
                "variable": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_arg['cov']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultivariateNormal_149": {
                "variable": {
                    "value": "self.prior_distrib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_arg['mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "precision_matrix": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask * self.scale_net(x * (1 - self.mask))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(s)",
                            "Call"
                        ],
                        [
                            "self.dt * s",
                            "BinOp"
                        ],
                        [
                            "MLP(layer_dims, init_scale=self.init_scale_in_coupling)",
                            "Call"
                        ],
                        [
                            "s.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_133": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "triu_134": {
                "input": {
                    "value": "torch.ones_like(prec)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logdet_138": {
                "input": {
                    "value": "prec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.eye(dim) * (3 * self.coef + 1 / self.coef)",
                            "BinOp"
                        ],
                        [
                            "prec - self.coef * torch.triu(torch.triu(torch.ones_like(prec), diagonal=-1).T, diagonal=-1)",
                            "BinOp"
                        ],
                        [
                            "prior_arg['beta'] * prec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logdet_148": {
                "input": {
                    "value": "self.prior_prec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "prec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.eye(dim) * (3 * self.coef + 1 / self.coef)",
                            "BinOp"
                        ],
                        [
                            "prec - self.coef * torch.triu(torch.triu(torch.ones_like(prec), diagonal=-1).T, diagonal=-1)",
                            "BinOp"
                        ],
                        [
                            "prior_arg['beta'] * prec",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "flonaco/sampling.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "dt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x_lang]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "dt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_35": {
                "tensors": {
                    "value": "xs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "xs_chains.reshape(-1, model1.dim)",
                            "Call"
                        ],
                        [
                            "model2.sample(n_tot)",
                            "Call"
                        ],
                        [
                            "xs_all[-steps_per_chain:, :, :].reshape(-1, model1.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_62": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_63": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_92": {
                "tensors": {
                    "value": "xs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "xs_chains.reshape(-1, model1.dim)",
                            "Call"
                        ],
                        [
                            "model2.sample(n_tot)",
                            "Call"
                        ],
                        [
                            "xs_all[-steps_per_chain:, :, :].reshape(-1, model1.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "xts",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_133": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_134": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_159": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_160": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_240": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_241": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_303": {
                "variable": {
                    "value": "Zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "int(10000.0)",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "model2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_348": {
                "input": {
                    "value": "diff",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "diff_coupling.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "diff + (-model1.beta * model1.V(x) + model2.beta * model2.V(x))",
                            "BinOp"
                        ],
                        [
                            "-model1.beta * model1.U(x) + model2.beta * model2.U(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_72": {
                "tensors": {
                    "value": "accs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "accs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "accs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_205": {
                "tensors": {
                    "value": "accs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_223": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_224": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_248": {
                "tensors": {
                    "value": "accs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_like_22": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_64": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_87": {
                "outputs": {
                    "value": "model.V(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_init.clone()",
                            "Call"
                        ],
                        [
                            "x_init - dt * target.grad_U(x_init)",
                            "BinOp"
                        ],
                        [
                            "x + dt * np.sqrt(2 / (dt * target.beta)) * torch.randn_like(x_lang)",
                            "BinOp"
                        ],
                        [
                            "x - (gradU - drift) * dt + np.sqrt(2 / model.beta * dt) * torch.randn_like(gradU)",
                            "BinOp"
                        ],
                        [
                            "x + bc * (x < 0.0) - bc * (x > bc)",
                            "BinOp"
                        ],
                        [
                            "model.sample(xt.shape[0])",
                            "Call"
                        ],
                        [
                            "model.sample(x_init.shape[0])",
                            "Call"
                        ],
                        [
                            "model.sample(x_lang.shape[0])",
                            "Call"
                        ],
                        [
                            "model.sample(x_lang.shape[0])",
                            "Call"
                        ],
                        [
                            "x_lang.clone()",
                            "Call"
                        ],
                        [
                            "x_lang - dt * target.grad_U(x_lang)",
                            "BinOp"
                        ],
                        [
                            "x.detach().numpy()",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x.swapaxes(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_106": {
                "outputs": {
                    "value": "model.U(xt).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "xt - gradPath * dt_path + noise",
                            "BinOp"
                        ],
                        [
                            "xt + bc * (xt < 0.0) - bc * (xt > bc)",
                            "BinOp"
                        ],
                        [
                            "xt.reshape(-1, model.dim)",
                            "Call"
                        ],
                        [
                            "xt - gradPath * dt_path + noise",
                            "BinOp"
                        ],
                        [
                            "xt + bc * (xt < 0.0) - bc * (xt > bc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_108": {
                "input": {
                    "value": "gradPath",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.autograd.grad(model.U(xt).sum(), xt)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(target.U(xt).sum(), xt)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_135": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_140": {
                "outputs": {
                    "value": "target.U(xt).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "xt - gradPath * dt_path + noise",
                            "BinOp"
                        ],
                        [
                            "xt + bc * (xt < 0.0) - bc * (xt > bc)",
                            "BinOp"
                        ],
                        [
                            "xt.reshape(-1, model.dim)",
                            "Call"
                        ],
                        [
                            "xt - gradPath * dt_path + noise",
                            "BinOp"
                        ],
                        [
                            "xt + bc * (xt < 0.0) - bc * (xt > bc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_142": {
                "input": {
                    "value": "gradPath",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.autograd.grad(model.U(xt).sum(), xt)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(target.U(xt).sum(), xt)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_161": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_191": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_192": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_242": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_55": {
                "input": {
                    "value": "x_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "model2.sample(int(n_tot / steps_per_chain))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_88": {
                "input": {
                    "value": "gradU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(model.V(x), x)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_135": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_161": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_180": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_225": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_233": {
                "input": {
                    "value": "x_lang",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_242": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_193": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_225": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_193": {
                "input": {
                    "value": "ratio",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "ratio + ((x - x_lang + dt * target.grad_U(x_lang)) ** 2 / (4 * dt)).sum(1)",
                            "BinOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-betadt * target.U(x) + betadt * model.nll(x.reshape(-1, model.dim))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.beta * target.U(x) + model.nll(x)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ],
                        [
                            "-target.U(x)",
                            "UnaryOp"
                        ],
                        [
                            "target.beta * ratio",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flonaco/training.py": {
        "torch": {
            "Adam_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_194": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isinf_243": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_func(x)",
                            "Call"
                        ],
                        [
                            "loss * target.dt * target.beta",
                            "BinOp"
                        ],
                        [
                            "loss_func(x)",
                            "Call"
                        ],
                        [
                            "loss + (-model.nll(xb) + target.U(xb)).mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__248": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_105": {
                "variable": {
                    "value": "x_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args_loss['n_tot']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "model.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "x_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "x_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args_loss['n_tot']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "model.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "drift",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/two_channel.py": {
        "torch": {
            "randn_186": {
                "variable": {
                    "value": "steps_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_187": {
                "variable": {
                    "value": "steps_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_191": {
                "variable": {
                    "value": "ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "t1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.015",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "bridge",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_216": {
                "variable": {
                    "value": "bc_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((bridge[:, 0, :, :] - a_min) / dt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_217": {
                "variable": {
                    "value": "bc_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((b_min - bridge[:, -1, :, :]) / dt) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "self.mu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0 / 3.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.mu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 5.0 / 3.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "self.mu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.mu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_86": {
                "variable": {
                    "value": "bc_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((xt[:, 0, :, :] - self.a_min) / self.dt + grads[:, 0, :, :] - drift[:, 0, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "bc_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((self.b_min - xt[:, -1, :, :]) / self.dt + grads[:, -1, :, :] - drift[:, -1, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_101": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_102": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_103": {
                "variable": {
                    "value": "(Xs, Ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_142": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_143": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_144": {
                "variable": {
                    "value": "(Xs, Ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(-2.0, 2.0, 100, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[0.75, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "xt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "input": {
                    "value": "xt.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "Zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Xs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "Zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Xs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_69": {
                "input": {
                    "value": "-torch.sum((x - mu) ** 2, dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_82": {
                "outputs": {
                    "value": "self.V(xt).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xt.view(xt.shape[0], -1, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_192": {
                "input": {
                    "value": "steps_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(n_steps, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_194": {
                "input": {
                    "value": "steps_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(n_steps, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "self.V(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - grad * dt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_74": {
                "input": {
                    "value": "(x - self.mu1) ** 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "self.V(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - grad * dt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_69": {
                "input": {
                    "value": "(x - mu) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "integrand ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "integrand ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[Xs[i, j], Ys[i, j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "[Xs[i, j], Ys[i, j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "flonaco/utils_plots.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "z_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "model.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft_35": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(n_points, model.dim, 2)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "model.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(n_points, model.dim, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n_points, dim, 2)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "x_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_points",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "fft_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(n_points, model.dim, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n_points, dim, 2)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_gaussian.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[-9, -9]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[-5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_phifour.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_wiggle.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "121",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[6, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_25": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_53": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}