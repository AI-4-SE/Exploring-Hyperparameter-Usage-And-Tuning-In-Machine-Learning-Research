{
    "ctt/data_loading/loader.py": {
        "torch": {
            "tensor_627": {
                "variable": {
                    "value": "set_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x[cls.SET_VALUED_FIELDS[0]].shape[0] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_629": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_set_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([x[cls.SET_VALUED_FIELDS[0]].shape[0] for x in batch])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_629": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "set_lens[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_620": {
                "tensors": {
                    "value": "[x[key] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_635": {
                "sequences": {
                    "value": "[x[key] for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_695": {
                "obj": {
                    "value": "tensor_or_dict",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_861": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContactDataset(path=path, **dataset_kwargs)",
                            "Call"
                        ],
                        [
                            "[ContactDataset(path=p, **dataset_kwargs) for p in path]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ContactDatastream(dataset, shuffle_in_dataset=shuffle)",
                            "Call"
                        ],
                        [
                            "ConcatDataset([ContactDataset(path=p, **dataset_kwargs) for p in path])",
                            "Call"
                        ],
                        [
                            "ContactDatastream(dataset, shuffle_in_dataset=shuffle)",
                            "Call"
                        ],
                        [
                            "ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "self.datasets",
                            "Attribute"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConcatDataset_875": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[ContactDataset(path=p, **dataset_kwargs) for p in path]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_468": {
                "ndarray": {
                    "value": "np.array([human_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_469": {
                "ndarray": {
                    "value": "np.array([day_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_470": {
                "ndarray": {
                    "value": "health_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_health_history(human_day_info)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_471": {
                "ndarray": {
                    "value": "health_profile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([age, sex, preexsting_conditions])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_472": {
                "ndarray": {
                    "value": "preexsting_conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "human_day_info['observed'].get('preexisting_conditions', np.array(self.DEFAULT_PREEXISTING_CONDITIONS))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_473": {
                "ndarray": {
                    "value": "age",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_age(human_day_info)",
                            "Call"
                        ],
                        [
                            "human_day_info['observed'].get('age', self.DEFAULT_AGE)",
                            "Call"
                        ],
                        [
                            "np.array([-1] * 8).astype('int')",
                            "Call"
                        ],
                        [
                            "np.unpackbits(np.array([age]).astype('uint8')).astype('int')",
                            "Call"
                        ],
                        [
                            "np.array([-1.0])",
                            "Call"
                        ],
                        [
                            "(age - self.ASSUMED_MIN_AGE) / (self.ASSUMED_MAX_AGE - self.ASSUMED_MIN_AGE)",
                            "BinOp"
                        ],
                        [
                            "np.array([age])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_474": {
                "ndarray": {
                    "value": "sex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([human_day_info['observed'].get('sex', self.DEFAULT_SEX)])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_475": {
                "ndarray": {
                    "value": "infectiousness_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_infectiousness_history(human_day_info, future_human_day_info)",
                            "Call"
                        ],
                        [
                            "human_day_info['unobserved']['infectiousness']",
                            "Subscript"
                        ],
                        [
                            "future_human_day_info['unobserved']['infectiousness']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([_infectiousness_history[0:1], _infectiousness_history[:-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "np.pad(infectiousness_history, ((0, 14 - infectiousness_history.shape[0]),), mode='constant')",
                            "Call"
                        ],
                        [
                            "infectiousness_history",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_476": {
                "ndarray": {
                    "value": "viral_load_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_viral_load_history(infectiousness_history, human_day_info)",
                            "Call"
                        ],
                        [
                            "infectiousness_history / multiplier",
                            "BinOp"
                        ],
                        [
                            "infectiousness_history",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_477": {
                "ndarray": {
                    "value": "vl2i_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_viral_load_history(infectiousness_history, human_day_info)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_478": {
                "ndarray": {
                    "value": "exposure_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_exposure_history(human_day_info)",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=(14,))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_479": {
                "ndarray": {
                    "value": "history_days",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(day_idx - 13, day_idx + 1)[::-1, None]",
                            "Subscript"
                        ],
                        [
                            "np.clip(history_days, 0, None)",
                            "Call"
                        ],
                        [
                            "history_days - day_idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_480": {
                "ndarray": {
                    "value": "valid_history_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(history_days >= 0)[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_481": {
                "ndarray": {
                    "value": "current_compartment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'R'",
                            "str"
                        ],
                        [
                            "np.array([current_compartment == 'S', current_compartment == 'E', current_compartment == 'I', current_compartment == 'R']).astype('float32')",
                            "Call"
                        ],
                        [
                            "'I'",
                            "str"
                        ],
                        [
                            "'E'",
                            "str"
                        ],
                        [
                            "'S'",
                            "str"
                        ]
                    ]
                }
            },
            "from_numpy_482": {
                "ndarray": {
                    "value": "health_at_encounter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "health_history[encounter_at_historical_day_idx, :]",
                            "Subscript"
                        ],
                        [
                            "np.zeros((0, health_history.shape[-1]), dtype=health_history.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_483": {
                "ndarray": {
                    "value": "encounter_message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encounter_info[:, 1]",
                            "Subscript"
                        ],
                        [
                            "self._fetch_encounter_message(encounter_message, num_encounters)",
                            "Call"
                        ],
                        [
                            "encounter_message",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_484": {
                "ndarray": {
                    "value": "encounter_partner_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encounter_info[:, 0]",
                            "Subscript"
                        ],
                        [
                            "np.unpackbits(encounter_partner_id.astype(f'uint{self._num_id_bits}').view('uint8')).reshape(num_encounters, self._num_id_bits).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((0, self._num_id_bits)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_485": {
                "ndarray": {
                    "value": "encounter_day[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_486": {
                "ndarray": {
                    "value": "encounter_duration[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_487": {
                "ndarray": {
                    "value": "encounter_is_contagion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fetch_encounter_is_contagion(human_day_info, valid_encounter_mask, encounter_day)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ctt/data_loading/sampler.py": {
        "torch": {
            "tensor_49": {
                "variable": {
                    "value": "sample[sample_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.rejection_weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "sample[sample_weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/data_loading/transforms.py": {
        "torch": {
            "rand_252": {
                "variable": {
                    "value": "pec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(health_profile.shape[0] - 2,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_profile.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_profile.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "variable": {
                    "value": "infectiousness_history",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.digitize(infectiousness_history.numpy(), bins=self.bins, right=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_192": {
                "variable": {
                    "value": "symptom_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(health_history.shape[0], health_history.shape[-1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_197": {
                "variable": {
                    "value": "test_result_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(health_history.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "full_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[symptom_mask, test_result_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_288": {
                "variable": {
                    "value": "binned_infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "infectiousness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['latent_variable']",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(infectiousness, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "dequantized_infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.take(self.dequantization_bins, binned_infectiousness.numpy(), mode='clip')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "input_dict[encounter_message]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "encounter_message + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_129": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encounter_message.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encounter_message.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encounter_message.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_209": {
                "variable": {
                    "value": "symptom_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, health_history.shape[-1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_214": {
                "variable": {
                    "value": "test_result_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "full_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[symptom_mask, test_result_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_300": {
                "variable": {
                    "value": "dequantized_infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "infectiousness.numpy() * dequant_bins[None, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_300": {
                "variable": {
                    "value": "dequantized_infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_222": {
                "variable": {
                    "value": "symptom_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_227": {
                "variable": {
                    "value": "test_result_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "health_history.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "health_history.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "full_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[symptom_mask, test_result_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_296": {
                "variable": {
                    "value": "infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "infectiousness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['latent_variable']",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(infectiousness, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_93": {
                "input": {
                    "value": "torch.randn(tuple(encounter_message.shape), dtype=encounter_message.dtype, device=encounter_message.device) * self.noise_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "dequantized_infectiousness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "infectiousness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['latent_variable']",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(infectiousness, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "tuple(encounter_message.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encounter_message.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encounter_message.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "tuple(encounter_duration.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encounter_duration.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "encounter_duration.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/inference/infer.py": {
        "torch": {
            "load_77": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt') if weight_path is None else weight_path",
                            "IfExp"
                        ],
                        [
                            "path + '.trace'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt') if weight_path is None else weight_path",
                            "IfExp"
                        ],
                        [
                            "path + '.trace'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_82": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/losses.py": {
        "torch": {
            "KLDivLoss_29": {
                "variable": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_53": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(input, dim=-1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "unreduced_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(losses, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_101": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "input[:, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.log_softmax(input, dim=-1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(input[:, :, 1:2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_357": {
                "variable": {
                    "value": "nonehot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_onehots.max(1).values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleDict_369": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "meshgrid_39": {
                "variable": {
                    "value": "(_II, _JJ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(B, dtype=torch.long, device=target.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(M, dtype=torch.long, device=target.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, M, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_262": {
                "input": {
                    "value": "predicted_vl2i_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_output['vl2i_multiplier'][:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_vl2i_multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_input['vl2i_multiplier']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "logit_sink",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "contagion_logit.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "contagion_logit.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "full_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logit_sink, contagion_logit[:, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_349": {
                "input": {
                    "value": "full_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([logit_sink, contagion_logit[:, :, 0]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_onehots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_single_exposure_targets(model_input.encounter_is_contagion)",
                            "Call"
                        ],
                        [
                            "target_onehots[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "target_onehots",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_360": {
                "input": {
                    "value": "target_onehots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prepare_single_exposure_targets(model_input.encounter_is_contagion)",
                            "Call"
                        ],
                        [
                            "target_onehots[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "target_onehots",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_40": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_75": {
                "input": {
                    "value": "(q - 1) * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_101": {
                "input": {
                    "value": "input[:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/attn.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_Q",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_K",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_K",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_30": {
                "variable": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Q.split(dim_split, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "K.split(dim_split, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "V.split(dim_split, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "super(torch.Tensor, Q_ + A.bmm(V_)).split(split_size, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_inds, dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_seeds, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_size or dim_in",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.fc_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size + dim_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.fc_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ],
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ],
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_117": {
                "variable": {
                    "value": "global_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_i(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_o(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_177": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_21": {
                "variable": {
                    "value": "self.ln0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_22": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_.bmm(K_.transpose(1, 2)) / math.sqrt(self.dim_V)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights] * self.num_heads",
                            "BinOp"
                        ],
                        [
                            "torch.cat(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_61": {
                "variable": {
                    "value": "log_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.clamp_min(0.0) + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores + log_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_187": {
                "input": {
                    "value": "super(LinearReLU, self).forward(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "input": {
                    "value": "self.fc_o(O)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_55": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights] * self.num_heads",
                            "BinOp"
                        ],
                        [
                            "torch.cat(weights, dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_154": {
                "input": {
                    "value": "self.fc_f(torch.cat([X, global_features], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_166": {
                "input": {
                    "value": "self.fc(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_178": {
                "input": {
                    "value": "self.fc2(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[X, global_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/modules.py": {
        "torch": {
            "cat_163": {
                "variable": {
                    "value": "post_sinusoids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(pre_sinusoids), torch.cos(pre_sinusoids)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_138": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.encoding_dim // self.position_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_11": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "message_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "message_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_77": {
                "input": {
                    "value": "input + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "self.max_frequency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "exps / encoding_dim_per_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_98": {
                "variable": {
                    "value": "log_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.clamp_min(0.0) + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_164": {
                "input": {
                    "value": "pre_sinusoids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions[:, :, :, None] / divisors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_164": {
                "input": {
                    "value": "pre_sinusoids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions[:, :, :, None] / divisors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_170": {
                "input": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "post_sinusoids.reshape(N, T, self.encoding_dim)",
                            "Call"
                        ],
                        [
                            "encodings / torch.norm(encodings, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "encodings * mask[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/moment_processors/moment_net.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "health_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[health_history.reshape(batch_size, -1), inputs['health_profile'], history_days.reshape(batch_size, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "encounter_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['encounter_health'], inputs['encounter_message'], inputs['encounter_day'], inputs['encounter_duration']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[health_variables, encounter_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "variable"
                        ],
                        [
                            "capacity",
                            "variable"
                        ],
                        [
                            "capacity",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "capacity if len(block_types) > 1 else out_dim",
                            "IfExp"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "capacity",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "ctt/models/transformers/ctt0.py": {
        "torch": {
            "cat_187": {
                "variable": {
                    "value": "encounter_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings['embedded_encounter_day'], embeddings['embedded_encounter_partner_ids'], embeddings['embedded_encounter_duration'], embeddings['embedded_encounter_health'], embeddings['embedded_encounter_messages'], expanded_health_profile_per_encounter]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "self_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings['embedded_history_days'], expanded_pid_placeholder, expanded_duration_placeholder, embeddings['embedded_health_history'], expanded_message_placeholder, expanded_health_profile_per_day]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encounter_entities, self_entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "expanded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs['mask'], inputs['valid_history_mask']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_488": {
                "variable": {
                    "value": "self_attention_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "self_attention_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[attn.SAB(dim_in=sab_in_dim, dim_out=sab_capacity, num_heads=num_heads)]",
                            "List"
                        ],
                        [
                            "[nn.Sequential(nn.Linear(sab_in_dim, sab_capacity), nn.ReLU(), nn.Linear(sab_capacity, sab_capacity), nn.ReLU(), nn.Linear(sab_capacity, sab_capacity), nn.ReLU())]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(self_attention_blocks)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_491": {
                "variable": {
                    "value": "encounter_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(sab_capacity, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_497": {
                "variable": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(sab_capacity + sab_metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_504": {
                "variable": {
                    "value": "message_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((message_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_506": {
                "variable": {
                    "value": "partner_id_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_partner_id_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_510": {
                "variable": {
                    "value": "duration_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_duration_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[meta_data, entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_492": {
                "in_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_494": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encounter_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_498": {
                "in_features": {
                    "value": "sab_capacity + sab_metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_500": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_variable_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_504": {
                "*size": {
                    "value": "(message_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_507": {
                "*size": {
                    "value": "(encounter_partner_id_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_511": {
                "*size": {
                    "value": "(encounter_duration_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_471": {
                "*args": {
                    "value": "nn.Linear(sab_in_dim, sab_capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "in_features": {
                    "value": "sab_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_embedding_dim + encounter_partner_id_embedding_dim + encounter_duration_embedding_dim + health_history_embedding_dim + message_embedding_dim + health_profile_embedding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_474": {
                "in_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_476": {
                "in_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sab_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/transformers/ctt1.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "daily_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings['embedded_history_days'], embeddings['embedded_health_history'], expanded_health_profile_per_day]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "encounter_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings['embedded_encounter_day'], embeddings['embedded_encounter_partner_ids'], embeddings['embedded_encounter_duration'], embeddings['embedded_encounter_health'], embeddings['embedded_encounter_messages'], expanded_health_profile_per_encounter]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_350": {
                "variable": {
                    "value": "attention_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "attention_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(attention_blocks)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_353": {
                "variable": {
                    "value": "encounter_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(attention_block_capacity + metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(attention_block_capacity + metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_365": {
                "variable": {
                    "value": "partner_id_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_partner_id_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[meta_data, entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_354": {
                "in_features": {
                    "value": "attention_block_capacity + metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_356": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encounter_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_360": {
                "in_features": {
                    "value": "attention_block_capacity + metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_362": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_variable_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_366": {
                "*size": {
                    "value": "(encounter_partner_id_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/transformers/ctt2.py": {
        "torch": {
            "eq_117": {
                "variable": {
                    "value": "day_encounter_coupling_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['history_days']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs['encounter_day'][:, None, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "meta_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings['embedded_history_days'], pooled_encounter_entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[extracted_entities['daily_entities'], pooled_encounter_entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "post_pooling_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(pooler_in_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_279": {
                "variable": {
                    "value": "attention_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "attention_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[attn.SAB(dim_in=daily_in_dim, dim_out=attention_block_capacity, num_heads=num_heads)] + [attn.SAB(dim_in=daily_intermediate_dim, dim_out=attention_block_capacity, num_heads=num_heads) for _ in range(num_attention_blocks - 1)]",
                            "BinOp"
                        ],
                        [
                            "nn.ModuleList(attention_blocks)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "encounter_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(attention_block_capacity + metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(attention_block_capacity + metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "partner_id_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_partner_id_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[entities, meta_data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "in_features": {
                    "value": "pooler_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_embedding_dim + encounter_partner_id_embedding_dim + encounter_duration_embedding_dim + health_history_embedding_dim + message_embedding_dim + health_profile_embedding_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_262": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "pooled_encounter_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_283": {
                "in_features": {
                    "value": "attention_block_capacity + metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_285": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encounter_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "attention_block_capacity + metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_variable_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_295": {
                "*size": {
                    "value": "(encounter_partner_id_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/models/transformers/msn.py": {
        "torch": {
            "ModuleList_162": {
                "variable": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(blocks)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "encounter_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(block_capacity, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "message_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((message_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "partner_id_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_partner_id_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_198": {
                "variable": {
                    "value": "duration_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((encounter_duration_embedding_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[meta_data, entities]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(block_capacity + block_metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "in_features": {
                    "value": "block_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encounter_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleDict_187": {
                "variable": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "latent_variable_mlp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Sequential(nn.Linear(block_capacity + block_metadata_dim, capacity), nn.ReLU(), nn.Linear(capacity, latent_variable_output_features))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nn.ModuleDict(latent_variable_mlp)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_192": {
                "*size": {
                    "value": "(message_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "(encounter_partner_id_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_199": {
                "*size": {
                    "value": "(encounter_duration_embedding_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "block_capacity + block_metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_variable_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(cu.get_infectiousness_bins()) + 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "latent_variable_mlp[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(block_capacity + block_metadata_dim, capacity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "block_capacity + block_metadata_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_variable_output_features[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/opts.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctt/training.py": {
        "torch": {
            "load_316": {
                "variable": {
                    "value": "info_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device(self.device if device is None else device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_332": {
                "variable": {
                    "value": "info_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path or self.get('finetune/weight_path', default=None)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_310": {
                "obj": {
                    "value": "info_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'optim': self.optim.state_dict(), 'epoch': self.epoch, 'step': self.step, 'current_validation_metrics': current_validation_metrics}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckpt_path, map_location=torch.device(self.device if device is None else device))",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_directory, 'best.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_300": {
                "variable": {
                    "value": "trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_318": {
                "type": {
                    "value": "self.device if device is None else device",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "ctt/utils.py": {
        "torch": {
            "linspace_30": {
                "variable": {
                    "value": "expanded_linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "value_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "value_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_49": {
                "variable": {
                    "value": "type_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "type_[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "reference_types[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_51": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bmc,bmt->btc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_7": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gt_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "expanded_linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(value_range[0], value_range[1], size, dtype=x.dtype, device=x.device).expand(*[1] * (x.dim() - 1) + [size])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "moments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "moments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mean]",
                            "List"
                        ],
                        [
                            "torch.cat(moments, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}