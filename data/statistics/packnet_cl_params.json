{
    "packnet/nets.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5760",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=input_channels, out_channels=10, kernel_size=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5760",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_127": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.y",
                            "Attribute"
                        ],
                        [
                            "rewards.y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "variable": {
                    "value": "self.norm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1728",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm_layer(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_169": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.y",
                            "Attribute"
                        ],
                        [
                            "rewards.y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.model_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.model_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2303, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_42": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.y",
                            "Attribute"
                        ],
                        [
                            "rewards.y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_45": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_80": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.y",
                            "Attribute"
                        ],
                        [
                            "rewards.y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_83": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_131": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_151": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense2(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.norm_layer(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.dense1(x))",
                            "Call"
                        ],
                        [
                            "observations.x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_173": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_215": {
                "input": {
                    "value": "self(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.y",
                            "Attribute"
                        ],
                        [
                            "rewards.y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_218": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "5760",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_190": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_195": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_200": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "2303",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_206": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_208": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packnet/packnet.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "all_prunable",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "quantile_53": {
                "variable": {
                    "value": "cutoff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(all_prunable)",
                    "type": "Call",
                    "possible_values": []
                },
                "q": {
                    "value": "prune_quantile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prune_quantile",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_201": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_weights.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_53": {
                "input": {
                    "value": "all_prunable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([])",
                            "Call"
                        ],
                        [
                            "torch.cat((all_prunable.view(-1), p), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_207": {
                "f": {
                    "value": "self.PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "prev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_layer.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "prev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_layer.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "prev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_layer.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "all_prunable",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_prunable.view(-1), p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "prev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_layer.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_68": {
                "variable": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "param_layer * prev_mask",
                            "BinOp"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "mod.parameters()",
                            "Call"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ],
                        [
                            "mod.named_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_68": {
                "variable": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cutoff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.quantile(torch.abs(all_prunable), q=prune_quantile)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_69": {
                "variable": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(param_layer).ge(cutoff)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(curr_mask, ~prev_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "~prev_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "prev_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param_layer.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packnet/packnet_method.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packnet/packnet_test.py": {
        "torch": {
            "count_nonzero_35": {
                "input": {
                    "value": "layer_mask.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "count_nonzero_43": {
                "input": {
                    "value": "layer_mask.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/baseline_cl.py": {
        "torch": {
            "NLLLoss_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "sgd_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "DataLoader_27": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root=DATA_DIR, train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "sgd_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/packnet_a2c.py": {
        "torch": {}
    },
    "scripts/packnet_mnist_cl.py": {
        "torch": {
            "DataLoader_26": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_40": {
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.KMNIST(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_model(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}