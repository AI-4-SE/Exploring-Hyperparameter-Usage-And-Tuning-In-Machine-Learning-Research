{
    "checkpoint_saver.py": {
        "torch": {
            "save_119": {
                "obj": {
                    "value": "save_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'arch': type(self.model).__name__.lower(), 'state_dict': get_state_dict(self.model, self.unwrap_fn), 'optimizer': self.optimizer.state_dict(), 'version': 2}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.recovery_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "finetune.py": {
        "torch": {
            "CrossEntropyLoss_685": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_346": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_434": {
                "seed": {
                    "value": "args.seed + args.rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_486": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, drop_rate=args.drop, drop_connect_rate=args.drop_connect, drop_path_rate=args.drop_path, drop_block_rate=args.drop_block, global_pool=args.gp, bn_tf=args.bn_tf, bn_momentum=args.bn_momentum, bn_eps=args.bn_eps, checkpoint_path=args.initial_checkpoint, img_size=args.img_size, use_chk=args.use_chk)",
                            "Call"
                        ],
                        [
                            "convert_splitbn_model(model, max(num_aug_splits, 2))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=list(range(args.num_gpu))).cuda()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "ApexDDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "NativeDDP(model, device_ids=[args.local_rank], find_unused_parameters=False)",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_349": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_422": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_806": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_871": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_351": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_684": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_901": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_353": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                }
            },
            "clip_grad_norm__803": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_363": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSprop_371": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ],
                        [
                            "[{'params': base_para, 'lr': args.lr_scale * args.lr}, {'params': head_para}]",
                            "List"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "labeled_memcached_dataset.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "CrossEntropyLoss_525": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_297": {
                "seed": {
                    "value": "args.seed + args.rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_354": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, drop_rate=args.drop, drop_connect_rate=args.drop_connect, drop_path_rate=args.drop_path, drop_block_rate=args.drop_block, global_pool=args.gp, bn_tf=args.bn_tf, bn_momentum=args.bn_momentum, bn_eps=args.bn_eps, checkpoint_path=args.initial_checkpoint, img_size=args.img_size, use_chk=args.use_chk)",
                            "Call"
                        ],
                        [
                            "convert_splitbn_model(model, max(num_aug_splits, 2))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=list(range(args.num_gpu))).cuda()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "ApexDDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "NativeDDP(model, device_ids=[args.local_rank], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_285": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_524": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_740": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__643": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/cswin.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.get_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q @ k.transpose(-2, -1)",
                            "BinOp"
                        ],
                        [
                            "nn.functional.softmax(attn, dim=-1, dtype=attn.dtype)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_232": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "variable": {
                    "value": "self.stage1_conv_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, embed_dim, 7, 4, 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_266": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[0], reso=img_size // 4, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[0], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_276": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[1], reso=img_size // 8, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[1], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[np.sum(depth[:1]) + i], norm_layer=norm_layer) for i in range(depth[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "temp_stage3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_299": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[3], reso=img_size // 32, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[-1], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[np.sum(depth[:-1]) + i], norm_layer=norm_layer, last_stage=True) for i in range(depth[-1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LePEAttention(dim, resolution=self.patches_resolution, idx=-1, split_size=split_size, num_heads=num_heads, dim_out=dim, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop) for i in range(self.branch_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LePEAttention(dim // 2, resolution=self.patches_resolution, idx=i, split_size=split_size, num_heads=num_heads // 2, dim_out=dim // 2, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop) for i in range(self.branch_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "attened_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_356": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(-2, -1).contiguous().view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "img2windows(x, self.H_sp, self.W_sp)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.H_sp * self.W_sp, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.transpose(-2, -1).contiguous().view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // H_sp, H_sp, W // W_sp, W_sp)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 4, 1, 3, 5).contiguous().reshape(-1, C, H_sp, W_sp)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_heads, C // self.num_heads, self.H_sp * self.W_sp).permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "attn @ v + lepe",
                            "BinOp"
                        ],
                        [
                            "x.transpose(1, 2).reshape(-1, self.H_sp * self.W_sp, C)",
                            "Call"
                        ],
                        [
                            "windows2img(x, self.H_sp, self.W_sp, H, W).view(B, -1, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(attened_x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.transpose(-2, -1).contiguous().view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, -1).transpose(-2, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.stage1_conv_embed(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "pre(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_261": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_309": {
                "in_features": {
                    "value": "curr_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_265": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "np.sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "in_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/backbone/cswin_transformer.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.get_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_132": {
                "variable": {
                    "value": "qkv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv(img).reshape(B, H, W, 3, C).permute(0, 3, 4, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_pad, right_pad, top_pad, down_pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q @ k.transpose(-2, -1)",
                            "BinOp"
                        ],
                        [
                            "nn.functional.softmax(attn, dim=-1, dtype=attn.dtype)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.stage1_conv_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, embed_dim, 7, 4, 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_286": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[0], patches_resolution=224 // 4, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[0], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_300": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "curr_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * (heads[1] // heads[0])",
                            "BinOp"
                        ],
                        [
                            "curr_dim * (heads[2] // heads[1])",
                            "BinOp"
                        ],
                        [
                            "curr_dim * (heads[3] // heads[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[1], patches_resolution=224 // 8, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[1], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[np.sum(depth[:1]) + i], norm_layer=norm_layer) for i in range(depth[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_311": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "curr_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Name"
                        ],
                        [
                            "curr_dim * (heads[1] // heads[0])",
                            "BinOp"
                        ],
                        [
                            "curr_dim * (heads[2] // heads[1])",
                            "BinOp"
                        ],
                        [
                            "curr_dim * (heads[3] // heads[2])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "temp_stage3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_325": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CSWinBlock(dim=curr_dim, num_heads=heads[3], patches_resolution=224 // 32, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, split_size=split_size[-1], drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[np.sum(depth[:-1]) + i], norm_layer=norm_layer, last_stage=True) for i in range(depth[-1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LePEAttention(dim, resolution=self.patches_resolution, idx=-1, split_size=split_size, num_heads=num_heads, dim_out=dim, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop) for i in range(self.branch_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LePEAttention(dim // 2, resolution=self.patches_resolution, idx=i, split_size=split_size, num_heads=num_heads // 2, dim_out=dim // 2, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop) for i in range(self.branch_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "attened_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_283": {
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_289": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "np.sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/mmcv_custom/checkpoint.py": {
        "torch": {
            "load_162": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO(fileclient.get(filename))",
                            "Call"
                        ],
                        [
                            "io.BytesIO(fileclient.get(filename))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_138": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "downloaded_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(tmp_dir, model.name)",
                            "Call"
                        ],
                        [
                            "osp.join(tmp_dir, model.name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_168": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO(fileclient.get(filename))",
                            "Call"
                        ],
                        [
                            "io.BytesIO(fileclient.get(filename))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "downloaded_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "osp.join(tmp_dir, model.name)",
                            "Call"
                        ],
                        [
                            "osp.join(tmp_dir, model.name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_351": {
                "variable": {
                    "value": "table_pretrained_resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "table_pretrained.permute(1, 0).view(1, nH1, S1, S1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(S2, S2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_501": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_zoo.load_url(url, model_dir=model_dir)",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(url, model_dir=model_dir)",
                            "Call"
                        ],
                        [
                            "torch.load(downloaded_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(downloaded_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "_process_mmcls_checkpoint(checkpoint)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_url)",
                            "Call"
                        ],
                        [
                            "load_url_dist(filename)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_pavimodel_dist(model_path, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_fileclient_dist(filename, backend='ceph', map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "_load_checkpoint(filename, map_location)",
                            "Call"
                        ],
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(get_state_dict(model))}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_265": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(_get_mmcv_home(), model_url)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_494": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_zoo.load_url(url, model_dir=model_dir)",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(url, model_dir=model_dir)",
                            "Call"
                        ],
                        [
                            "torch.load(downloaded_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(downloaded_file, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(buffer, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "_process_mmcls_checkpoint(checkpoint)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_url)",
                            "Call"
                        ],
                        [
                            "load_url_dist(filename)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_pavimodel_dist(model_path, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "load_fileclient_dist(filename, backend='ceph', map_location=map_location)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "_load_checkpoint(filename, map_location)",
                            "Call"
                        ],
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(get_state_dict(model))}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_282": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(_get_mmcv_home(), model_url)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}