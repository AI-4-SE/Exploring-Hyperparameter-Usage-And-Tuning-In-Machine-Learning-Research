{
    "data/CelebA/generate_niid_agg.py": {
        "sklearn": {},
        "torch": {
            "save_197": {
                "obj": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'classes': [], 'user_data': {'x': [], 'y': []}, 'num_samples': 0}",
                            "Dict"
                        ],
                        [
                            "{'users': [None for _ in range(n_users)], 'num_samples': [None for _ in range(n_users)], 'user_data': {}}",
                            "Dict"
                        ],
                        [
                            "load_data(user_lists, cdata, agg_user=agg_user)",
                            "Call"
                        ],
                        [
                            "load_data(user_lists, cdata, agg_user=agg_user)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "outfile",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_90": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/optimizers/fedoptimizer.py": {
        "torch": {}
    },
    "FLAlgorithms/servers/serverbase.py": {
        "torch": {
            "load_115": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('models', self.dataset)",
                            "Call"
                        ],
                        [
                            "os.path.join('models', self.dataset, 'server' + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_143": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_144": {
                "variable": {
                    "value": "self.ensemble_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_145": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'server' + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_213": {
                "variable": {
                    "value": "target_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logit_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "target_logit_output + user_result['logit']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "torch.argmax(target_logp, dim=1) == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_214": {
                "input": {
                    "value": "target_logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(target_logit_output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/servers/serverpFedEnsemble.py": {
        "torch": {}
    },
    "FLAlgorithms/servers/serverpFedGen.py": {
        "torch": {
            "Adam_42": {
                "variable": {
                    "value": "self.generative_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generative_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.ensemble_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_46": {
                "variable": {
                    "value": "self.generative_lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.generative_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.ensemble_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_52": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(self.qualified_labels, batch_size)",
                            "Call"
                        ],
                        [
                            "self.available_labels",
                            "Attribute"
                        ],
                        [
                            "np.repeat(y, repeats=repeats, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_159": {
                "variable": {
                    "value": "student_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(student_output['logit'], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(teacher_logit, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_150": {
                "variable": {
                    "value": "user_output_logp_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_result_given_gen['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "teacher_loss_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generative_model.crossentropy_loss(user_output_logp_, y_input) * torch.tensor(weight, dtype=torch.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_159": {
                "input": {
                    "value": "student_output['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "input": {
                    "value": "teacher_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "teacher_logit + user_result_given_gen['logit'] * torch.tensor(expand_weight, dtype=torch.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "expand_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(weight, (1, self.unique_labels))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_weights[y][:, user_idx].reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/trainmodel/generator.py": {
        "torch": {
            "NLLLoss_30": {
                "variable": {
                    "value": "self.crossentropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_32": {
                "variable": {
                    "value": "self.dist_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.representation_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_configs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.noise_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eps, y_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_150": {
                "variable": {
                    "value": "(eps1, eps2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_151": {
                "variable": {
                    "value": "(chunk1, chunk2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layers",
                            "Attribute"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_167": {
                "variable": {
                    "value": "(eps1, eps2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_168": {
                "variable": {
                    "value": "(chunk1, chunk2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layers",
                            "Attribute"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ],
                        [
                            "layer.view((layer.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ],
                        [
                            "layer.size(0) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_186": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.noise_dim * 2 if self.embedding else self.noise_dim + self.n_class",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_218": {
                "input": {
                    "value": "torch.mean(-noise_dist * layer_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "torch.abs(eps1 - eps2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_169": {
                "input": {
                    "value": "torch.abs(eps1 - eps2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_193": {
                "input": {
                    "value": "tensor1 - tensor2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "dim": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_218": {
                "input": {
                    "value": "-noise_dist * layer_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "chunk1 - chunk2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_153": {
                "input": {
                    "value": "eps1 - eps2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_169": {
                "input": {
                    "value": "chunk1 - chunk2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_170": {
                "input": {
                    "value": "eps1 - eps2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_195": {
                "input": {
                    "value": "tensor1 - tensor2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_195": {
                "dim": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/trainmodel/models.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "fc_layer1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "fc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_111": {
                "variable": {
                    "value": "restults[output]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(z)",
                            "Call"
                        ],
                        [
                            "z_input",
                            "variable"
                        ],
                        [
                            "layer(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(z)",
                            "Call"
                        ],
                        [
                            "z_input",
                            "variable"
                        ],
                        [
                            "layer(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_35": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "variable": {
                    "value": "pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "cnn_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/users/userFedDistill.py": {
        "torch": {
            "ones_12": {
                "variable": {
                    "value": "self.label_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "unique_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "self.logit_sums",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(unique_labels, unique_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "logit_sums_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.unique_labels, self.unique_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.global_logits[y, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/users/userFedProx.py": {
        "torch": {
            "ExponentialLR_10": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/users/userGen.py": {
        "torch": {}
    },
    "FLAlgorithms/users/useravg.py": {
        "torch": {}
    },
    "FLAlgorithms/users/userbase.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "self.testloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "self.testloaderfull",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "self.trainloaderfull",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_58": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "NLLLoss_65": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_66": {
                "variable": {
                    "value": "self.dist_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_67": {
                "variable": {
                    "value": "self.ensemble_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_195": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'server' + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_170": {
                "variable": {
                    "value": "(unique_y, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_path, 'user_' + self.id + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "torch.argmax(output, dim=1) == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "torch.argmax(output, dim=1) == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)['output']",
                            "Subscript"
                        ],
                        [
                            "self.model(x)['output']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_152": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)['output']",
                            "Subscript"
                        ],
                        [
                            "self.model(x)['output']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/users/userpFedEnsemble.py": {
        "torch": {
            "ExponentialLR_22": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.generative_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generative_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_34": {
                "variable": {
                    "value": "self.generative_lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.generative_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.available_labels",
                            "Attribute"
                        ],
                        [
                            "np.repeat(y, repeats=repeats, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "DIST_LOSS.double()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "FLAlgorithms/users/userpFedGen.py": {
        "torch": {
            "softmax_57": {
                "variable": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_given_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(gen_output, start_layer_idx=self.latent_layer_idx, logit=True)['logit']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_57": {
                "variable": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "sampled_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sampled_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(self.available_labels, self.gen_batch_size)",
                            "Call"
                        ],
                        [
                            "torch.tensor(sampled_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_65": {
                "input": {
                    "value": "self.generative_model.crossentropy_loss(user_output_logp, sampled_y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/EMnist/generate_niid_dirichlet.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EMNIST(root='./data', split=split, train=True if mode == 'train' else False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "{'users': [], 'user_data': {}, 'num_samples': []}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset.data)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "X[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EMNIST(root='./data', split=split, train=True if mode == 'train' else False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "{'users': [], 'user_data': {}, 'num_samples': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "outfile",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/Mnist/generate_niid_dirichlet.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(root='./data', train=True if mode == 'train' else False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "{'users': [], 'user_data': {}, 'num_samples': []}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset.data)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "X[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST(root='./data', train=True if mode == 'train' else False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "{'users': [], 'user_data': {}, 'num_samples': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "outfile",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(args.times)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_plot.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "torch": {
            "DataLoader_129": {
                "variable": {
                    "value": "proxyloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(x, y) for (x, y) in zip(X, y)]",
                            "ListComp"
                        ],
                        [
                            "dataset.lower()",
                            "Call"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "combined + [(x, y) for (x, y) in zip(X, y)]",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_242": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_249": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_142": {
                "variable": {
                    "value": "unique_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(y).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(y).type(torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_187": {
                "variable": {
                    "value": "(unique_y, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_262": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(grad, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "permute_167": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_168": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_171": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_172": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_242": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_249": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_98": {
                "variable": {
                    "value": "cdata",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_241": {
                "input": {
                    "value": "torch.square(param - reg_param.clone().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_248": {
                "input": {
                    "value": "torch.square(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "cdata",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_114": {
                "variable": {
                    "value": "cdata",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_241": {
                "input": {
                    "value": "param - reg_param.clone().detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_248": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            }
        }
    }
}