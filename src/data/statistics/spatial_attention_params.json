{
    "agents/agent.py": {
        "torch": {
            "softmax_120": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_122": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.hidden[0], self.last_action_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "self.learned_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.learned_input, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_55": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_97": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/navigation_agent.py": {
        "torch": {
            "Tensor_39": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "(1, self.action_space)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_state_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_state_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_state_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_state_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/random_agent.py": {
        "torch": {
            "ones_22": {
                "variable": {
                    "value": "critic",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.action_space",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "episodes/basic_episode.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "state_to_save",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shared_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save_model_dir, '{0}_{1}_{2}_{3}.dat'.format(args.title, n_frames, train_total_ep, local_start_time_str))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_eval.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/basemodel.py": {
        "torch": {
            "Conv1d_19": {
                "variable": {
                    "value": "self.embed_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "resnet_embedding_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "variable": {
                    "value": "self.embed_glove",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "target_embedding_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.glove_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "variable": {
                    "value": "self.embed_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "action_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.action_space",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "variable": {
                    "value": "self.embed_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.memory_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_26": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "3136",
                    "type": "Constant",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.critic_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.actor_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_space",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "glove_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "glove_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_glove(target)",
                            "Call"
                        ],
                        [
                            "F.conv1d(target, weight=params['embed_glove.weight'], bias=params['embed_glove.bias'])",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_72": {
                "variable": {
                    "value": "action_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_action(action)",
                            "Call"
                        ],
                        [
                            "F.conv1d(action, weight=params['embed_action.weight'], bias=params['embed_action.bias'])",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_74": {
                "variable": {
                    "value": "memory_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_memory(memory)",
                            "Call"
                        ],
                        [
                            "F.conv1d(memory, weight=params['embed_memory.weight'], bias=params['embed_memory.bias'])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_80": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta_ST, theta_SM, theta_SA]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "poten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta.unsqueeze(0).transpose(1, 2).bmm(alpha).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_64": {
                "variable": {
                    "value": "glove_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.unsqueeze(0).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "model_input.target_class_embedding",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['embed_glove.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['embed_glove.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv1d_65": {
                "variable": {
                    "value": "action_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "action_embedding_input.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['embed_action.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['embed_action.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv1d_66": {
                "variable": {
                    "value": "state_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state.reshape(-1, 512, 49)",
                            "Call"
                        ],
                        [
                            "model_input.state",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['embed_state.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['embed_state.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv1d_67": {
                "variable": {
                    "value": "memory_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['embed_memory.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['embed_memory.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv1d_69": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['memory_alpha.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['memory_alpha.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linear_116": {
                "variable": {
                    "value": "critic_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hx",
                            "Name"
                        ],
                        [
                            "hx",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['critic_linear.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['critic_linear.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linear_121": {
                "variable": {
                    "value": "actor_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hx",
                            "Name"
                        ],
                        [
                            "hx",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['actor_linear.weight']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "params['actor_linear.bias']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_options.params",
                            "Attribute"
                        ]
                    ]
                }
            },
            "normalize_73": {
                "input": {
                    "value": "state_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_state(state)",
                            "Call"
                        ],
                        [
                            "F.conv1d(state, weight=params['embed_state.weight'], bias=params['embed_state.bias'])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_83": {
                "input": {
                    "value": "state_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embed_state(state)",
                            "Call"
                        ],
                        [
                            "F.conv1d(state, weight=params['embed_state.weight'], bias=params['embed_state.bias'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/eotp.py": {
        "torch": {}
    },
    "models/gcn.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "resnet_embedding_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "variable": {
                    "value": "self.maxp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.embed_glove",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "target_embedding_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.glove_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.embed_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.action_space",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "pointwise_in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "138",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_47": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "lstm_input_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7 * 7 * 64 + 512",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.critic_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.actor_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_sz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.hidden_state_sz",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action_space",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.action_predict_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * lstm_input_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.action_space",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "A_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/gcn/adjmat.dat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.resnet18",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "all_glove",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "83",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.all_glove",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "all_glove",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(n, 300)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.get_word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.get_class_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.W0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.final_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "83",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.resnet18[1](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(class_embed.repeat(self.n, 1), word_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet18[0](state)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.resnet18[1](x))",
                            "Call"
                        ],
                        [
                            "torch.cat((class_embed.repeat(self.n, 1), word_embed), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W0(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W1(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W2(x))",
                            "Call"
                        ],
                        [
                            "x.view(1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(image_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, glove_reshaped, action_reshaped), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.pointwise(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W0(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet18[0](state)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.resnet18[1](x))",
                            "Call"
                        ],
                        [
                            "torch.cat((class_embed.repeat(self.n, 1), word_embed), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W0(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W1(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W2(x))",
                            "Call"
                        ],
                        [
                            "x.view(1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(image_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, glove_reshaped, action_reshaped), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.pointwise(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet18[0](state)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.resnet18[1](x))",
                            "Call"
                        ],
                        [
                            "torch.cat((class_embed.repeat(self.n, 1), word_embed), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W0(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W1(x))",
                            "Call"
                        ],
                        [
                            "torch.mm(self.A, x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.W2(x))",
                            "Call"
                        ],
                        [
                            "x.view(1, self.n)",
                            "Call"
                        ],
                        [
                            "self.final_mapping(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(image_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, glove_reshaped, action_reshaped), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.pointwise(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "glove_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embed_glove(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "action_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embed_action(action_embedding_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "image_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, glove_reshaped, action_reshaped)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pointwise(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, self.gcn_embed(state))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_77": {}
        }
    },
    "models/savn.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.ll_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.ll_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/tcn.py": {
        "torch": {
            "Conv1d_27": {
                "variable": {
                    "value": "self.ll_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_37": {
                "variable": {
                    "value": "self.ll_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ll_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=params[layer_name + '.ll_conv1.weight'], bias=params[layer_name + '.ll_conv1.bias'], stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "self.chomp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "temporal_block(x, i, params=params)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ll_conv1(x)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=params[layer_name + '.ll_conv1.weight'], bias=params[layer_name + '.ll_conv1.bias'], stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "self.chomp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "temporal_block(x, i, params=params)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params[layer_name + '.ll_conv1.weight']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "params[layer_name + '.ll_conv1.bias']",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/shared_RMS_prop.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/shared_adam.py": {
        "torch": {
            "zeros_32": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "runners/eotp_train.py": {
        "torch": {
            "set_device_50": {
                "device": {
                    "value": "gpu_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_131": {
                "variable": {
                    "value": "meta_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss['total_loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v for (_, v) in params_list[0].items()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_102": {
                "variable": {
                    "value": "inner_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "learned_loss['learned_loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v for (_, v) in params_list[episode_num].items()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "runners/eotp_train_A3C.py": {
        "torch": {
            "set_device_48": {
                "device": {
                    "value": "gpu_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_126": {
                "variable": {
                    "value": "meta_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss['total_loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v for (_, v) in params_list[0].items()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_97": {
                "variable": {
                    "value": "inner_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "learned_loss['learned_loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v for (_, v) in params_list[episode_num].items()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "runners/eotp_val.py": {
        "torch": {
            "set_device_53": {
                "device": {
                    "value": "gpu_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "saved_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_to_open",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_109": {
                "variable": {
                    "value": "inner_gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "learned_loss['learned_loss']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v for (_, v) in params_list[episode_num].items()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "runners/nonadaptivea3c_train.py": {
        "torch": {
            "set_device_50": {
                "device": {
                    "value": "gpu_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "player.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "runners/nonadaptivea3c_val.py": {
        "torch": {
            "manual_seed_48": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "saved_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_to_open",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "runners/train_util.py": {
        "torch": {
            "zeros_34": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "gae",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "loss_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(player.hidden[0], player.last_action_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "shared_param._grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shared_param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "param._grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_128": {
                "type": {
                    "value": "'cuda:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc_util.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "input": {
                    "value": "(x ** 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/net_util.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weights.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "(x ** 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_11": {
                "type": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}