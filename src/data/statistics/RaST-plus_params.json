{
    "data_preprocess/phrase_vocabulary_optimization.py": {
        "tensorflow": {
            "GFile_222": {
                "name": {
                    "value": "FLAGS.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_223": {
                "name": {
                    "value": "statistics_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.output_file + '.log'",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data_preprocess/preprocess_main_out.py": {
        "tensorflow": {
            "GFile_65": {
                "name": {
                    "value": "count_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FLAGS.output_tfrecord + '.num_examples.txt'",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data_preprocess/utils_data.py": {
        "tensorflow": {
            "GFile_107": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_124": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_135": {
                "name": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_145": {
                "name": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "SequenceTagger.py": {
        "torch": {
            "set_printoptions_4": {
                "precision": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.log() * refs.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "num_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "word_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(word_probs, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_32": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "(act_probs, act_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_181": {
                "variable": {
                    "value": "(act_probs, act_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "start_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_186": {
                "variable": {
                    "value": "end_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "loss * masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_214": {
                "input": {
                    "value": "attention_mask == span_mask",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Categorical_234": {
                "variable": {
                    "value": "samples_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_235": {
                "variable": {
                    "value": "samples_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "start_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_236": {
                "variable": {
                    "value": "samples_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "end_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_237": {
                "variable": {
                    "value": "samples_action_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_action.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_238": {
                "variable": {
                    "value": "samples_start_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_start.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_239": {
                "variable": {
                    "value": "samples_end_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_end.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(rewards).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "tensor_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._tokenizer.convert_tokens_to_ids(tokenize_input)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {
            "tensor_300": {
                "variable": {
                    "value": "batch_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.token_pad_idx * np.ones((batch_len, max_subwords_len))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(batch_data, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "batch_data_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_data_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[min(len(s[0]), self.max_len) for s in sentences]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(batch_data_len, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_data_len.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "batch_token_starts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_token_starts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(batch_token_starts, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "boundaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boundaries",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data['query_boundary'][idx] for idx in order[i * self.batch_size:]]",
                            "ListComp"
                        ],
                        [
                            "[data['query_boundary'][idx] for idx in order[i * self.batch_size:(i + 1) * self.batch_size]]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(boundaries, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "batch_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, action, self.tag_pad_idx)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_action, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_action.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "batch_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_start",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, start, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_start, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_start.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "batch_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_end",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, end, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_end, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_end.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "device_333": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_337": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "misc.py": {
        "torch": {
            "clamp_99": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(-length + 1, 1, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range_mat - range_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_positions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_positions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lt_37": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "range_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "multi_headed_additive_attn.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_18": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_concat(torch.cat((q, k), dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_126": {
                "variable": {
                    "value": "self.relative_positions_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_relative_positions * 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(q, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/SequenceTagger.py": {
        "torch": {
            "sum_57": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist * refs.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "num_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_73": {
                "variable": {
                    "value": "word_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(word_probs, epsilon, 1.0 - epsilon)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_33": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_131": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.bert_config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert_config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "(act_probs, act_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_190": {
                "variable": {
                    "value": "(act_probs, act_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_60": {
                "input": {
                    "value": "loss * masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_193": {
                "variable": {
                    "value": "labels_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.one_hot(labels_start, num_classes=list(labels_start.size())[-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "list(labels_start.size())[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_194": {
                "variable": {
                    "value": "labels_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_end",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.one_hot(labels_end, num_classes=list(labels_end.size())[-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "list(labels_end.size())[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Categorical_209": {
                "variable": {
                    "value": "samples_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_210": {
                "variable": {
                    "value": "samples_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "log_start_dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Categorical_211": {
                "variable": {
                    "value": "samples_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "log_end_dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_212": {
                "variable": {
                    "value": "samples_action_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_action.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_213": {
                "variable": {
                    "value": "samples_start_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_start_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_start.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_214": {
                "variable": {
                    "value": "samples_end_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_end_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "samples_end.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(rewards).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_180": {
                "input": {
                    "value": "torch.ones(max_seq_len, max_seq_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "tensor_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._tokenizer.convert_tokens_to_ids(tokenize_input)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_180": {
                "*size": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/data_loader.py": {
        "torch": {
            "tensor_307": {
                "variable": {
                    "value": "batch_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.token_pad_idx * np.ones((batch_len, max_subwords_len))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(batch_data, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "batch_data_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_data_len",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[min(len(s[0]), self.max_len) for s in sentences]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(batch_data_len, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_data_len.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "batch_token_starts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_token_starts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(batch_token_starts, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "boundaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boundaries",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data['query_boundary'][idx] for idx in order[i * self.batch_size:]]",
                            "ListComp"
                        ],
                        [
                            "[data['query_boundary'][idx] for idx in order[i * self.batch_size:(i + 1) * self.batch_size]]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(boundaries, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "batch_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, action, self.tag_pad_idx)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_action, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_action.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "batch_start",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_start",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, start, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_start, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_start.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "batch_end",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_end",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy_data(batch_len, max_subwords_len, end, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_end, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch_end.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/evaluate.py": {
        "torch": {
            "device_318": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_322": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/misc.py": {
        "torch": {
            "clamp_99": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(-length + 1, 1, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range_mat - range_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_positions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_positions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lt_37": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "range_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/multi_headed_additive_attn.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_18": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_concat(torch.cat((q, k), dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_41": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1000000000.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_129": {
                "variable": {
                    "value": "self.relative_positions_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_relative_positions * 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "(q, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/p2_train.py": {
        "torch": {
            "device_174": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_54": {
                "input": {
                    "value": "batch_masks == batch_masks_v2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_norm__65": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "model.bert.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'pretrain_experiments_p1p2/roberta_large/fold{fold}-e{epoch}-wr{best_val_f1}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_fh",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/pretrain.py": {
        "torch": {
            "device_217": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_225": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "random.randint(1, int(100000000.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_254": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "processed_train_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'train.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_255": {
                "variable": {
                    "value": "train_data_with_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "processed_train_with_ref_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'train.withref.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_256": {
                "variable": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "processed_val_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'val.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "all_100": {
                "input": {
                    "value": "batch_token_masks == batch_masks_v2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + f\"/epoch{epoch}-revwer{val_metrics['rev_wer']}-silver{silver_val_f1}.pt\"",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(processed_train_path)",
                            "Call"
                        ],
                        [
                            "data_loader.load_data('train', loading_len=loading_len)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "processed_train_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'train.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_261": {
                "obj": {
                    "value": "train_data_with_ref",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(processed_train_with_ref_path)",
                            "Call"
                        ],
                        [
                            "data_loader.load_data('train', with_ref=True, loading_len=loading_len)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "processed_train_with_ref_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'train.withref.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "val_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(processed_val_path)",
                            "Call"
                        ],
                        [
                            "data_loader.load_data('dev', loading_len=loading_len)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "processed_val_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tagger_model_dir, 'val.data.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_99": {
                "start": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain_with_silver/utils.py": {
        "torch": {
            "load_126": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_111": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, 'last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "service.py": {
        "torch": {
            "device_312": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_316": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_151": {
                "variable": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_49": {
                "input": {
                    "value": "batch_masks == batch_masks_v2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "max_seq_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__67": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "args.restore_point",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_124": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_109": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, 'last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}